{"version":3,"file":"static/js/721.d5d8e1f4.chunk.js","mappings":"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","sources":["components/PlayerPicker/PlayerPicker.tsx","helpers/global.ts","components/ScoreTable/ScoreTable.tsx","pages/TournamentDetail.tsx"],"sourcesContent":["import AddIcon from '@mui/icons-material/Add';\r\nimport AddCircleIcon from '@mui/icons-material/AddCircle';\r\nimport PersonIcon from '@mui/icons-material/Person';\r\nimport { Button, ButtonGroup, Grid, IconButton, Paper, TextField } from '@mui/material';\r\nimport Avatar from '@mui/material/Avatar';\r\nimport Box from '@mui/material/Box';\r\nimport { blue, green, red } from '@mui/material/colors';\r\nimport Dialog from '@mui/material/Dialog';\r\nimport DialogTitle from '@mui/material/DialogTitle';\r\nimport List from '@mui/material/List';\r\nimport ListItem from '@mui/material/ListItem';\r\nimport ListItemAvatar from '@mui/material/ListItemAvatar';\r\nimport ListItemText from '@mui/material/ListItemText';\r\nimport Tab from '@mui/material/Tab';\r\nimport Table from '@mui/material/Table';\r\nimport TableBody from '@mui/material/TableBody';\r\nimport TableHead from '@mui/material/TableHead';\r\nimport TableRow from '@mui/material/TableRow';\r\nimport Tabs from '@mui/material/Tabs';\r\nimport Typography from '@mui/material/Typography';\r\nimport { Loading } from 'components/Loading';\r\nimport { TableContainer } from 'components/TableContainer';\r\nimport { where } from 'firebase/firestore';\r\nimport { usePlayerListQuery } from 'hooks';\r\nimport { combinations, includes, map, range, size } from 'lodash';\r\nimport 'lodash.combinations';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { Controller, useFieldArray, useForm, useWatch } from 'react-hook-form';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { TableCell } from 'style/components';\r\nimport { Fn, Player } from 'types/global';\r\n\r\ntype Props = {\r\n    onClose: Fn;\r\n    onPick: (player: Player) => void;\r\n    disabledPlayers?: string[];\r\n    open: boolean;\r\n};\r\n\r\nfunction PlayerPicker({ onClose, onPick, disabledPlayers, open }: Props) {\r\n    const { data, isLoading } = usePlayerListQuery([where('active', '==', 1)]);\r\n    const { t } = useTranslation();\r\n\r\n    return (\r\n        <Dialog onClose={onClose} open={open}>\r\n            <Loading loading={isLoading}>\r\n                <DialogTitle>{t(`Wybierz zawodnika`)}</DialogTitle>\r\n                <List sx={{ pt: 0 }}>\r\n                    {map(data?.docs, (docSnapshot) => {\r\n                        const player = docSnapshot.data();\r\n\r\n                        return (\r\n                            <ListItem\r\n                                disabled={includes(disabledPlayers, docSnapshot.id)}\r\n                                button\r\n                                onClick={() => onPick({ ...player, id: docSnapshot.id })}\r\n                                key={docSnapshot.id}\r\n                            >\r\n                                <ListItemAvatar>\r\n                                    <Avatar sx={{ bgcolor: blue[100], color: blue[600] }}>\r\n                                        <PersonIcon />\r\n                                    </Avatar>\r\n                                </ListItemAvatar>\r\n                                <ListItemText primary={player.firstName + ' ' + player.lastName} />\r\n                            </ListItem>\r\n                        );\r\n                    })}\r\n                </List>\r\n            </Loading>\r\n        </Dialog>\r\n    );\r\n}\r\nexport default React.memo(PlayerPicker);\r\n","import { matchStatus } from 'constants/global';\r\nimport { QueryDocumentSnapshot, QuerySnapshot } from 'firebase/firestore';\r\nimport { find } from 'lodash';\r\nimport { Player } from 'types/global';\r\n\r\nexport const getMatchStatus = (score: number) => {\r\n    if (score === 0) return matchStatus.D;\r\n\r\n    return score > 0 ? matchStatus.W : matchStatus.L;\r\n};\r\n\r\nexport const getPkt = (score: number) => {\r\n    if (score === 0) return 1;\r\n\r\n    return score > 0 ? 3 : 0;\r\n};\r\n\r\nexport const findPlayerNameById = (\r\n    id: string,\r\n    docs: QueryDocumentSnapshot<Player>[] | undefined\r\n) => {\r\n    const player = find(docs, { id: id })?.data();\r\n\r\n    return player?.firstName + ' ' + player?.lastName;\r\n};\r\n","import AddIcon from '@mui/icons-material/Add';\r\nimport AddCircleIcon from '@mui/icons-material/AddCircle';\r\nimport PersonIcon from '@mui/icons-material/Person';\r\nimport {\r\n    Alert,\r\n    Button,\r\n    ButtonGroup,\r\n    Divider,\r\n    Grid,\r\n    IconButton,\r\n    Paper,\r\n    TextField,\r\n} from '@mui/material';\r\nimport Avatar from '@mui/material/Avatar';\r\nimport Box from '@mui/material/Box';\r\nimport { blue, green, red } from '@mui/material/colors';\r\nimport Dialog from '@mui/material/Dialog';\r\nimport DialogTitle from '@mui/material/DialogTitle';\r\nimport List from '@mui/material/List';\r\nimport ListItem from '@mui/material/ListItem';\r\nimport ListItemAvatar from '@mui/material/ListItemAvatar';\r\nimport ListItemText from '@mui/material/ListItemText';\r\nimport Tab from '@mui/material/Tab';\r\nimport Table from '@mui/material/Table';\r\nimport TableBody from '@mui/material/TableBody';\r\nimport TableHead from '@mui/material/TableHead';\r\nimport TableRow from '@mui/material/TableRow';\r\nimport Tabs from '@mui/material/Tabs';\r\nimport Typography from '@mui/material/Typography';\r\nimport { PlayerPicker } from 'components/PlayerPicker';\r\nimport { TableContainer } from 'components/TableContainer';\r\nimport { matchStatus } from 'constants/global';\r\nimport { where } from 'firebase/firestore';\r\nimport { findPlayerNameById, getMatchStatus, getPkt } from 'helpers/global';\r\nimport { usePlayerListQuery } from 'hooks';\r\nimport {\r\n    combinations,\r\n    compact,\r\n    concat,\r\n    filter,\r\n    find,\r\n    flatMap,\r\n    isEmpty,\r\n    map,\r\n    orderBy,\r\n    range,\r\n    reduce,\r\n    size,\r\n} from 'lodash';\r\nimport 'lodash.combinations';\r\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\r\nimport { Controller, FieldArrayWithId, useFieldArray, useForm, useWatch } from 'react-hook-form';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { useUpdateEffect } from 'react-use';\r\nimport { TableCell } from 'style/components';\r\nimport { Player, Result, TournamentSchema } from 'types/global';\r\n\r\ntype ScoreResult = {\r\n    formId: string;\r\n    id: string;\r\n    pkt: number;\r\n    m: number;\r\n    w: number;\r\n    r: number;\r\n    p: number;\r\n    brPlus: number;\r\n    brMinus: number;\r\n    brDiff: number;\r\n};\r\n\r\ntype Props = {\r\n    players: FieldArrayWithId<TournamentSchema, 'players', 'formId'>[];\r\n    results: Result[];\r\n    promotion: number;\r\n    onAddPlayer: (index: number) => void;\r\n    className?: string;\r\n};\r\n\r\ntype MatchResult = {\r\n    status: keyof typeof matchStatus;\r\n    plus: number;\r\n    minus: number;\r\n    diff: number;\r\n    pkt: number;\r\n};\r\n\r\nfunction ScoreTable({ players, promotion, onAddPlayer, results, className }: Props) {\r\n    const { t } = useTranslation();\r\n    const { data } = usePlayerListQuery([where('active', '==', 1)]);\r\n\r\n    const findPlayerById = (id: string) => find(data?.docs, { id: id })?.data();\r\n\r\n    const getAllResultsByPlayerId = useCallback(\r\n        (id: string) =>\r\n            reduce(\r\n                results,\r\n                (acc: MatchResult[], { playerA, playerB }) => {\r\n                    if (playerA.score && playerB.score) {\r\n                        if (playerA.id === id) {\r\n                            return concat(acc, {\r\n                                status: getMatchStatus(\r\n                                    parseInt(playerA.score) - parseInt(playerB.score)\r\n                                ),\r\n                                plus: parseInt(playerA.score),\r\n                                minus: parseInt(playerB.score),\r\n                                diff: parseInt(playerA.score) - parseInt(playerB.score),\r\n                                pkt: getPkt(parseInt(playerA.score) - parseInt(playerB.score)),\r\n                            });\r\n                        }\r\n\r\n                        if (playerB.id === id) {\r\n                            return concat(acc, {\r\n                                status: getMatchStatus(\r\n                                    parseInt(playerB.score) - parseInt(playerA.score)\r\n                                ),\r\n                                plus: parseInt(playerB.score),\r\n                                minus: parseInt(playerA.score),\r\n                                diff: parseInt(playerB.score) - parseInt(playerA.score),\r\n                                pkt: getPkt(parseInt(playerB.score) - parseInt(playerA.score)),\r\n                            });\r\n                        }\r\n                    }\r\n\r\n                    return acc;\r\n                },\r\n                []\r\n            ),\r\n        [results]\r\n    );\r\n\r\n    const result = useMemo<ScoreResult[]>(() => {\r\n        if (isEmpty(results)) {\r\n            return map(players, (player) => ({\r\n                formId: player.formId,\r\n                id: player.id || '',\r\n                pkt: 0,\r\n                m: 0,\r\n                w: 0,\r\n                r: 0,\r\n                p: 0,\r\n                brPlus: 0,\r\n                brMinus: 0,\r\n                brDiff: 0,\r\n            }));\r\n        }\r\n\r\n        const resultList = map(players, (player) => {\r\n            const playerResult = getAllResultsByPlayerId(player.id as string);\r\n\r\n            return {\r\n                formId: player.formId,\r\n                id: player.id || '',\r\n                pkt: reduce(playerResult, (acc, { pkt }) => acc + pkt, 0),\r\n                m: size(playerResult),\r\n                w: size(filter(playerResult, { status: matchStatus.W })),\r\n                r: size(filter(playerResult, { status: matchStatus.D })),\r\n                p: size(filter(playerResult, { status: matchStatus.L })),\r\n                brPlus: reduce(playerResult, (acc, { plus }) => acc + plus, 0),\r\n                brMinus: reduce(playerResult, (acc, { minus }) => acc + minus, 0),\r\n                brDiff: reduce(playerResult, (acc, { diff }) => acc + diff, 0),\r\n            };\r\n        });\r\n\r\n        return orderBy(resultList, ['pkt', 'brDiff', 'brPlus'], ['desc', 'desc', 'desc']);\r\n    }, [results, players, getAllResultsByPlayerId]);\r\n\r\n    // formId, id, pkt, m, w, r, p, brPlus, brMinus, plusAndMinus;\r\n\r\n    // /NE3iRRYyKdUrqmfBdKRD\r\n\r\n    // const ttt = ;\r\n    // console.log(result, 'result');\r\n    // console.log(ttt, 'ttt');\r\n\r\n    // [{status: 'W', scorePlus: 2, scoreMinus: 1}]\r\n\r\n    return (\r\n        <TableContainer className={className}>\r\n            <Table>\r\n                <TableHead>\r\n                    <TableRow>\r\n                        <TableCell align=\"left\">{t('Zawodnik')}</TableCell>\r\n                        <TableCell width={50} className=\"text-center\">\r\n                            {t('Pkt')}\r\n                        </TableCell>\r\n                        <TableCell width={50} className=\"text-center\">\r\n                            {t('M')}\r\n                        </TableCell>\r\n                        <TableCell width={50} className=\"text-center\">\r\n                            {t('W')}\r\n                        </TableCell>\r\n                        <TableCell width={50} className=\"text-center\">\r\n                            {t('R')}\r\n                        </TableCell>\r\n                        <TableCell width={50} className=\"text-center\">\r\n                            {t('P')}\r\n                        </TableCell>\r\n                        <TableCell width={50} className=\"text-center\">\r\n                            {t('Br+')}\r\n                        </TableCell>\r\n                        <TableCell width={50} className=\"text-center\">\r\n                            {t('Br-')}\r\n                        </TableCell>\r\n                        <TableCell width={50} className=\"text-center\">\r\n                            {t('+/-')}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {map(\r\n                        result,\r\n                        ({ formId, id, pkt, m, w, r, p, brPlus, brMinus, brDiff }, index) => (\r\n                            <TableRow\r\n                                key={formId}\r\n                                style={{\r\n                                    backgroundColor: promotion > index ? green[100] : red[100],\r\n                                }}\r\n                            >\r\n                                <TableCell component=\"th\" scope=\"row\">\r\n                                    {id ? (\r\n                                        findPlayerNameById(id, data?.docs)\r\n                                    ) : (\r\n                                        <IconButton\r\n                                            className=\"p-0\"\r\n                                            size=\"small\"\r\n                                            color=\"primary\"\r\n                                            onClick={() => onAddPlayer(index)}\r\n                                        >\r\n                                            <AddCircleIcon />\r\n                                        </IconButton>\r\n                                    )}\r\n                                </TableCell>\r\n                                <TableCell\r\n                                    component=\"th\"\r\n                                    scope=\"row\"\r\n                                    className=\"text-center font-bold\"\r\n                                >\r\n                                    {pkt}\r\n                                </TableCell>\r\n                                <TableCell component=\"th\" scope=\"row\" className=\"text-center\">\r\n                                    {m}\r\n                                </TableCell>\r\n                                <TableCell component=\"th\" scope=\"row\" className=\"text-center\">\r\n                                    {w}\r\n                                </TableCell>\r\n                                <TableCell component=\"th\" scope=\"row\" className=\"text-center\">\r\n                                    {r}\r\n                                </TableCell>\r\n                                <TableCell component=\"th\" scope=\"row\" className=\"text-center\">\r\n                                    {p}\r\n                                </TableCell>\r\n                                <TableCell component=\"th\" scope=\"row\" className=\"text-center\">\r\n                                    {brPlus}\r\n                                </TableCell>\r\n                                <TableCell component=\"th\" scope=\"row\" className=\"text-center\">\r\n                                    {brMinus}\r\n                                </TableCell>\r\n                                <TableCell component=\"th\" scope=\"row\" className=\"text-center\">\r\n                                    {brDiff}\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        )\r\n                    )}\r\n                </TableBody>\r\n            </Table>\r\n        </TableContainer>\r\n    );\r\n}\r\nexport default React.memo(ScoreTable);\r\n","import AddIcon from '@mui/icons-material/Add';\r\nimport AddCircleIcon from '@mui/icons-material/AddCircle';\r\nimport PersonIcon from '@mui/icons-material/Person';\r\nimport {\r\n    Alert,\r\n    Button,\r\n    ButtonGroup,\r\n    Divider,\r\n    Grid,\r\n    IconButton,\r\n    Paper,\r\n    TextField,\r\n} from '@mui/material';\r\nimport Avatar from '@mui/material/Avatar';\r\nimport Box from '@mui/material/Box';\r\nimport { blue, green, red } from '@mui/material/colors';\r\nimport Dialog from '@mui/material/Dialog';\r\nimport DialogTitle from '@mui/material/DialogTitle';\r\nimport List from '@mui/material/List';\r\nimport ListItem from '@mui/material/ListItem';\r\nimport ListItemAvatar from '@mui/material/ListItemAvatar';\r\nimport ListItemText from '@mui/material/ListItemText';\r\nimport Tab from '@mui/material/Tab';\r\nimport Table from '@mui/material/Table';\r\nimport TableBody from '@mui/material/TableBody';\r\nimport TableHead from '@mui/material/TableHead';\r\nimport TableRow from '@mui/material/TableRow';\r\nimport Tabs from '@mui/material/Tabs';\r\nimport Typography from '@mui/material/Typography';\r\nimport { PlayerPicker } from 'components/PlayerPicker';\r\nimport { ScoreTable } from 'components/ScoreTable';\r\nimport { TableContainer } from 'components/TableContainer';\r\nimport { where } from 'firebase/firestore';\r\nimport { findPlayerNameById } from 'helpers/global';\r\nimport { usePlayerListQuery } from 'hooks';\r\nimport { combinations, compact, filter, find, isEmpty, map, range, size } from 'lodash';\r\nimport 'lodash.combinations';\r\nimport { useCallback, useEffect, useMemo, useState } from 'react';\r\nimport { Controller, useFieldArray, useForm, useWatch } from 'react-hook-form';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { useUpdateEffect } from 'react-use';\r\nimport { TableCell } from 'style/components';\r\nimport { Player, Tournament, TournamentSchema } from 'types/global';\r\n\r\ninterface TabPanelProps {\r\n    children?: React.ReactNode;\r\n    index: string;\r\n    value: string;\r\n}\r\n\r\nfunction TabPanel(props: TabPanelProps) {\r\n    const { children, value, index, ...other } = props;\r\n\r\n    return (\r\n        <div\r\n            role=\"tabpanel\"\r\n            hidden={value !== index}\r\n            id={`simple-tabpanel-${index}`}\r\n            aria-labelledby={`simple-tab-${index}`}\r\n            {...other}\r\n        >\r\n            {value === index && (\r\n                <Box sx={{ p: 3 }}>\r\n                    <Typography>{children}</Typography>\r\n                </Box>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nconst isTwoMatch = false;\r\n\r\nconst schema = {\r\n    playerCount: 3,\r\n    promotion: 1,\r\n};\r\n\r\nfunction TournamentDetail() {\r\n    const [value] = useState('Faza grupowa');\r\n\r\n    const { data } = usePlayerListQuery([where('active', '==', 1)]);\r\n\r\n    const [open, setOpen] = useState(false);\r\n    const [modalIndex, setModalIndex] = useState<number | null>(null);\r\n\r\n    const handleClickOpen = useCallback((index: number) => {\r\n        setModalIndex(index);\r\n        setOpen(true);\r\n    }, []);\r\n\r\n    const { control, handleSubmit, reset, register, setValue } = useForm<TournamentSchema>();\r\n\r\n    const {\r\n        fields: players,\r\n        append,\r\n        prepend,\r\n        remove,\r\n        swap,\r\n        move,\r\n        insert,\r\n        update,\r\n    } = useFieldArray({\r\n        control,\r\n        name: 'players',\r\n        keyName: 'formId',\r\n    });\r\n\r\n    const { fields: results, replace: resultsReplace } = useFieldArray({\r\n        control,\r\n        name: 'results',\r\n        keyName: 'formId',\r\n    });\r\n\r\n    useEffect(() => {\r\n        reset({\r\n            players: map(range(0, schema.playerCount), () => ({\r\n                id: '',\r\n                firstName: '',\r\n                lastName: '',\r\n            })),\r\n            results: [],\r\n        });\r\n    }, [reset]);\r\n\r\n    useUpdateEffect(() => {\r\n        if (isEmpty(filter(players, (field) => !field.id))) {\r\n            resultsReplace(\r\n                map(combinations(players, 2), ([teamA, teamB]) => ({\r\n                    playerA: { id: teamA.id || '', score: '' },\r\n                    playerB: { id: teamB.id || '', score: '' },\r\n                }))\r\n            );\r\n        }\r\n        console.log(players, 'fields');\r\n    }, [players]);\r\n\r\n    console.log('results', 'results');\r\n\r\n    const resultsValues = useWatch({\r\n        control,\r\n        name: 'results',\r\n    });\r\n\r\n    // \"my-2\"\r\n\r\n    console.log(resultsValues, 'resultsValues');\r\n\r\n    const { t } = useTranslation();\r\n\r\n    const handleChange = (event: React.SyntheticEvent, newValue: string) => {\r\n        // setValue(newValue);\r\n    };\r\n\r\n    const handleClose = useCallback(() => {\r\n        setModalIndex(null);\r\n        setOpen(false);\r\n    }, []);\r\n\r\n    const handlePick = useCallback(\r\n        (player: Player) => {\r\n            update(modalIndex as number, {\r\n                id: player.id,\r\n                firstName: player.firstName,\r\n                lastName: player.lastName,\r\n            });\r\n            handleClose();\r\n        },\r\n        [handleClose, modalIndex, update]\r\n    );\r\n\r\n    const disabledPlayers = useMemo(() => {\r\n        return compact(map(players, 'id'));\r\n    }, [players]);\r\n\r\n    console.log(results, 'results');\r\n\r\n    return (\r\n        <>\r\n            <PlayerPicker\r\n                onClose={handleClose}\r\n                open={open}\r\n                onPick={handlePick}\r\n                disabledPlayers={disabledPlayers}\r\n            />\r\n\r\n            <Paper>\r\n                {/* <Box sx={{ borderBottom: 1, borderColor: 'divider' }}> */}\r\n                <Tabs value={'Faza grupowa'} onChange={handleChange} variant=\"scrollable\">\r\n                    <Tab label=\"Faza grupowa\" value=\"Faza grupowa\" />\r\n                    <Tab label=\"1/8\" value=\"1/8\" />\r\n                    <Tab label=\"1/4\" value=\"1/4\" />\r\n                    <Tab label=\"1/2\" value=\"1/2\" />\r\n                    <Tab label=\"mecz o 3.\" value=\"mecz o 3.\" />\r\n                    <Tab label=\"Finał\" value=\"Finał\" />\r\n                </Tabs>\r\n                {/* </Box> */}\r\n                <TabPanel value={value} index={'Faza grupowa'}>\r\n                    <ButtonGroup variant=\"outlined\">\r\n                        <Button variant=\"contained\" size=\"small\">\r\n                            Grupa A\r\n                        </Button>\r\n                        <Button size=\"small\">Grupa B</Button>\r\n                        <Button size=\"small\">Grupa C</Button>\r\n                    </ButtonGroup>\r\n\r\n                    <ScoreTable\r\n                        className=\"my-2\"\r\n                        players={players}\r\n                        onAddPlayer={handleClickOpen}\r\n                        promotion={1}\r\n                        results={resultsValues}\r\n                    />\r\n\r\n                    <Box>\r\n                        {isEmpty(results) && (\r\n                            <Alert severity=\"info\" variant=\"standard\">\r\n                                {t('Wprowadź wszystkich graczy aby wygenerować terminarz')}\r\n                            </Alert>\r\n                        )}\r\n                        {/* {map(combinations(fields, 2), ([teamA, teamB], index) => ( */}\r\n                        {map(\r\n                            results,\r\n                            (result, index) =>\r\n                                result.playerA.id &&\r\n                                result.playerB.id && (\r\n                                    <>\r\n                                        <Grid container className=\"py-1 \" wrap=\"nowrap\">\r\n                                            <Grid\r\n                                                item\r\n                                                xs={5}\r\n                                                className=\"flex justify-end items-center\"\r\n                                            >\r\n                                                <Controller\r\n                                                    defaultValue={result.playerA.id}\r\n                                                    name={`results.${index}.playerA.id`}\r\n                                                    control={control}\r\n                                                    render={({\r\n                                                        field: { value },\r\n                                                        fieldState: { error },\r\n                                                    }) => (\r\n                                                        <span className=\"text-xs break-all\">\r\n                                                            {findPlayerNameById(value, data?.docs)}\r\n                                                        </span>\r\n                                                    )}\r\n                                                />\r\n                                            </Grid>\r\n                                            <Grid item>\r\n                                                <Box className=\"flex flex-nowrap\">\r\n                                                    <Controller\r\n                                                        defaultValue={result.playerA.score}\r\n                                                        name={`results.${index}.playerA.score`}\r\n                                                        control={control}\r\n                                                        render={({\r\n                                                            field,\r\n                                                            fieldState: { error },\r\n                                                        }) => (\r\n                                                            <TextField\r\n                                                                inputProps={{\r\n                                                                    className: 'p-1 text-center',\r\n                                                                }}\r\n                                                                {...field}\r\n                                                                className=\"mx-1 w-10\"\r\n                                                                size=\"small\"\r\n                                                                id=\"outlined-basic\"\r\n                                                                variant=\"outlined\"\r\n                                                            />\r\n                                                        )}\r\n                                                    />\r\n                                                    :\r\n                                                    <Controller\r\n                                                        defaultValue={result.playerB.score}\r\n                                                        name={`results.${index}.playerB.score`}\r\n                                                        control={control}\r\n                                                        render={({\r\n                                                            field,\r\n                                                            fieldState: { error },\r\n                                                        }) => (\r\n                                                            <TextField\r\n                                                                inputProps={{\r\n                                                                    className: 'p-1 text-center',\r\n                                                                }}\r\n                                                                {...field}\r\n                                                                className=\"mx-1 w-10\"\r\n                                                                size=\"small\"\r\n                                                                id=\"outlined-basic\"\r\n                                                                variant=\"outlined\"\r\n                                                            />\r\n                                                        )}\r\n                                                    />\r\n                                                </Box>\r\n                                            </Grid>\r\n                                            <Grid\r\n                                                item\r\n                                                className=\"flex justify-start items-center\"\r\n                                                xs={5}\r\n                                            >\r\n                                                <Controller\r\n                                                    defaultValue={result.playerB.id}\r\n                                                    name={`results.${index}.playerB.id`}\r\n                                                    control={control}\r\n                                                    render={({\r\n                                                        field: { value },\r\n                                                        fieldState: { error },\r\n                                                    }) => (\r\n                                                        <span className=\"text-xs break-all\">\r\n                                                            {findPlayerNameById(value, data?.docs)}\r\n                                                        </span>\r\n                                                    )}\r\n                                                />\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                        <Divider />\r\n                                    </>\r\n                                )\r\n                        )}\r\n                    </Box>\r\n                </TabPanel>\r\n                <TabPanel value={value} index={'1/8'}>\r\n                    Item Two\r\n                </TabPanel>\r\n                <TabPanel value={value} index={'1/4'}>\r\n                    Item Three\r\n                </TabPanel>\r\n                <TabPanel value={value} index={'1/2'}>\r\n                    Item Three\r\n                </TabPanel>\r\n                <TabPanel value={value} index={'mecz o 3.'}>\r\n                    Item Three\r\n                </TabPanel>\r\n                <TabPanel value={value} index={'Finał'}>\r\n                    Item Three\r\n                </TabPanel>\r\n            </Paper>\r\n        </>\r\n    );\r\n}\r\nexport default TournamentDetail;\r\n"],"names":["PlayerPicker","onClose","onPick","disabledPlayers","open","usePlayerListQuery","where","data","isLoading","t","useTranslation","Dialog","Loading","loading","DialogTitle","List","sx","pt","map","docs","docSnapshot","player","ListItem","disabled","includes","id","button","onClick","ListItemAvatar","Avatar","bgcolor","blue","color","Person","ListItemText","primary","firstName","lastName","React","getMatchStatus","score","matchStatus","getPkt","findPlayerNameById","find","ScoreTable","players","promotion","onAddPlayer","results","className","getAllResultsByPlayerId","useCallback","reduce","acc","playerA","playerB","concat","status","parseInt","plus","minus","diff","pkt","result","useMemo","isEmpty","formId","m","w","r","p","brPlus","brMinus","brDiff","resultList","playerResult","size","filter","orderBy","TableContainer","Table","TableHead","TableRow","align","width","TableBody","index","style","backgroundColor","green","red","component","scope","IconButton","AddCircle","TabPanel","props","children","value","other","role","hidden","Box","Typography","schema","useState","setOpen","modalIndex","setModalIndex","handleClickOpen","useForm","control","reset","handleSubmit","register","setValue","useFieldArray","name","keyName","fields","update","append","prepend","remove","swap","move","insert","resultsReplace","replace","useEffect","range","useUpdateEffect","field","combinations","teamA","teamB","console","log","resultsValues","useWatch","handleClose","handlePick","compact","Paper","Tabs","onChange","event","newValue","variant","Tab","label","ButtonGroup","Button","Alert","severity","Grid","container","wrap","item","xs","defaultValue","render","fieldState","error","TextField","inputProps","Divider"],"sourceRoot":""}