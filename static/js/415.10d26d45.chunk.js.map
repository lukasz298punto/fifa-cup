{"version":3,"file":"static/js/415.10d26d45.chunk.js","mappings":"qSAqHA,UA/FA,WACI,OAA4BA,EAAAA,EAAAA,MAApBC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,UACNC,GAAMC,EAAAA,EAAAA,KAAND,EAER,IADiBE,EAAAA,EAAAA,OACuBC,EAAAA,EAAAA,UAAmB,KAA3D,eAAOC,EAAP,KAAqBC,EAArB,KAEA,GAA6DC,EAAAA,EAAAA,MAArDC,EAAR,EAAQA,QAAuBC,GAA/B,EAAiBC,aAAjB,EAA+BD,OAAOE,EAAtC,EAAsCA,QAASC,EAA/C,EAA+CA,UAC/C,GAAgEC,EAAAA,EAAAA,IAAc,CAC1EL,QAAAA,EACAM,KAAM,UACNC,QAAS,WAHLC,EAAR,EAAQA,OAAQC,EAAhB,EAAgBA,OAAiBC,GAAjC,EAAwBC,QAAxB,EAAiCD,QAAjC,EAAyCE,KAAzC,EAA+CC,KAA/C,EAAqDC,QAMrDC,EAAAA,EAAAA,YAAU,WACNd,EAAM,CACFe,SAASC,EAAAA,EAAAA,KAAG,OAAC1B,QAAD,IAACA,OAAD,EAACA,EAAM2B,MAAM,SAACC,GACtB,MAAwCA,EAAY5B,OAA5C6B,EAAR,EAAQA,UAAWC,EAAnB,EAAmBA,SAEnB,MAAO,CACHD,UAAAA,EACAE,OAJJ,EAA6BA,OAKzBD,SAAAA,EACAE,GAAIJ,EAAYI,GAEvB,KAER,GAAE,CAAChC,EAAMU,KAEVc,EAAAA,EAAAA,YAAU,WACN,IAAMS,GAASC,EAAAA,EAAAA,MAAKjB,IAEhBgB,GAAU,OAACA,QAAD,IAACA,GAAAA,EAAQD,IACnBzB,GAAgB,SAAC4B,GAAD,OAAUC,EAAAA,EAAAA,QAAOD,EAAMF,EAAOI,OAA9B,GAEvB,GAAE,CAACpB,IAEJ,IAAMqB,GAAkBC,EAAAA,EAAAA,cAAY,SAACC,GACjCjC,GAAgB,SAAC4B,GAAD,OAAUC,EAAAA,EAAAA,QAAOD,EAAMK,EAAMH,OAA7B,GACnB,GAAE,IAEGI,GAAoBF,EAAAA,EAAAA,cACtB,SAACC,EAAuDE,GAChDF,EAAMR,GACNzB,GAAgB,SAAC4B,GAAD,OAAUQ,EAAAA,EAAAA,QAAOR,GAAM,SAACS,GAAD,OAASA,IAAQJ,EAAMH,MAAvB,GAAvB,IAEhBlB,EAAOuB,EAEd,GACD,CAACvB,IAGL,OACI,SAAC,IAAD,CAAS0B,QAAS5C,EAAlB,UACI,UAAC,IAAD,YACI,SAAC,IAAD,CACI6C,WAAW,SAAC,IAAD,IACXC,QAAS,WACL7B,EAAO,CAAEW,UAAW,GAAIC,SAAU,GAAIC,OAAQ,GACjD,EAJL,SAMK7B,EAAE,sBAEP,UAAC,IAAD,YACI,SAAC,IAAD,WACI,UAAC,IAAD,YACI,SAAC,IAAD,UAAYA,EAAE,gBACd,SAAC,IAAD,UAAYA,EAAE,eACd,SAAC,IAAD,CAAW8C,MAAO,GAAIC,MAAM,SAA5B,SACK/C,EAAE,cAEP,SAAC,IAAD,CAAW8C,MAAO,IAAKC,MAAM,SAA7B,SACK/C,EAAE,iBAIf,SAAC,IAAD,WACKwB,EAAAA,EAAAA,KAAIT,GAAQ,SAACuB,EAAOE,GAAR,OACT,SAAC,IAAD,CAEIQ,UAAUC,EAAAA,EAAAA,UAAS7C,EAAckC,EAAMH,QACvC5B,QAASA,EACT+B,MAAOA,EACPE,MAAOA,EACP9B,QAASA,EACTC,UAAWA,EACXuC,OAAQd,EACRe,SAAUZ,GARLD,EAAMH,OAFN,aAkBpC,C","sources":["pages/Statistics.tsx"],"sourcesContent":["import AddIcon from '@mui/icons-material/Add';\r\nimport { Button } from '@mui/material';\r\nimport Table from '@mui/material/Table';\r\nimport TableBody from '@mui/material/TableBody';\r\nimport TableHead from '@mui/material/TableHead';\r\nimport TableRow from '@mui/material/TableRow';\r\nimport { Loading } from 'components/Loading';\r\nimport { TableContainer } from 'components/TableContainer';\r\nimport { useAllPlayerListQuery } from 'hooks';\r\nimport { concat, filter, includes, last, map } from 'lodash';\r\nimport { EditedRow } from 'Modules/Player';\r\nimport { useCallback, useEffect, useState } from 'react';\r\nimport { FieldArrayWithId, useFieldArray, useForm } from 'react-hook-form';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { TableCell } from 'style/components';\r\nimport { Player } from 'types/global';\r\n\r\nexport type Players = {\r\n    players: Player[];\r\n};\r\n\r\nfunction Statistics() {\r\n    const { data, isLoading } = useAllPlayerListQuery();\r\n    const { t } = useTranslation();\r\n    const navigate = useNavigate();\r\n    const [editableRows, setEditableRows] = useState<string[]>([]);\r\n\r\n    const { control, handleSubmit, reset, trigger, getValues } = useForm<Players>();\r\n    const { fields, append, prepend, remove, swap, move, insert } = useFieldArray({\r\n        control,\r\n        name: 'players',\r\n        keyName: 'formId',\r\n    });\r\n\r\n    useEffect(() => {\r\n        reset({\r\n            players: map(data?.docs, (docSnapshot) => {\r\n                const { firstName, lastName, active } = docSnapshot.data();\r\n\r\n                return {\r\n                    firstName,\r\n                    active,\r\n                    lastName,\r\n                    id: docSnapshot.id,\r\n                };\r\n            }),\r\n        });\r\n    }, [data, reset]);\r\n\r\n    useEffect(() => {\r\n        const newRow = last(fields);\r\n\r\n        if (newRow && !newRow?.id) {\r\n            setEditableRows((prev) => concat(prev, newRow.formId));\r\n        }\r\n    }, [fields]);\r\n\r\n    const handleRowOnEdit = useCallback((field: FieldArrayWithId<Players, 'players', 'formId'>) => {\r\n        setEditableRows((prev) => concat(prev, field.formId));\r\n    }, []);\r\n\r\n    const handleRowOnCancel = useCallback(\r\n        (field: FieldArrayWithId<Players, 'players', 'formId'>, index: number) => {\r\n            if (field.id) {\r\n                setEditableRows((prev) => filter(prev, (val) => val !== field.formId));\r\n            } else {\r\n                remove(index);\r\n            }\r\n        },\r\n        [remove]\r\n    );\r\n\r\n    return (\r\n        <Loading loading={isLoading}>\r\n            <TableContainer>\r\n                <Button\r\n                    startIcon={<AddIcon />}\r\n                    onClick={() => {\r\n                        append({ firstName: '', lastName: '', active: 1 });\r\n                    }}\r\n                >\r\n                    {t('Dodaj zawodnika')}\r\n                </Button>\r\n                <Table>\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            <TableCell>{t('ImiÄ™')}</TableCell>\r\n                            <TableCell>{t('Nazwisko')}</TableCell>\r\n                            <TableCell width={50} align=\"center\">\r\n                                {t('Aktywny')}\r\n                            </TableCell>\r\n                            <TableCell width={100} align=\"center\">\r\n                                {t('Akcje')}\r\n                            </TableCell>\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {map(fields, (field, index) => (\r\n                            <EditedRow\r\n                                key={field.formId}\r\n                                isEdited={includes(editableRows, field.formId)}\r\n                                control={control}\r\n                                field={field}\r\n                                index={index}\r\n                                trigger={trigger}\r\n                                getValues={getValues}\r\n                                onEdit={handleRowOnEdit as any}\r\n                                onCancel={handleRowOnCancel as any}\r\n                            />\r\n                        ))}\r\n                    </TableBody>\r\n                </Table>\r\n            </TableContainer>\r\n        </Loading>\r\n    );\r\n}\r\nexport default Statistics;\r\n"],"names":["useAllPlayerListQuery","data","isLoading","t","useTranslation","useNavigate","useState","editableRows","setEditableRows","useForm","control","reset","handleSubmit","trigger","getValues","useFieldArray","name","keyName","fields","append","remove","prepend","swap","move","insert","useEffect","players","map","docs","docSnapshot","firstName","lastName","active","id","newRow","last","prev","concat","formId","handleRowOnEdit","useCallback","field","handleRowOnCancel","index","filter","val","loading","startIcon","onClick","width","align","isEdited","includes","onEdit","onCancel"],"sourceRoot":""}