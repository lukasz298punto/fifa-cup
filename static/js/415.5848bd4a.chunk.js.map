{"version":3,"file":"static/js/415.5848bd4a.chunk.js","mappings":"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","sources":["pages/Statistics.tsx"],"sourcesContent":["import AddIcon from '@mui/icons-material/Add';\r\nimport { Button, CircularProgress, Grid, Paper, Typography } from '@mui/material';\r\nimport Table from '@mui/material/Table';\r\nimport TableBody from '@mui/material/TableBody';\r\nimport TableHead from '@mui/material/TableHead';\r\nimport TableRow from '@mui/material/TableRow';\r\nimport { Box } from '@mui/system';\r\nimport { Loading } from 'components/Loading';\r\nimport { TableContainer } from 'components/TableContainer';\r\nimport { getAllPlayersResults } from 'helpers/calculate';\r\nimport { isCup } from 'helpers/global';\r\nimport { useAllCompletedTournamentListQuery, useAllPlayerListQuery } from 'hooks';\r\nimport {\r\n    concat,\r\n    filter,\r\n    find,\r\n    flatMap,\r\n    flatten,\r\n    includes,\r\n    last,\r\n    map,\r\n    orderBy,\r\n    reduce,\r\n} from 'lodash';\r\nimport { EditedRow } from 'Modules/Player';\r\nimport { useCallback, useEffect, useMemo, useState } from 'react';\r\nimport { FieldArrayWithId, useFieldArray, useForm } from 'react-hook-form';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { TableCell } from 'style/components';\r\nimport { Player } from 'types/global';\r\n\r\nexport type Players = {\r\n    players: Player[];\r\n};\r\n\r\nfunction Block({ name, value, player }: { name: string; value: number; player: string }) {\r\n    return (\r\n        <Grid item xs={12} md={4} lg={3}>\r\n            <Paper className=\"p-5\">\r\n                <Box className=\"flex items-center\">\r\n                    <Typography variant=\"h5\" className=\"font-bold\">\r\n                        {player}\r\n                    </Typography>\r\n                    <Typography color=\"primary\" className=\"font-bold ml-2\">\r\n                        ({value})\r\n                    </Typography>\r\n                </Box>\r\n                <Typography className=\"opacity-70 mt-1\">{name}</Typography>\r\n            </Paper>\r\n        </Grid>\r\n    );\r\n}\r\n\r\nfunction Statistics() {\r\n    const { t } = useTranslation();\r\n    const { data, isLoading } = useAllPlayerListQuery(true);\r\n    const { data: tournamentData, isLoading: tournamentDataIsLoading } =\r\n        useAllCompletedTournamentListQuery();\r\n\r\n    const allResults = useMemo(() => {\r\n        return flatten(\r\n            flatMap(tournamentData?.docs, (tour) => {\r\n                const data = tour.data();\r\n\r\n                return map(data.phases, (phase) => {\r\n                    if (isCup(phase)) {\r\n                        return phase.results;\r\n                    } else {\r\n                        return flatMap(phase.groups, (group) => group.results);\r\n                    }\r\n                });\r\n            })\r\n        );\r\n    }, [tournamentData]);\r\n\r\n    const getPlayerName = useCallback(\r\n        (id?: string) => {\r\n            if (!id) return '';\r\n\r\n            const player = find(data?.docs, { id: id })?.data();\r\n\r\n            return `${player?.firstName || ''} ${player?.lastName || ''}`;\r\n        },\r\n        [data]\r\n    );\r\n\r\n    const statistics = useMemo(() => {\r\n        const stats = getAllPlayersResults(map(data?.docs, 'id'), allResults);\r\n        const mostBrPlus = orderBy(stats, 'brPlus', 'desc');\r\n        const leastBrPlus = orderBy(stats, 'brPlus', 'asc');\r\n        const mostBrMinus = orderBy(stats, 'brMinus', 'desc');\r\n        const leastBrMinus = orderBy(stats, 'brMinus', 'asc');\r\n        const mostW = orderBy(stats, 'w', 'desc');\r\n        const mostP = orderBy(stats, 'p', 'desc');\r\n\r\n        console.log(stats, 'stats');\r\n\r\n        return {\r\n            mostBrPlus: {\r\n                player: getPlayerName(mostBrPlus[0]?.id),\r\n                value: mostBrPlus[0]?.brPlus,\r\n            },\r\n            leastBrPlus: {\r\n                player: getPlayerName(leastBrPlus[0]?.id),\r\n                value: leastBrPlus[0]?.brPlus,\r\n            },\r\n            mostBrMinus: {\r\n                player: getPlayerName(mostBrMinus[0]?.id),\r\n                value: mostBrMinus[0]?.brPlus,\r\n            },\r\n            leastBrMinus: {\r\n                player: getPlayerName(leastBrMinus[0]?.id),\r\n                value: leastBrMinus[0]?.brPlus,\r\n            },\r\n            mostW: {\r\n                player: getPlayerName(mostW[0]?.id),\r\n                value: mostW[0]?.brPlus,\r\n            },\r\n            mostP: {\r\n                player: getPlayerName(mostP[0]?.id),\r\n                value: mostP[0]?.brPlus,\r\n            },\r\n        };\r\n    }, [data, allResults, getPlayerName]);\r\n\r\n    console.log(statistics, 'statistics');\r\n\r\n    const statsList = useMemo(() => {\r\n        return [\r\n            {\r\n                name: t('Najwięcej zdobytych bramek'),\r\n                value: statistics.mostBrPlus.value,\r\n                player: statistics.mostBrPlus.player,\r\n            },\r\n            {\r\n                name: t('Najmniej zdobytych bramek'),\r\n                value: statistics.leastBrPlus.value,\r\n                player: statistics.leastBrPlus.player,\r\n            },\r\n            {\r\n                name: t('Najwięcej straconych bramek'),\r\n                value: statistics.mostBrMinus.value,\r\n                player: statistics.mostBrMinus.player,\r\n            },\r\n            {\r\n                name: t('Najmniej straconych bramek'),\r\n                value: statistics.leastBrMinus.value,\r\n                player: statistics.leastBrMinus.player,\r\n            },\r\n            {\r\n                name: t('Najwięcej wygranych meczów'),\r\n                value: statistics.mostW.value,\r\n                player: statistics.mostW.player,\r\n            },\r\n            {\r\n                name: t('Najwięcej przegranych meczów'),\r\n                value: statistics.mostP.value,\r\n                player: statistics.mostP.player,\r\n            },\r\n        ];\r\n    }, [statistics, t]);\r\n\r\n    if (isLoading || tournamentDataIsLoading) {\r\n        return <CircularProgress size={24} />;\r\n    }\r\n\r\n    return (\r\n        <Grid container spacing={2}>\r\n            {map(statsList, ({ name, value, player }) => (\r\n                <Block name={name} value={value} player={player} />\r\n            ))}\r\n        </Grid>\r\n    );\r\n}\r\nexport default Statistics;\r\n"],"names":["Block","name","value","player","item","xs","md","lg","className","variant","color","t","useTranslation","useAllPlayerListQuery","data","isLoading","useAllCompletedTournamentListQuery","tournamentData","tournamentDataIsLoading","allResults","useMemo","flatten","flatMap","docs","tour","map","phases","phase","isCup","results","groups","group","getPlayerName","useCallback","id","find","firstName","lastName","statistics","stats","getAllPlayersResults","mostBrPlus","orderBy","leastBrPlus","mostBrMinus","leastBrMinus","mostW","mostP","console","log","brPlus","statsList","size","container","spacing"],"sourceRoot":""}