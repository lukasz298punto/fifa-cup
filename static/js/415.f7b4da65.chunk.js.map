{"version":3,"file":"static/js/415.f7b4da65.chunk.js","mappings":"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","sources":["pages/Statistics.tsx"],"sourcesContent":["import AddIcon from '@mui/icons-material/Add';\r\nimport { Button, CircularProgress, Grid, Paper, Typography } from '@mui/material';\r\nimport Table from '@mui/material/Table';\r\nimport TableBody from '@mui/material/TableBody';\r\nimport TableHead from '@mui/material/TableHead';\r\nimport TableRow from '@mui/material/TableRow';\r\nimport { Box } from '@mui/system';\r\nimport { Loading } from 'components/Loading';\r\nimport { TableContainer } from 'components/TableContainer';\r\nimport { QueryDocumentSnapshot } from 'firebase/firestore';\r\nimport { getAllPlayersResults, getAllResults } from 'helpers/calculate';\r\nimport { isCup } from 'helpers/global';\r\nimport { useAllCompletedTournamentListQuery, useAllPlayerListQuery } from 'hooks';\r\nimport {\r\n    concat,\r\n    filter,\r\n    find,\r\n    flatMap,\r\n    flatten,\r\n    includes,\r\n    last,\r\n    map,\r\n    orderBy,\r\n    reduce,\r\n} from 'lodash';\r\nimport { EditedRow } from 'Modules/Player';\r\nimport { useCallback, useEffect, useMemo, useState } from 'react';\r\nimport { FieldArrayWithId, useFieldArray, useForm } from 'react-hook-form';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { TableCell } from 'style/components';\r\nimport { Player, TournamentSchema } from 'types/global';\r\n\r\nexport type Players = {\r\n    players: Player[];\r\n};\r\n\r\nfunction Block({ name, value, player }: { name: string; value: number; player: string }) {\r\n    return (\r\n        <Grid item xs={12} md={4} lg={3}>\r\n            <Paper className=\"p-5\">\r\n                <Box className=\"flex items-center\">\r\n                    <Typography variant=\"h5\" className=\"font-bold\">\r\n                        {player}\r\n                    </Typography>\r\n                    <Typography color=\"primary\" className=\"font-bold ml-2\">\r\n                        ({value})\r\n                    </Typography>\r\n                </Box>\r\n                <Typography className=\"opacity-70 mt-1\">{name}</Typography>\r\n            </Paper>\r\n        </Grid>\r\n    );\r\n}\r\n\r\nfunction Statistics() {\r\n    const { t } = useTranslation();\r\n    const { data, isLoading } = useAllPlayerListQuery(true);\r\n    const { data: tournamentData, isLoading: tournamentDataIsLoading } =\r\n        useAllCompletedTournamentListQuery();\r\n\r\n    const allResults = useMemo(() => {\r\n        return getAllResults(tournamentData?.docs);\r\n    }, [tournamentData]);\r\n\r\n    const getPlayerName = useCallback(\r\n        (id?: string) => {\r\n            if (!id) return '';\r\n\r\n            const player = find(data?.docs, { id: id })?.data();\r\n\r\n            return `${player?.firstName || ''} ${player?.lastName || ''}`;\r\n        },\r\n        [data]\r\n    );\r\n\r\n    const statistics = useMemo(() => {\r\n        const stats = getAllPlayersResults(map(data?.docs, 'id'), allResults);\r\n        const mostBrPlus = orderBy(stats, 'brPlus', 'desc');\r\n        const leastBrPlus = orderBy(stats, 'brPlus', 'asc');\r\n        const mostBrMinus = orderBy(stats, 'brMinus', 'desc');\r\n        const leastBrMinus = orderBy(stats, 'brMinus', 'asc');\r\n        const mostW = orderBy(stats, 'w', 'desc');\r\n        const mostP = orderBy(stats, 'p', 'desc');\r\n\r\n        return {\r\n            mostBrPlus: {\r\n                player: getPlayerName(mostBrPlus[0]?.id),\r\n                value: mostBrPlus[0]?.brPlus,\r\n            },\r\n            leastBrPlus: {\r\n                player: getPlayerName(leastBrPlus[0]?.id),\r\n                value: leastBrPlus[0]?.brPlus,\r\n            },\r\n            mostBrMinus: {\r\n                player: getPlayerName(mostBrMinus[0]?.id),\r\n                value: mostBrMinus[0]?.brMinus,\r\n            },\r\n            leastBrMinus: {\r\n                player: getPlayerName(leastBrMinus[0]?.id),\r\n                value: leastBrMinus[0]?.brMinus,\r\n            },\r\n            mostW: {\r\n                player: getPlayerName(mostW[0]?.id),\r\n                value: mostW[0]?.w,\r\n            },\r\n            mostP: {\r\n                player: getPlayerName(mostP[0]?.id),\r\n                value: mostP[0]?.p,\r\n            },\r\n        };\r\n    }, [data, allResults, getPlayerName]);\r\n\r\n    console.log(statistics, 'statistics');\r\n\r\n    const statsList = useMemo(() => {\r\n        return [\r\n            {\r\n                name: t('Najwięcej zdobytych bramek'),\r\n                value: statistics.mostBrPlus.value,\r\n                player: statistics.mostBrPlus.player,\r\n            },\r\n            {\r\n                name: t('Najmniej zdobytych bramek'),\r\n                value: statistics.leastBrPlus.value,\r\n                player: statistics.leastBrPlus.player,\r\n            },\r\n            {\r\n                name: t('Najwięcej straconych bramek'),\r\n                value: statistics.mostBrMinus.value,\r\n                player: statistics.mostBrMinus.player,\r\n            },\r\n            {\r\n                name: t('Najmniej straconych bramek'),\r\n                value: statistics.leastBrMinus.value,\r\n                player: statistics.leastBrMinus.player,\r\n            },\r\n            {\r\n                name: t('Najwięcej wygranych meczów'),\r\n                value: statistics.mostW.value,\r\n                player: statistics.mostW.player,\r\n            },\r\n            {\r\n                name: t('Najwięcej przegranych meczów'),\r\n                value: statistics.mostP.value,\r\n                player: statistics.mostP.player,\r\n            },\r\n        ];\r\n    }, [statistics, t]);\r\n\r\n    if (isLoading || tournamentDataIsLoading) {\r\n        return <CircularProgress size={24} />;\r\n    }\r\n\r\n    return (\r\n        <Grid container spacing={2}>\r\n            {map(statsList, ({ name, value, player }, index) => (\r\n                <Block name={name} value={value} player={player} key={index} />\r\n            ))}\r\n        </Grid>\r\n    );\r\n}\r\nexport default Statistics;\r\n"],"names":["Block","name","value","player","item","xs","md","lg","className","variant","color","t","useTranslation","useAllPlayerListQuery","data","isLoading","useAllCompletedTournamentListQuery","tournamentData","tournamentDataIsLoading","allResults","useMemo","getAllResults","docs","getPlayerName","useCallback","id","find","firstName","lastName","statistics","stats","getAllPlayersResults","map","mostBrPlus","orderBy","leastBrPlus","mostBrMinus","leastBrMinus","mostW","mostP","brPlus","brMinus","w","p","console","log","statsList","size","container","spacing","index"],"sourceRoot":""}