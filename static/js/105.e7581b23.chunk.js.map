{"version":3,"file":"static/js/105.e7581b23.chunk.js","mappings":"yTA4HA,UApGA,WACI,OAA6DA,EAAAA,EAAAA,MAArDC,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,aACXC,GADN,EAA+BC,MAA/B,EAAsCC,QAAtC,EAA+CC,WAC9BC,EAAAA,EAAAA,OACjB,GAA4BC,EAAAA,EAAAA,MAApBC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,UACNC,GAAMC,EAAAA,EAAAA,KAAND,EACR,GAA2DE,EAAAA,EAAAA,MAA3CC,EAAhB,EAAQC,OAAgCC,EAAxC,EAA6BN,UAyB7B,OAxBiBO,EAAAA,EAAAA,OAqBbd,GAASe,EAAAA,EAAAA,IAAaC,EAAAA,EAAAA,KAAAA,QAItB,SAAC,IAAD,CAAOC,UAAU,MAAjB,UACI,kBAAMC,SAAUnB,GAxBoB,SAAC,GAAwB,IAAtBoB,EAAqB,EAArBA,SAAUC,EAAW,EAAXA,KACrDT,EACI,CACIS,KAAAA,EACAC,QAAS,KACTC,UAAW,KACXH,SAAAA,GAEJ,CACII,UAAW,SAACC,GACRxB,GAASe,EAAAA,EAAAA,IAAaC,EAAAA,EAAAA,kBAAAA,KAA+B,CAAES,GAAID,EAAIC,KAClE,GAGZ,IAE+C,SAACnB,GAAD,OAAUoB,QAAQC,IAAIrB,EAAtB,IAQxC,WACI,UAAC,KAAD,CAAMsB,WAAS,EAACC,QAAS,EAAzB,WACI,SAAC,KAAD,CAAMC,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAvB,UACI,SAAC,IAAD,CAASC,QAAS1B,EAAlB,UACI,SAAC,KAAD,CACIa,KAAK,WACLtB,QAASA,EACToC,MAAO,CAAEC,SAAU3B,EAAE,0BACrB4B,OAAQ,gBAAGC,EAAH,EAAGA,MAAqBC,EAAxB,EAAUC,WAAcD,MAAxB,OACJ,UAAC,IAAD,CAAarB,UAAU,SAASqB,QAASA,EAAzC,WACI,SAAC,IAAD,UAAY9B,EAAE,qBACd,SAAC,KAAD,kBACQ6B,GADR,IAEIG,KAAK,QACLvB,UAAU,SACVqB,QAASA,EAJb,UAMKG,EAAAA,EAAAA,KAAG,OAACnC,QAAD,IAACA,OAAD,EAACA,EAAMoC,MAAM,SAACC,GACd,MAAyBA,EAAYrC,OAA7Bc,EAAR,EAAQA,KAAR,EAAcwB,OAEd,OACI,SAAC,IAAD,CACIC,MAAOF,EAAYlB,GADvB,SAIKL,GAFIuB,EAAYlB,GAK5B,OAEJa,IAAS,SAAC,IAAD,iBAAiBA,QAAjB,IAAiBA,OAAjB,EAAiBA,EAAOQ,YAtBlC,SA4BpB,SAAC,KAAD,CAAMhB,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAvB,UACI,SAAC,KAAD,CACIZ,KAAK,OACLtB,QAASA,EACToC,MAAO,CAAEC,SAAU3B,EAAE,0BACrB4B,OAAQ,gBAAGC,EAAH,EAAGA,MAAqBC,EAAxB,EAAUC,WAAcD,MAAxB,OACJ,UAAC,IAAD,CAAarB,UAAU,SAASqB,QAASA,EAAzC,WACI,SAAC,IAAD,UAAY9B,EAAE,qBACd,SAAC,KAAD,kBACQ6B,GADR,IAEIG,KAAK,QACLF,QAASA,EACTS,YAAiB,OAALT,QAAK,IAALA,OAAA,EAAAA,EAAOQ,UAAW,QAPlC,UAcpB,SAAC,IAAD,CAASb,QAASpB,EAAlB,UACI,SAAC,IAAD,CACII,UAAU,OACV+B,KAAK,SACLC,WAAW,SAAC,IAAD,IACXC,MAAM,UACNC,SAAU3C,EAAE,qBAMnC,C","sources":["pages/TournamentNew.tsx"],"sourcesContent":["import SaveIcon from '@mui/icons-material/Save';\r\nimport {\r\n    Button,\r\n    FormControl,\r\n    FormHelperText,\r\n    FormLabel,\r\n    Grid,\r\n    InputLabel,\r\n    MenuItem,\r\n    Paper,\r\n    Select,\r\n    TextField,\r\n} from '@mui/material';\r\nimport { Loading } from 'components/Loading';\r\nimport { firestore } from 'config/firebase';\r\nimport { doc, DocumentReference } from 'firebase/firestore';\r\nimport { useIsLogged, useSchemaListQuery, useStoreTournamentMutation } from 'hooks';\r\nimport { map, range } from 'lodash';\r\nimport { Controller, SubmitErrorHandler, SubmitHandler, useForm } from 'react-hook-form';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { generatePath, useNavigate, useParams } from 'react-router-dom';\r\nimport { routes } from 'routing/routes';\r\nimport { Schema, Tournament } from 'types/global';\r\n\r\nfunction TournamentNew() {\r\n    const { control, handleSubmit, reset, trigger, getValues } = useForm<Tournament>();\r\n    const navigate = useNavigate();\r\n    const { data, isLoading } = useSchemaListQuery();\r\n    const { t } = useTranslation();\r\n    const { mutate: storeMutate, isLoading: storeIsLoading } = useStoreTournamentMutation();\r\n    const isLogged = useIsLogged();\r\n\r\n    const onSubmit: SubmitHandler<Tournament> = ({ schemaId, name }) => {\r\n        storeMutate(\r\n            {\r\n                name,\r\n                endDate: null,\r\n                startDate: null,\r\n                schemaId,\r\n            },\r\n            {\r\n                onSuccess: (res) => {\r\n                    navigate(generatePath(routes.TOURNAMENT_DETAIL.path, { id: res.id }));\r\n                },\r\n            }\r\n        );\r\n    };\r\n\r\n    const onError: SubmitErrorHandler<Tournament> = (data) => console.log(data);\r\n\r\n    if (!isLogged) {\r\n        navigate(generatePath(routes.HOME.path));\r\n    }\r\n\r\n    return (\r\n        <Paper className=\"p-4\">\r\n            <form onSubmit={handleSubmit(onSubmit, onError)}>\r\n                <Grid container spacing={2}>\r\n                    <Grid item xs={12} md={6}>\r\n                        <Loading loading={isLoading}>\r\n                            <Controller\r\n                                name=\"schemaId\"\r\n                                control={control}\r\n                                rules={{ required: t('To pole jest wymagane') }}\r\n                                render={({ field, fieldState: { error } }) => (\r\n                                    <FormControl className=\"w-full\" error={!!error}>\r\n                                        <FormLabel>{t('Nazwa schematu')}</FormLabel>\r\n                                        <Select\r\n                                            {...field}\r\n                                            size=\"small\"\r\n                                            className=\"w-full\"\r\n                                            error={!!error}\r\n                                        >\r\n                                            {map(data?.docs, (docSnapshot) => {\r\n                                                const { name, phases } = docSnapshot.data();\r\n\r\n                                                return (\r\n                                                    <MenuItem\r\n                                                        value={docSnapshot.id}\r\n                                                        key={docSnapshot.id}\r\n                                                    >\r\n                                                        {name}\r\n                                                    </MenuItem>\r\n                                                );\r\n                                            })}\r\n                                        </Select>\r\n                                        {error && <FormHelperText>{error?.message}</FormHelperText>}\r\n                                    </FormControl>\r\n                                )}\r\n                            />\r\n                        </Loading>\r\n                    </Grid>\r\n                    <Grid item xs={12} md={6}>\r\n                        <Controller\r\n                            name=\"name\"\r\n                            control={control}\r\n                            rules={{ required: t('To pole jest wymagane') }}\r\n                            render={({ field, fieldState: { error } }) => (\r\n                                <FormControl className=\"w-full\" error={!!error}>\r\n                                    <FormLabel>{t('Nazwa turnieju')}</FormLabel>\r\n                                    <TextField\r\n                                        {...field}\r\n                                        size=\"small\"\r\n                                        error={!!error}\r\n                                        helperText={error?.message || ''}\r\n                                    />\r\n                                </FormControl>\r\n                            )}\r\n                        />\r\n                    </Grid>\r\n                </Grid>\r\n                <Loading loading={storeIsLoading}>\r\n                    <Button\r\n                        className=\"mt-1\"\r\n                        type=\"submit\"\r\n                        startIcon={<SaveIcon />}\r\n                        color=\"primary\"\r\n                        children={t('UtwÃ³rz')}\r\n                    />\r\n                </Loading>\r\n            </form>\r\n        </Paper>\r\n    );\r\n}\r\nexport default TournamentNew;\r\n"],"names":["useForm","control","handleSubmit","navigate","reset","trigger","getValues","useNavigate","useSchemaListQuery","data","isLoading","t","useTranslation","useStoreTournamentMutation","storeMutate","mutate","storeIsLoading","useIsLogged","generatePath","routes","className","onSubmit","schemaId","name","endDate","startDate","onSuccess","res","id","console","log","container","spacing","item","xs","md","loading","rules","required","render","field","error","fieldState","size","map","docs","docSnapshot","phases","value","message","helperText","type","startIcon","color","children"],"sourceRoot":""}