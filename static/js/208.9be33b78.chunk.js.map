{"version":3,"file":"static/js/208.9be33b78.chunk.js","mappings":"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","sources":["components/TabPanel/TabPanel.tsx","components/PlayerPicker/PlayerPicker.tsx","components/RoundAddButton/RoundAddButton.tsx","components/ScoreTable/ScoreTable.tsx","components/ScoreTable/ScoreRow.tsx","Modules/Tournament/Group.tsx","Modules/Tournament/GroupsPhase.tsx","Modules/Tournament/CupPhase.tsx","pages/TournamentDetail.tsx"],"sourcesContent":["import { Box } from '@mui/system';\r\nimport clsx from 'clsx';\r\n\r\ntype TabPanelProps = {\r\n    children?: React.ReactNode;\r\n    index: string;\r\n    value: string;\r\n    className?: string;\r\n};\r\n\r\nfunction TabPanel({ children, value, index, className }: TabPanelProps) {\r\n    return (\r\n        <div className={clsx(value !== index && 'hidden')}>\r\n            <Box className={className}>{children}</Box>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TabPanel;\r\n","import PersonIcon from '@mui/icons-material/Person';\r\nimport Avatar from '@mui/material/Avatar';\r\nimport { blue } from '@mui/material/colors';\r\nimport Dialog from '@mui/material/Dialog';\r\nimport DialogTitle from '@mui/material/DialogTitle';\r\nimport List from '@mui/material/List';\r\nimport ListItem from '@mui/material/ListItem';\r\nimport ListItemAvatar from '@mui/material/ListItemAvatar';\r\nimport ListItemText from '@mui/material/ListItemText';\r\nimport { Loading } from 'components/Loading';\r\nimport { useActivePlayerListQuery } from 'hooks';\r\nimport { includes, map } from 'lodash';\r\nimport 'lodash.combinations';\r\nimport React from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { Fn, Player } from 'types/global';\r\n\r\ntype Props = {\r\n    onClose: Fn;\r\n    onPick: (player: Player) => void;\r\n    disabledPlayers?: string[];\r\n    open: boolean;\r\n};\r\n\r\nfunction PlayerPicker({ onClose, onPick, disabledPlayers, open }: Props) {\r\n    const { data, isLoading } = useActivePlayerListQuery();\r\n    const { t } = useTranslation();\r\n\r\n    return (\r\n        <Dialog onClose={onClose} open={open}>\r\n            <Loading loading={isLoading}>\r\n                <DialogTitle>{t(`Wybierz zawodnika`)}</DialogTitle>\r\n                <List sx={{ pt: 0 }}>\r\n                    {map(data?.docs, (docSnapshot) => {\r\n                        const player = docSnapshot.data();\r\n\r\n                        return (\r\n                            <ListItem\r\n                                disabled={includes(disabledPlayers, docSnapshot.id)}\r\n                                button\r\n                                onClick={() => onPick({ ...player, id: docSnapshot.id })}\r\n                                key={docSnapshot.id}\r\n                            >\r\n                                <ListItemAvatar>\r\n                                    <Avatar sx={{ bgcolor: blue[100], color: blue[600] }}>\r\n                                        <PersonIcon />\r\n                                    </Avatar>\r\n                                </ListItemAvatar>\r\n                                <ListItemText primary={player.firstName + ' ' + player.lastName} />\r\n                            </ListItem>\r\n                        );\r\n                    })}\r\n                </List>\r\n            </Loading>\r\n        </Dialog>\r\n    );\r\n}\r\nexport default React.memo(PlayerPicker);\r\n","import { IconButton, IconButtonTypeMap } from '@mui/material';\r\nimport AddCircleIcon from '@mui/icons-material/AddCircle';\r\n\r\ntype Props = {\r\n    onAdd: () => void;\r\n} & IconButtonTypeMap['props'];\r\n\r\nfunction RoundAddButton({ onAdd, ...props }: Props) {\r\n    return (\r\n        <IconButton className=\"p-0\" size=\"small\" color=\"primary\" onClick={onAdd} {...props}>\r\n            <AddCircleIcon />\r\n        </IconButton>\r\n    );\r\n}\r\nexport default RoundAddButton;\r\n","import AddCircleIcon from '@mui/icons-material/AddCircle';\r\nimport { IconButton } from '@mui/material';\r\nimport { green, red } from '@mui/material/colors';\r\nimport Table from '@mui/material/Table';\r\nimport TableBody from '@mui/material/TableBody';\r\nimport TableHead from '@mui/material/TableHead';\r\nimport TableRow from '@mui/material/TableRow';\r\nimport { RoundAddButton } from 'components/RoundAddButton';\r\nimport { TableContainer } from 'components/TableContainer';\r\nimport { matchStatus } from 'constants/global';\r\nimport { QueryDocumentSnapshot } from 'firebase/firestore';\r\nimport { getAllPlayersResults } from 'helpers/calculate';\r\nimport { findPlayerNameById, getMatchStatus, getPkt } from 'helpers/global';\r\nimport { useActivePlayerListQuery } from 'hooks';\r\nimport { concat, filter, isEmpty, map, orderBy, reduce, size } from 'lodash';\r\nimport 'lodash.combinations';\r\nimport React, { useCallback, useMemo } from 'react';\r\nimport { FieldArrayWithId } from 'react-hook-form';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { TableCell } from 'style/components';\r\nimport { Player, Result, TournamentSchema } from 'types/global';\r\n\r\ntype ScoreResult = {\r\n    id: string;\r\n    formId?: string;\r\n    pkt: number;\r\n    m: number;\r\n    w: number;\r\n    r: number;\r\n    p: number;\r\n    brPlus: number;\r\n    brMinus: number;\r\n    brDiff: number;\r\n};\r\n\r\ntype Props = {\r\n    players: (Omit<Player, 'active'> & { formId: string })[];\r\n    results: Result[];\r\n    promotion: number;\r\n    onAddPlayer: (index: number) => void;\r\n    className?: string;\r\n    allActivePlayers: QueryDocumentSnapshot<Player>[] | undefined;\r\n};\r\n\r\nfunction ScoreTable({\r\n    players,\r\n    promotion,\r\n    onAddPlayer,\r\n    results,\r\n    className,\r\n    allActivePlayers,\r\n}: Props) {\r\n    const { t } = useTranslation();\r\n\r\n    const result = useMemo<ScoreResult[]>(() => {\r\n        if (isEmpty(results)) {\r\n            return map(players, (player) => ({\r\n                id: player.id || '',\r\n                formId: player.formId || '',\r\n                pkt: 0,\r\n                m: 0,\r\n                w: 0,\r\n                r: 0,\r\n                p: 0,\r\n                brPlus: 0,\r\n                brMinus: 0,\r\n                brDiff: 0,\r\n            }));\r\n        }\r\n\r\n        return getAllPlayersResults(map(players, 'id'), results);\r\n    }, [results, players]);\r\n\r\n    return (\r\n        <TableContainer className={className}>\r\n            <Table>\r\n                <TableHead>\r\n                    <TableRow>\r\n                        <TableCell align=\"left\">{t('Zawodnik')}</TableCell>\r\n                        <TableCell width={50} className=\"text-center\">\r\n                            {t('Pkt')}\r\n                        </TableCell>\r\n                        <TableCell width={50} className=\"text-center\">\r\n                            {t('M')}\r\n                        </TableCell>\r\n                        <TableCell width={50} className=\"text-center\">\r\n                            {t('W')}\r\n                        </TableCell>\r\n                        <TableCell width={50} className=\"text-center\">\r\n                            {t('R')}\r\n                        </TableCell>\r\n                        <TableCell width={50} className=\"text-center\">\r\n                            {t('P')}\r\n                        </TableCell>\r\n                        <TableCell width={50} className=\"text-center\">\r\n                            {t('Br+')}\r\n                        </TableCell>\r\n                        <TableCell width={50} className=\"text-center\">\r\n                            {t('Br-')}\r\n                        </TableCell>\r\n                        <TableCell width={50} className=\"text-center\">\r\n                            {t('+/-')}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {map(\r\n                        result,\r\n                        ({ id, formId, pkt, m, w, r, p, brPlus, brMinus, brDiff }, index) => (\r\n                            <TableRow\r\n                                key={formId}\r\n                                style={{\r\n                                    backgroundColor: promotion > index ? green[100] : red[100],\r\n                                }}\r\n                            >\r\n                                <TableCell component=\"th\" scope=\"row\">\r\n                                    {id ? (\r\n                                        findPlayerNameById(id, allActivePlayers)\r\n                                    ) : (\r\n                                        <RoundAddButton\r\n                                            onAdd={() => {\r\n                                                onAddPlayer(index);\r\n                                            }}\r\n                                        />\r\n                                    )}\r\n                                </TableCell>\r\n                                <TableCell\r\n                                    component=\"th\"\r\n                                    scope=\"row\"\r\n                                    className=\"text-center font-bold\"\r\n                                >\r\n                                    {pkt}\r\n                                </TableCell>\r\n                                <TableCell component=\"th\" scope=\"row\" className=\"text-center\">\r\n                                    {m}\r\n                                </TableCell>\r\n                                <TableCell component=\"th\" scope=\"row\" className=\"text-center\">\r\n                                    {w}\r\n                                </TableCell>\r\n                                <TableCell component=\"th\" scope=\"row\" className=\"text-center\">\r\n                                    {r}\r\n                                </TableCell>\r\n                                <TableCell component=\"th\" scope=\"row\" className=\"text-center\">\r\n                                    {p}\r\n                                </TableCell>\r\n                                <TableCell component=\"th\" scope=\"row\" className=\"text-center\">\r\n                                    {brPlus}\r\n                                </TableCell>\r\n                                <TableCell component=\"th\" scope=\"row\" className=\"text-center\">\r\n                                    {brMinus}\r\n                                </TableCell>\r\n                                <TableCell component=\"th\" scope=\"row\" className=\"text-center\">\r\n                                    {brDiff}\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        )\r\n                    )}\r\n                </TableBody>\r\n            </Table>\r\n        </TableContainer>\r\n    );\r\n}\r\nexport default React.memo(ScoreTable);\r\n","import {\r\n    Alert,\r\n    Button,\r\n    ButtonGroup,\r\n    CircularProgress,\r\n    Divider,\r\n    Grid,\r\n    Paper,\r\n    TextField,\r\n} from '@mui/material';\r\nimport Box from '@mui/material/Box';\r\nimport Tab from '@mui/material/Tab';\r\nimport Tabs from '@mui/material/Tabs';\r\nimport Typography from '@mui/material/Typography';\r\nimport { PlayerPicker } from 'components/PlayerPicker';\r\nimport { RoundAddButton } from 'components/RoundAddButton';\r\nimport { ScoreTable } from 'components/ScoreTable';\r\nimport { findPlayerNameById, parseInputNumber } from 'helpers/global';\r\nimport { useActivePlayerListQuery, useIsLogged } from 'hooks';\r\nimport { combinations, compact, filter, forEach, isEmpty, map, range } from 'lodash';\r\nimport 'lodash.combinations';\r\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\r\nimport {\r\n    Control,\r\n    Controller,\r\n    useFieldArray,\r\n    UseFieldArrayInsert,\r\n    useForm,\r\n    useWatch,\r\n} from 'react-hook-form';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { useUpdateEffect } from 'react-use';\r\nimport { Fn, Player, PlayerResult, Result, TournamentSchema, TypeOfWin } from 'types/global';\r\nimport { match, P } from 'ts-pattern';\r\n\r\ntype FormResult = Result & { formId: string };\r\n\r\ntype Props = {\r\n    control: Control<TournamentSchema, any>;\r\n    result: FormResult;\r\n    onAdd?: (result: Result) => void;\r\n    typeOfWin?: TypeOfWin;\r\n    disabledPlayers?: string[];\r\n    formName: any;\r\n};\r\n\r\nfunction ScoreRow({ control, result, onAdd, typeOfWin, disabledPlayers, formName }: Props) {\r\n    const { data, isLoading } = useActivePlayerListQuery();\r\n    const { t } = useTranslation();\r\n    const [teamAOpen, setTeamAOpen] = useState(false);\r\n    const [teamBOpen, setTeamBOpen] = useState(false);\r\n    const isLogged = useIsLogged();\r\n\r\n    const handleTeamAClose = useCallback(() => {\r\n        setTeamAOpen(false);\r\n    }, []);\r\n\r\n    const handleTeamBClose = useCallback(() => {\r\n        setTeamBOpen(false);\r\n    }, []);\r\n\r\n    const getFormName = (name: string): any => `${formName}.${name}`;\r\n\r\n    const teamA = useWatch({\r\n        control,\r\n        name: getFormName('playerA'),\r\n    }) as PlayerResult;\r\n\r\n    const teamB = useWatch({\r\n        control,\r\n        name: getFormName('playerB'),\r\n    }) as PlayerResult;\r\n\r\n    const getCountOfMatches = () =>\r\n        match(typeOfWin)\r\n            .with(TypeOfWin.TwoMatch, () => 1)\r\n            .otherwise(() => 0);\r\n\r\n    const addMatch = (teamAId?: string, teamBId?: string) => {\r\n        if (teamAId && teamBId && onAdd) {\r\n            forEach(range(0, getCountOfMatches()), () => {\r\n                onAdd({\r\n                    playerA: { id: teamAId, score: '' },\r\n                    playerB: { id: teamBId, score: '' },\r\n                });\r\n            });\r\n        }\r\n    };\r\n\r\n    const isDraw = onAdd && teamA?.score && teamB?.score && teamA?.score === teamB?.score;\r\n    const disabled = !teamA?.id || !teamB?.id;\r\n\r\n    return (\r\n        <>\r\n            <Grid container className=\"py-1 items-center\" wrap=\"nowrap\">\r\n                <Grid item xs={5} className=\"flex justify-end items-center\">\r\n                    <Controller\r\n                        defaultValue={result.playerA.id}\r\n                        name={getFormName('playerA.id')}\r\n                        control={control}\r\n                        render={({ field: { value, onChange }, fieldState: { error } }) => (\r\n                            <span className=\"text-xs break-all\">\r\n                                {!value && isLogged ? (\r\n                                    <>\r\n                                        <RoundAddButton\r\n                                            onAdd={() => {\r\n                                                setTeamAOpen(true);\r\n                                            }}\r\n                                        />\r\n                                        <PlayerPicker\r\n                                            onClose={handleTeamAClose}\r\n                                            open={teamAOpen}\r\n                                            onPick={(player) => {\r\n                                                onChange(player.id);\r\n                                                addMatch(player.id, teamB?.id);\r\n                                            }}\r\n                                            disabledPlayers={disabledPlayers}\r\n                                        />\r\n                                    </>\r\n                                ) : (\r\n                                    findPlayerNameById(value, data?.docs)\r\n                                )}\r\n                            </span>\r\n                        )}\r\n                    />\r\n                    {isDraw && (\r\n                        <Controller\r\n                            defaultValue={result.playerB.penaltyScore}\r\n                            name={getFormName('playerA.penaltyScore')}\r\n                            control={control}\r\n                            render={({ field: { onChange, value }, fieldState: { error } }) =>\r\n                                isLogged ? (\r\n                                    <TextField\r\n                                        disabled={disabled}\r\n                                        inputProps={{\r\n                                            className: 'p-1 text-center text-xs',\r\n                                        }}\r\n                                        value={value}\r\n                                        onChange={(e) => {\r\n                                            onChange(parseInputNumber(e.target.value));\r\n                                        }}\r\n                                        className=\"mx-1 w-10\"\r\n                                        size=\"small\"\r\n                                        type=\"number\"\r\n                                        variant=\"filled\"\r\n                                        placeholder={t('kr.')}\r\n                                    />\r\n                                ) : (\r\n                                    <span className=\"text-xs ml-1 mb-[7px] -mr-[3px]\">{value}</span>\r\n                                )\r\n                            }\r\n                        />\r\n                    )}\r\n                </Grid>\r\n                <Grid item>\r\n                    <Box className=\"flex flex-nowrap\">\r\n                        <Controller\r\n                            defaultValue={result.playerA.score}\r\n                            name={getFormName('playerA.score')}\r\n                            control={control}\r\n                            render={({ field: { onChange, value }, fieldState: { error } }) =>\r\n                                isLogged ? (\r\n                                    <TextField\r\n                                        disabled={disabled}\r\n                                        inputProps={{\r\n                                            className: 'p-1 text-center',\r\n                                        }}\r\n                                        value={value}\r\n                                        onChange={(e) => {\r\n                                            onChange(parseInputNumber(e.target.value));\r\n                                        }}\r\n                                        className=\"mx-1 w-10\"\r\n                                        size=\"small\"\r\n                                        type=\"number\"\r\n                                        variant=\"outlined\"\r\n                                    />\r\n                                ) : (\r\n                                    <span className=\"mx-1 font-bold\">{value}</span>\r\n                                )\r\n                            }\r\n                        />\r\n                        :\r\n                        <>\r\n                            <Controller\r\n                                defaultValue={result.playerB.score}\r\n                                name={getFormName('playerB.score')}\r\n                                control={control}\r\n                                render={({ field: { onChange, value }, fieldState: { error } }) =>\r\n                                    isLogged ? (\r\n                                        <TextField\r\n                                            disabled={disabled}\r\n                                            inputProps={{\r\n                                                className: 'p-1 text-center',\r\n                                            }}\r\n                                            value={value}\r\n                                            onChange={(e) => {\r\n                                                onChange(parseInputNumber(e.target.value));\r\n                                            }}\r\n                                            className=\"mx-1 w-10\"\r\n                                            size=\"small\"\r\n                                            type=\"number\"\r\n                                            variant=\"outlined\"\r\n                                        />\r\n                                    ) : (\r\n                                        <span className=\"mx-1 font-bold\">{value}</span>\r\n                                    )\r\n                                }\r\n                            />\r\n                        </>\r\n                    </Box>\r\n                </Grid>\r\n                <Grid item className=\"flex justify-start items-center\" xs={5}>\r\n                    {isDraw && (\r\n                        <Controller\r\n                            defaultValue={result.playerB.penaltyScore}\r\n                            name={getFormName('playerB.penaltyScore')}\r\n                            control={control}\r\n                            render={({ field: { onChange, value }, fieldState: { error } }) =>\r\n                                isLogged ? (\r\n                                    <TextField\r\n                                        disabled={disabled}\r\n                                        inputProps={{\r\n                                            className: 'p-1 text-center text-xs',\r\n                                        }}\r\n                                        value={value}\r\n                                        onChange={(e) => {\r\n                                            onChange(parseInputNumber(e.target.value));\r\n                                        }}\r\n                                        className=\"mx-1 w-10\"\r\n                                        size=\"small\"\r\n                                        type=\"number\"\r\n                                        variant=\"filled\"\r\n                                        placeholder={t('kr.')}\r\n                                    />\r\n                                ) : (\r\n                                    <span className=\"text-xs mr-1 mb-[7px] -ml-[3px]\">{value}</span>\r\n                                )\r\n                            }\r\n                        />\r\n                    )}\r\n                    <Controller\r\n                        defaultValue={result.playerB.id}\r\n                        name={getFormName('playerB.id')}\r\n                        control={control}\r\n                        render={({ field: { value, onChange }, fieldState: { error } }) => (\r\n                            <span className=\"text-xs break-all\">\r\n                                {!value && isLogged ? (\r\n                                    <>\r\n                                        <RoundAddButton\r\n                                            onAdd={() => {\r\n                                                setTeamBOpen(true);\r\n                                            }}\r\n                                        />\r\n                                        <PlayerPicker\r\n                                            onClose={handleTeamBClose}\r\n                                            open={teamBOpen}\r\n                                            onPick={(player) => {\r\n                                                onChange(player.id);\r\n                                                addMatch(teamA?.id, player.id);\r\n                                            }}\r\n                                            disabledPlayers={disabledPlayers}\r\n                                        />\r\n                                    </>\r\n                                ) : (\r\n                                    findPlayerNameById(value, data?.docs)\r\n                                )}\r\n                            </span>\r\n                        )}\r\n                    />\r\n                </Grid>\r\n            </Grid>\r\n            <Divider />\r\n        </>\r\n    );\r\n}\r\nexport default React.memo(ScoreRow);\r\n","import { Alert, CircularProgress } from '@mui/material';\r\nimport Box from '@mui/material/Box';\r\nimport { PlayerPicker } from 'components/PlayerPicker';\r\nimport { ScoreRow, ScoreTable } from 'components/ScoreTable';\r\nimport { useActivePlayerListQuery } from 'hooks';\r\nimport { combinations, compact, concat, filter, isEmpty, map, range, shuffle } from 'lodash';\r\nimport 'lodash.combinations';\r\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\r\nimport { Control, useFieldArray, useWatch } from 'react-hook-form';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { useUpdateEffect } from 'react-use';\r\nimport { Player, TournamentSchema, TypeOfWin } from 'types/global';\r\n\r\ntype Props = {\r\n    control: Control<TournamentSchema, any>;\r\n    typeOfWin: TypeOfWin;\r\n    promotion: any;\r\n    index: number;\r\n    phaseIndex: number;\r\n    playerCount: number;\r\n};\r\n\r\nfunction Group({ control, typeOfWin, promotion, index, phaseIndex, playerCount }: Props) {\r\n    const { t } = useTranslation();\r\n    const { data, isLoading } = useActivePlayerListQuery();\r\n\r\n    const {\r\n        fields: players,\r\n        replace,\r\n        update,\r\n    } = useFieldArray({\r\n        control,\r\n        name: `phases.${phaseIndex}.groups.${index}.players`,\r\n        keyName: 'formId',\r\n    });\r\n    const { fields: results, replace: resultsReplace } = useFieldArray({\r\n        control,\r\n        name: `phases.${phaseIndex}.groups.${index}.results`,\r\n        keyName: 'formId',\r\n    });\r\n\r\n    const [modalIndex, setModalIndex] = useState<number | null>(null);\r\n    const handleClickOpen = useCallback((index: number) => {\r\n        setModalIndex(index);\r\n        setOpen(true);\r\n    }, []);\r\n\r\n    const [open, setOpen] = useState(false);\r\n\r\n    const handleClose = useCallback(() => {\r\n        setModalIndex(null);\r\n        setOpen(false);\r\n    }, []);\r\n\r\n    const disabledPlayers = useMemo(() => {\r\n        return compact(map(players, 'id'));\r\n    }, [players]);\r\n\r\n    const resultsValues = useWatch({\r\n        control,\r\n        name: `phases.${phaseIndex}.groups.${index}.results`,\r\n    });\r\n\r\n    const handlePick = useCallback(\r\n        (player: Player) => {\r\n            update(modalIndex as number, {\r\n                id: player.id,\r\n                firstName: player.firstName,\r\n                lastName: player.lastName,\r\n            });\r\n            handleClose();\r\n        },\r\n        [handleClose, modalIndex, update]\r\n    );\r\n\r\n    useUpdateEffect(() => {\r\n        if (isEmpty(filter(players, (field) => !field.id)) && isEmpty(results)) {\r\n            const baseCombinations = shuffle(\r\n                map(combinations(players, 2), ([teamA, teamB]) => ({\r\n                    playerA: { id: teamA.id || '', score: '' },\r\n                    playerB: { id: teamB.id || '', score: '' },\r\n                }))\r\n            );\r\n\r\n            resultsReplace(\r\n                typeOfWin === TypeOfWin.TwoMatch\r\n                    ? concat(\r\n                          baseCombinations,\r\n                          map(baseCombinations, ({ playerA, playerB }) => ({\r\n                              playerA: playerB,\r\n                              playerB: playerA,\r\n                          }))\r\n                      )\r\n                    : baseCombinations\r\n            );\r\n        }\r\n    }, [players]);\r\n\r\n    if (isLoading) {\r\n        return <CircularProgress size={24} className=\"mt-2\" />;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <PlayerPicker\r\n                onClose={handleClose}\r\n                open={open}\r\n                onPick={handlePick}\r\n                disabledPlayers={disabledPlayers}\r\n            />\r\n            <ScoreTable\r\n                allActivePlayers={data?.docs}\r\n                className=\"my-2\"\r\n                players={players}\r\n                onAddPlayer={handleClickOpen}\r\n                promotion={promotion}\r\n                results={resultsValues}\r\n            />\r\n            <Box>\r\n                {isEmpty(results) && (\r\n                    <Alert severity=\"info\" variant=\"standard\">\r\n                        {t('Wprowadź wszystkich graczy aby wygenerować terminarz')}\r\n                    </Alert>\r\n                )}\r\n                {map(\r\n                    results,\r\n                    (result, i) =>\r\n                        result.playerA.id &&\r\n                        result.playerB.id && (\r\n                            <ScoreRow\r\n                                key={result.formId}\r\n                                control={control}\r\n                                result={result}\r\n                                formName={`phases.${phaseIndex}.groups.${index}.results.${i}`}\r\n                            />\r\n                        )\r\n                )}\r\n            </Box>\r\n        </>\r\n    );\r\n}\r\nexport default React.memo(Group);\r\n","import { Button, ButtonGroup } from '@mui/material';\r\nimport { TabPanel } from 'components/TabPanel';\r\nimport { groupSymbol } from 'constants/global';\r\nimport { map } from 'lodash';\r\nimport React, { useState } from 'react';\r\nimport { Schema, TournamentSchema } from 'types/global';\r\nimport { useTranslation } from 'react-i18next';\r\nimport Group from './Group';\r\nimport { Control } from 'react-hook-form';\r\n\r\ntype Props = {\r\n    schema: Schema;\r\n    index: number;\r\n    control: Control<TournamentSchema, any>;\r\n};\r\n\r\nfunction GroupsPhase({ schema, index, control }: Props) {\r\n    const [tab, setTab] = useState('0');\r\n\r\n    const { t } = useTranslation();\r\n\r\n    const handleClick = (index: string) => {\r\n        setTab(index);\r\n    };\r\n\r\n    const phase = schema.phases[index];\r\n\r\n    return (\r\n        <>\r\n            <ButtonGroup variant=\"outlined\">\r\n                {map(phase.groups, (group, index) => (\r\n                    <Button\r\n                        key={index}\r\n                        variant={tab === String(index) ? 'contained' : 'outlined'}\r\n                        size=\"small\"\r\n                        onClick={() => handleClick(String(index))}\r\n                    >\r\n                        {t('Grupa')} {groupSymbol[index]}\r\n                    </Button>\r\n                ))}\r\n            </ButtonGroup>\r\n            {map(phase.groups, (group, i) => (\r\n                <TabPanel key={i} value={tab} index={String(i)}>\r\n                    <Group\r\n                        playerCount={group.playerCount}\r\n                        control={control}\r\n                        typeOfWin={phase.typeOfWin}\r\n                        promotion={group.promotion}\r\n                        index={i}\r\n                        phaseIndex={index}\r\n                    />\r\n                </TabPanel>\r\n            ))}\r\n        </>\r\n    );\r\n}\r\nexport default React.memo(GroupsPhase);\r\n","import { ScoreRow } from 'components/ScoreTable';\r\nimport { compact, flatMap, map, range } from 'lodash';\r\nimport React, { useCallback, useEffect, useMemo } from 'react';\r\nimport { Control, useFieldArray, useWatch } from 'react-hook-form';\r\nimport { Result, Schema, TournamentSchema } from 'types/global';\r\n\r\ntype Props = {\r\n    schema: Schema;\r\n    index: number;\r\n    control: Control<TournamentSchema, any>;\r\n};\r\n\r\nfunction CupPhase({ schema, index, control }: Props) {\r\n    const {\r\n        fields: results,\r\n        append,\r\n        replace,\r\n    } = useFieldArray({\r\n        control,\r\n        name: `phases.${index}.results`,\r\n        keyName: 'formId',\r\n    });\r\n\r\n    const phase = schema.phases[index];\r\n\r\n    const resultsValues = useWatch({\r\n        control,\r\n        name: `phases.${index}.results`,\r\n    });\r\n\r\n    const handleOnAdd = useCallback(\r\n        (result: Result) => {\r\n            append(result);\r\n        },\r\n        [append]\r\n    );\r\n\r\n    const disabledPlayers = useMemo(() => {\r\n        return compact([\r\n            ...flatMap(resultsValues, 'playerA.id'),\r\n            ...flatMap(resultsValues, 'playerB.id'),\r\n        ]);\r\n    }, [resultsValues]);\r\n\r\n    return (\r\n        <>\r\n            {map(results, (result, i) => (\r\n                <ScoreRow\r\n                    formName={`phases.${index}.results.${i}`}\r\n                    disabledPlayers={disabledPlayers}\r\n                    typeOfWin={phase.typeOfWin}\r\n                    control={control}\r\n                    result={result}\r\n                    key={result.formId}\r\n                    onAdd={handleOnAdd}\r\n                />\r\n            ))}\r\n        </>\r\n    );\r\n}\r\nexport default React.memo(CupPhase);\r\n","import {\r\n    Alert,\r\n    Breadcrumbs,\r\n    Button,\r\n    ButtonGroup,\r\n    CircularProgress,\r\n    Divider,\r\n    Grid,\r\n    Paper,\r\n    TextField,\r\n} from '@mui/material';\r\nimport Box from '@mui/material/Box';\r\nimport Tab from '@mui/material/Tab';\r\nimport Tabs from '@mui/material/Tabs';\r\nimport Typography from '@mui/material/Typography';\r\nimport { PlayerPicker } from 'components/PlayerPicker';\r\nimport { RoundAddButton } from 'components/RoundAddButton';\r\nimport { ScoreRow, ScoreTable } from 'components/ScoreTable';\r\nimport { findPlayerNameById } from 'helpers/global';\r\nimport {\r\n    useActivePlayerListQuery,\r\n    useIsLogged,\r\n    useSchemaQuery,\r\n    useUpdateTournamentMutation,\r\n} from 'hooks';\r\nimport { combinations, compact, concat, filter, isEmpty, map, range } from 'lodash';\r\nimport 'lodash.combinations';\r\nimport { useCallback, useEffect, useMemo, useState } from 'react';\r\nimport {\r\n    Controller,\r\n    SubmitErrorHandler,\r\n    SubmitHandler,\r\n    useFieldArray,\r\n    useForm,\r\n    useWatch,\r\n} from 'react-hook-form';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { useDebounce, useUpdateEffect } from 'react-use';\r\nimport { GroupStageType, Player, TournamentSchema, TypeOfWin } from 'types/global';\r\nimport SaveIcon from '@mui/icons-material/Save';\r\nimport PlayCircleFilledWhiteIcon from '@mui/icons-material/PlayCircleFilledWhite';\r\nimport StopCircleIcon from '@mui/icons-material/StopCircle';\r\nimport { useTournamentQuery } from 'hooks';\r\nimport { useParams } from 'react-router-dom';\r\nimport { Loading } from 'components/Loading';\r\nimport { CupPhase, GroupsPhase } from 'Modules/Tournament';\r\nimport { TabPanel } from 'components/TabPanel';\r\nimport { format } from 'date-fns';\r\nimport { dateTimeFormat } from 'constants/global';\r\nimport { Title } from 'components/Title';\r\nimport EmojiEventsIcon from '@mui/icons-material/EmojiEvents';\r\n\r\nenum UpdateType {\r\n    End,\r\n    Update,\r\n    Start,\r\n}\r\n\r\nfunction TournamentDetail() {\r\n    const { id } = useParams<{ id: string }>();\r\n    const [tab, setTab] = useState('0');\r\n    const { mutate, isLoading } = useUpdateTournamentMutation(id as string);\r\n    const { t } = useTranslation();\r\n\r\n    console.log(id, 'id');\r\n\r\n    const isLogged = useIsLogged();\r\n\r\n    const { data: tournamentData, isLoading: tournamentIsLoading } = useTournamentQuery(\r\n        id as string\r\n    );\r\n\r\n    const tournament = useMemo(() => {\r\n        return tournamentData?.data();\r\n    }, [tournamentData]);\r\n\r\n    const { data: schemaData, isLoading: schemaIsLoading } = useSchemaQuery(tournament?.schemaId);\r\n\r\n    const schema = useMemo(() => {\r\n        return schemaData?.data();\r\n    }, [schemaData]);\r\n\r\n    const { control, handleSubmit, reset, register, setValue, watch } = useForm<TournamentSchema>();\r\n\r\n    const phases = useWatch({\r\n        control,\r\n        name: 'phases',\r\n    });\r\n\r\n    useEffect(() => {\r\n        if (tournament && schema) {\r\n            if (tournament?.phases) {\r\n                reset(tournament);\r\n            } else {\r\n                reset({\r\n                    ...tournament,\r\n                    phases: map(schema?.phases, (phase) => {\r\n                        if (phase.isGroupStage === GroupStageType.GroupStage) {\r\n                            return {\r\n                                groups: map(phase?.groups, (group) => ({\r\n                                    players: map(range(0, group.playerCount), () => ({\r\n                                        id: '',\r\n                                        firstName: '',\r\n                                        lastName: '',\r\n                                    })),\r\n                                    results: [],\r\n                                })),\r\n                            };\r\n                        } else {\r\n                            return {\r\n                                results: map(range(0, Number(phase.pairCount) || 0), () => ({\r\n                                    playerA: { id: '', score: '' },\r\n                                    playerB: { id: '', score: '' },\r\n                                })),\r\n                            };\r\n                        }\r\n                    }),\r\n                });\r\n            }\r\n        }\r\n    }, [reset, tournament, schema]);\r\n\r\n    const handleChange = (_: React.SyntheticEvent, newValue: string) => {\r\n        setTab(newValue);\r\n    };\r\n\r\n    const handleOnSubmit = useCallback(\r\n        (type: UpdateType = UpdateType.Update) =>\r\n            () => {\r\n                handleSubmit(\r\n                    async (data) => {\r\n                        mutate({\r\n                            ...data,\r\n                            startDate:\r\n                                type === UpdateType.Start\r\n                                    ? format(new Date(), dateTimeFormat)\r\n                                    : data.startDate,\r\n                            endDate:\r\n                                type === UpdateType.End\r\n                                    ? format(new Date(), dateTimeFormat)\r\n                                    : data.endDate,\r\n                        });\r\n                        console.log(data, 'data');\r\n                    },\r\n                    (data) => {\r\n                        console.log(data);\r\n                    }\r\n                )();\r\n            },\r\n        [handleSubmit, mutate]\r\n    );\r\n\r\n    useDebounce(\r\n        () => {\r\n            if (tournament && schema && isLogged) {\r\n                console.log('odpalamy');\r\n                handleOnSubmit()();\r\n            }\r\n        },\r\n        4000,\r\n        [phases]\r\n    );\r\n\r\n    if (tournamentIsLoading || schemaIsLoading) {\r\n        return <CircularProgress size={24} />;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Box>\r\n                <EmojiEventsIcon className=\"text-xs mr-1\" />\r\n                <span className=\"text-xs\">{tournament?.name}</span>\r\n            </Box>\r\n            <Paper>\r\n                <Tabs value={tab} onChange={handleChange} variant=\"scrollable\">\r\n                    {map(schema?.phases, (value, index) => (\r\n                        <Tab label={value.name} value={String(index)} key={index} />\r\n                    ))}\r\n                </Tabs>\r\n                {schema &&\r\n                    map(schema?.phases, (value, index) => (\r\n                        <TabPanel value={tab} index={String(index)} className=\"p-3\" key={index}>\r\n                            {value.isGroupStage === GroupStageType.Cup ? (\r\n                                <CupPhase schema={schema} index={index} control={control} />\r\n                            ) : (\r\n                                <GroupsPhase schema={schema} index={index} control={control} />\r\n                            )}\r\n                        </TabPanel>\r\n                    ))}\r\n                <Box className=\"px-6 pb-4\">\r\n                    {isLogged && tournament?.startDate && !tournament?.endDate && (\r\n                        <Button\r\n                            onClick={handleOnSubmit(UpdateType.End)}\r\n                            startIcon={<StopCircleIcon />}\r\n                            color=\"primary\"\r\n                            children={t('Zakończ turniej')}\r\n                        />\r\n                    )}\r\n                    {isLogged && !tournament?.startDate && !tournament?.endDate && (\r\n                        <Button\r\n                            onClick={handleOnSubmit(UpdateType.Start)}\r\n                            startIcon={<PlayCircleFilledWhiteIcon />}\r\n                            color=\"primary\"\r\n                            children={t('Wystartuj turniej')}\r\n                        />\r\n                    )}\r\n                </Box>\r\n            </Paper>\r\n        </>\r\n    );\r\n}\r\nexport default TournamentDetail;\r\n"],"names":["children","value","index","className","clsx","PlayerPicker","onClose","onPick","disabledPlayers","open","useActivePlayerListQuery","data","isLoading","t","useTranslation","Dialog","Loading","loading","DialogTitle","List","sx","pt","map","docs","docSnapshot","player","ListItem","disabled","includes","id","button","onClick","ListItemAvatar","Avatar","bgcolor","blue","color","Person","ListItemText","primary","firstName","lastName","React","onAdd","props","IconButton","size","AddCircle","ScoreTable","players","promotion","onAddPlayer","results","allActivePlayers","result","useMemo","isEmpty","formId","pkt","m","w","r","p","brPlus","brMinus","brDiff","getAllPlayersResults","TableContainer","Table","TableHead","TableRow","align","width","TableBody","style","backgroundColor","green","red","component","scope","findPlayerNameById","ScoreRow","control","typeOfWin","formName","useState","teamAOpen","setTeamAOpen","teamBOpen","setTeamBOpen","isLogged","useIsLogged","handleTeamAClose","useCallback","handleTeamBClose","getFormName","name","teamA","useWatch","teamB","addMatch","teamAId","teamBId","forEach","range","match","with","TypeOfWin","otherwise","playerA","score","playerB","isDraw","Grid","container","wrap","item","xs","defaultValue","render","field","onChange","fieldState","error","penaltyScore","TextField","inputProps","e","parseInputNumber","target","type","variant","placeholder","Box","Divider","Group","phaseIndex","playerCount","useFieldArray","keyName","fields","update","replace","resultsReplace","modalIndex","setModalIndex","handleClickOpen","setOpen","handleClose","compact","resultsValues","handlePick","useUpdateEffect","filter","baseCombinations","shuffle","combinations","concat","CircularProgress","Alert","severity","i","GroupsPhase","schema","tab","setTab","phase","phases","ButtonGroup","groups","group","Button","String","handleClick","groupSymbol","CupPhase","append","handleOnAdd","flatMap","UpdateType","useParams","useUpdateTournamentMutation","mutate","console","log","useTournamentQuery","tournamentData","tournamentIsLoading","tournament","useSchemaQuery","schemaId","schemaData","schemaIsLoading","useForm","handleSubmit","reset","register","setValue","watch","useEffect","isGroupStage","GroupStageType","Number","pairCount","handleOnSubmit","Update","startDate","Start","format","Date","dateTimeFormat","endDate","End","useDebounce","EmojiEvents","Paper","Tabs","_","newValue","Tab","label","startIcon","StopCircle","PlayCircleFilledWhite"],"sourceRoot":""}