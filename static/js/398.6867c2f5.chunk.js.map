{"version":3,"file":"static/js/398.6867c2f5.chunk.js","mappings":"kaAwBA,SAASA,EAAT,GAA0E,IAAlDC,EAAiD,EAAjDA,QAASC,EAAwC,EAAxCA,OAAQC,EAAgC,EAAhCA,gBAAiBC,EAAe,EAAfA,KACtD,GAA4BC,EAAAA,EAAAA,MAApBC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,UACNC,GAAMC,EAAAA,EAAAA,KAAND,EAER,OACI,SAACE,EAAA,EAAD,CAAQT,QAASA,EAASG,KAAMA,EAAhC,UACI,UAACO,EAAA,EAAD,CAASC,QAASL,EAAlB,WACI,SAACM,EAAA,EAAD,UAAcL,EAAE,wBAChB,SAACM,EAAA,EAAD,CAAMC,GAAI,CAAEC,GAAI,GAAhB,UACKC,EAAAA,EAAAA,KAAG,OAACX,QAAD,IAACA,OAAD,EAACA,EAAMY,MAAM,SAACC,GACd,IAAMC,EAASD,EAAYb,OAE3B,OACI,UAACe,EAAA,GAAD,CACIC,UAAUC,EAAAA,EAAAA,UAASpB,EAAiBgB,EAAYK,IAChDC,QAAM,EACNC,QAAS,kBAAMxB,GAAO,kBAAKkB,GAAN,IAAcI,GAAIL,EAAYK,KAA1C,EAHb,WAMI,SAACG,EAAA,EAAD,WACI,SAACC,EAAA,EAAD,CAAQb,GAAI,CAAEc,QAASC,EAAAA,EAAAA,KAAWC,MAAOD,EAAAA,EAAAA,MAAzC,UACI,SAACE,EAAA,EAAD,SAGR,SAACC,EAAA,EAAD,CAAcC,QAASd,EAAOe,UAAY,IAAMf,EAAOgB,aAPlDjB,EAAYK,GAU5B,UAKpB,CACD,MAAea,EAAAA,KAAWrC,G,2FC3C1B,MAPA,YAAqD,IAA3BsC,EAA0B,EAA1BA,MAAUC,GAAgB,YAChD,OACI,SAACC,EAAA,GAAD,gBAAYC,UAAU,MAAMC,KAAK,QAAQX,MAAM,UAAUL,QAASY,GAAWC,GAA7E,cACI,SAACI,EAAA,EAAD,MAGX,E,oBCRYC,EAAiB,SAACC,GAC3B,OAAc,IAAVA,EAAoBC,EAAAA,GAAAA,EAEjBD,EAAQ,EAAIC,EAAAA,GAAAA,EAAgBA,EAAAA,GAAAA,CACtC,EAEYC,EAAS,SAACF,GACnB,OAAc,IAAVA,EAAoB,EAEjBA,EAAQ,EAAI,EAAI,CAC1B,EAEYG,EAAqB,SAC9BxB,EACAN,GACE,IAAD,EACD,GAAKM,EAAL,CAEA,IAAMJ,EAAM,WAAG6B,EAAAA,EAAAA,MAAK/B,EAAM,CAAEM,GAAIA,WAApB,aAAG,EAAwBlB,OAEvC,OAAa,OAANc,QAAM,IAANA,OAAA,EAAAA,EAAQe,WAAY,KAApB,OAA0Bf,QAA1B,IAA0BA,OAA1B,EAA0BA,EAAQgB,SAJ1B,CAKlB,E,UCuBD,SAASc,EAAT,GAAqF,IAA/DC,EAA8D,EAA9DA,QAASC,EAAqD,EAArDA,UAAWC,EAA0C,EAA1CA,YAAaC,EAA6B,EAA7BA,QAASb,EAAoB,EAApBA,UACpDjC,GAAMC,EAAAA,EAAAA,KAAND,EACAF,GAASD,EAAAA,EAAAA,MAATC,KAEFiD,GAA0BC,EAAAA,EAAAA,cAC5B,SAAChC,GAAD,OACIiC,EAAAA,EAAAA,QACIH,GACA,SAACI,EAAD,GAA+C,IAAxBC,EAAuB,EAAvBA,QAASC,EAAc,EAAdA,QAC5B,GAAID,EAAQd,OAASe,EAAQf,MAAO,CAChC,GAAIc,EAAQnC,KAAOA,EACf,OAAOqC,EAAAA,EAAAA,QAAOH,EAAK,CACfI,OAAQlB,EACJmB,SAASJ,EAAQd,OAASkB,SAASH,EAAQf,QAE/CmB,KAAMD,SAASJ,EAAQd,OACvBoB,MAAOF,SAASH,EAAQf,OACxBqB,KAAMH,SAASJ,EAAQd,OAASkB,SAASH,EAAQf,OACjDsB,IAAKpB,EAAOgB,SAASJ,EAAQd,OAASkB,SAASH,EAAQf,UAI/D,GAAIe,EAAQpC,KAAOA,EACf,OAAOqC,EAAAA,EAAAA,QAAOH,EAAK,CACfI,OAAQlB,EACJmB,SAASH,EAAQf,OAASkB,SAASJ,EAAQd,QAE/CmB,KAAMD,SAASH,EAAQf,OACvBoB,MAAOF,SAASJ,EAAQd,OACxBqB,KAAMH,SAASH,EAAQf,OAASkB,SAASJ,EAAQd,OACjDsB,IAAKpB,EAAOgB,SAASH,EAAQf,OAASkB,SAASJ,EAAQd,SAGlE,CAED,OAAOa,CACV,GACD,GAhCR,GAkCA,CAACJ,IAGCc,GAASC,EAAAA,EAAAA,UAAuB,WAClC,IAAIC,EAAAA,EAAAA,SAAQhB,GACR,OAAOrC,EAAAA,EAAAA,KAAIkC,GAAS,SAAC/B,GAAD,MAAa,CAC7BmD,OAAQnD,EAAOmD,OACf/C,GAAIJ,EAAOI,IAAM,GACjB2C,IAAK,EACLK,EAAG,EACHC,EAAG,EACHC,EAAG,EACHC,EAAG,EACHC,OAAQ,EACRC,QAAS,EACTC,OAAQ,EAVQ,IAcxB,IAAMC,GAAa9D,EAAAA,EAAAA,KAAIkC,GAAS,SAAC/B,GAC7B,IAAM4D,EAAezB,EAAwBnC,EAAOI,IAEpD,MAAO,CACH+C,OAAQnD,EAAOmD,OACf/C,GAAIJ,EAAOI,IAAM,GACjB2C,KAAKV,EAAAA,EAAAA,QAAOuB,GAAc,SAACtB,EAAD,UAAkBA,EAAlB,EAAQS,GAAR,GAA6B,GACvDK,GAAG9B,EAAAA,EAAAA,MAAKsC,GACRP,GAAG/B,EAAAA,EAAAA,OAAKuC,EAAAA,EAAAA,QAAOD,EAAc,CAAElB,OAAQhB,EAAAA,GAAAA,KACvC4B,GAAGhC,EAAAA,EAAAA,OAAKuC,EAAAA,EAAAA,QAAOD,EAAc,CAAElB,OAAQhB,EAAAA,GAAAA,KACvC6B,GAAGjC,EAAAA,EAAAA,OAAKuC,EAAAA,EAAAA,QAAOD,EAAc,CAAElB,OAAQhB,EAAAA,GAAAA,KACvC8B,QAAQnB,EAAAA,EAAAA,QAAOuB,GAAc,SAACtB,EAAD,UAAmBA,EAAnB,EAAQM,IAAR,GAA+B,GAC5Da,SAASpB,EAAAA,EAAAA,QAAOuB,GAAc,SAACtB,EAAD,UAAoBA,EAApB,EAAQO,KAAR,GAAiC,GAC/Da,QAAQrB,EAAAA,EAAAA,QAAOuB,GAAc,SAACtB,EAAD,UAAmBA,EAAnB,EAAQQ,IAAR,GAA+B,GAEnE,IAED,OAAOgB,EAAAA,EAAAA,SAAQH,EAAY,CAAC,MAAO,SAAU,UAAW,CAAC,OAAQ,OAAQ,QAC5E,GAAE,CAACzB,EAASH,EAASI,IAItB,OAFA4B,QAAQC,IAAIhB,EAAQ,WAGhB,SAACiB,EAAA,EAAD,CAAgB5C,UAAWA,EAA3B,UACI,UAAC6C,EAAA,EAAD,YACI,SAACC,EAAA,EAAD,WACI,UAACC,EAAA,EAAD,YACI,SAAC,IAAD,CAAWC,MAAM,OAAjB,SAAyBjF,EAAE,eAC3B,SAAC,IAAD,CAAWkF,MAAO,GAAIjD,UAAU,cAAhC,SACKjC,EAAE,UAEP,SAAC,IAAD,CAAWkF,MAAO,GAAIjD,UAAU,cAAhC,SACKjC,EAAE,QAEP,SAAC,IAAD,CAAWkF,MAAO,GAAIjD,UAAU,cAAhC,SACKjC,EAAE,QAEP,SAAC,IAAD,CAAWkF,MAAO,GAAIjD,UAAU,cAAhC,SACKjC,EAAE,QAEP,SAAC,IAAD,CAAWkF,MAAO,GAAIjD,UAAU,cAAhC,SACKjC,EAAE,QAEP,SAAC,IAAD,CAAWkF,MAAO,GAAIjD,UAAU,cAAhC,SACKjC,EAAE,UAEP,SAAC,IAAD,CAAWkF,MAAO,GAAIjD,UAAU,cAAhC,SACKjC,EAAE,UAEP,SAAC,IAAD,CAAWkF,MAAO,GAAIjD,UAAU,cAAhC,SACKjC,EAAE,eAIf,SAACmF,EAAA,EAAD,WACK1E,EAAAA,EAAAA,KACGmD,GACA,WAA2DwB,GAA3D,IAAGrB,EAAH,EAAGA,OAAQ/C,EAAX,EAAWA,GAAI2C,EAAf,EAAeA,IAAKK,EAApB,EAAoBA,EAAGC,EAAvB,EAAuBA,EAAGC,EAA1B,EAA0BA,EAAGC,EAA7B,EAA6BA,EAAGC,EAAhC,EAAgCA,OAAQC,EAAxC,EAAwCA,QAASC,EAAjD,EAAiDA,OAAjD,OACI,UAACU,EAAA,EAAD,CAEIK,MAAO,CACHC,gBAAiB1C,EAAYwC,EAAQG,EAAAA,EAAAA,KAAaC,EAAAA,EAAAA,MAH1D,WAMI,SAAC,IAAD,CAAWC,UAAU,KAAKC,MAAM,MAAhC,SACK1E,EACGwB,EAAmBxB,EAAD,OAAKlB,QAAL,IAAKA,OAAL,EAAKA,EAAMY,OAE7B,SAAC,EAAD,CACIoB,MAAO,WACHe,EAAYuC,EACf,OAIb,SAAC,IAAD,CACIK,UAAU,KACVC,MAAM,MACNzD,UAAU,wBAHd,SAKK0B,KAEL,SAAC,IAAD,CAAW8B,UAAU,KAAKC,MAAM,MAAMzD,UAAU,cAAhD,SACK+B,KAEL,SAAC,IAAD,CAAWyB,UAAU,KAAKC,MAAM,MAAMzD,UAAU,cAAhD,SACKgC,KAEL,SAAC,IAAD,CAAWwB,UAAU,KAAKC,MAAM,MAAMzD,UAAU,cAAhD,SACKiC,KAEL,SAAC,IAAD,CAAWuB,UAAU,KAAKC,MAAM,MAAMzD,UAAU,cAAhD,SACKkC,KAEL,SAAC,IAAD,CAAWsB,UAAU,KAAKC,MAAM,MAAMzD,UAAU,cAAhD,SACKmC,KAEL,SAAC,IAAD,CAAWqB,UAAU,KAAKC,MAAM,MAAMzD,UAAU,cAAhD,SACKoC,KAEL,SAAC,IAAD,CAAWoB,UAAU,KAAKC,MAAM,MAAMzD,UAAU,cAAhD,SACKqC,MA1CAP,EAFb,UAqDvB,CACD,MAAelC,EAAAA,KAAWa,G,6DCrL1B,SAASiD,GAAT,GAAyF,IAArEC,EAAoE,EAApEA,QAASR,EAA2D,EAA3DA,MAAOxB,EAAoD,EAApDA,OAAQ9B,EAA4C,EAA5CA,MAAO+D,EAAqC,EAArCA,UAAWlG,EAA0B,EAA1BA,gBAClDG,GAASD,EAAAA,EAAAA,MAATC,KACAE,GAAMC,EAAAA,EAAAA,KAAND,EACR,GAAkC8F,EAAAA,EAAAA,WAAS,GAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KAEMC,GAAmBnD,EAAAA,EAAAA,cAAY,WACjCgD,GAAa,EAChB,GAAE,IAEGI,GAAmBpD,EAAAA,EAAAA,cAAY,WACjCkD,GAAa,EAChB,GAAE,IAEGG,GAAQC,EAAAA,EAAAA,IAAS,CACnBV,QAAAA,EACAW,KAAK,WAAD,OAAanB,EAAb,cAGFoB,GAAQF,EAAAA,EAAAA,IAAS,CACnBV,QAAAA,EACAW,KAAK,WAAD,OAAanB,EAAb,cAUFqB,EAAW,SAACC,EAAkBC,GAC5BD,GAAWC,GAAW7E,IACtB8E,EAAAA,EAAAA,UAAQC,EAAAA,EAAAA,OAAM,GARlBC,EAAAA,GAAAA,IAAMjB,GACDkB,KAAKC,EAAAA,EAAAA,UAAoB,kBAAM,CAAN,IACzBD,KAAKC,EAAAA,EAAAA,OAAiB,kBAAM,CAAN,IACtBD,KAAKC,EAAAA,EAAAA,OAAiB,kBAAM,CAAN,IACtBC,WAAU,kBAAM,CAAN,MAI4B,WACnCnF,EAAM,CACFqB,QAAS,CAAEnC,GAAI0F,EAASrE,MAAO,IAC/Be,QAAS,CAAEpC,GAAI2F,EAAStE,MAAO,KAEtC,GAER,EAEK6E,EAASpF,IAAK,OAAIuE,QAAJ,IAAIA,OAAJ,EAAIA,EAAOhE,SAAhB,OAAyBmE,QAAzB,IAAyBA,OAAzB,EAAyBA,EAAOnE,SAAc,OAALgE,QAAK,IAALA,OAAA,EAAAA,EAAOhE,UAAP,OAAiBmE,QAAjB,IAAiBA,OAAjB,EAAiBA,EAAOnE,OAC1EvB,IAAW,OAACuF,QAAD,IAACA,GAAAA,EAAOrF,OAAM,OAACwF,QAAD,IAACA,GAAAA,EAAOxF,IAEvC,OACI,iCACI,UAACmG,EAAA,GAAD,CAAMC,WAAS,EAACnF,UAAU,oBAAoBoF,KAAK,SAAnD,WACI,UAACF,EAAA,GAAD,CAAMG,MAAI,EAACC,GAAI,EAAGtF,UAAU,gCAA5B,WACI,SAAC,KAAD,CACIuF,aAAc5D,EAAOT,QAAQnC,GAC7BuF,KAAI,kBAAanB,EAAb,eACJQ,QAASA,EACT6B,OAAQ,oBAAGC,MAASC,EAAZ,EAAYA,MAAOC,EAAnB,EAAmBA,SAAnB,EAA+BC,WAAcC,MAA7C,OACJ,iBAAM7F,UAAU,oBAAhB,SACM0F,EAkBEnF,EAAmBmF,EAAD,OAAQ7H,QAAR,IAAQA,OAAR,EAAQA,EAAMY,OAjBhC,iCACI,SAAC,EAAD,CACIoB,MAAO,WACHkE,GAAa,EAChB,KAEL,SAAC,EAAD,CACIvG,QAAS0G,EACTvG,KAAMmG,EACNrG,OAAQ,SAACkB,GACLgH,EAAShH,EAAOI,IAChByF,EAAS7F,EAAOI,GAAR,OAAYwF,QAAZ,IAAYA,OAAZ,EAAYA,EAAOxF,GAC9B,EACDrB,gBAAiBA,QAhB7B,IAyBXuH,IACG,SAAC,KAAD,CACIM,aAAc5D,EAAOR,QAAQf,MAC7BkE,KAAI,kBAAanB,EAAb,yBACJQ,QAASA,EACT6B,OAAQ,gBAAGC,EAAH,EAAGA,MAAH,EAAUG,WAAcC,MAAxB,OACJ,SAACC,EAAA,GAAD,gBACIjH,SAAUA,EACVkH,WAAY,CACR/F,UAAW,4BAEXyF,GALR,IAMIzF,UAAU,YACVC,KAAK,QACL+F,KAAK,SACLC,QAAQ,SACRC,YAAanI,EAAE,SAXf,QAiBpB,SAACmH,EAAA,GAAD,CAAMG,MAAI,EAAV,UACI,UAACc,EAAA,EAAD,CAAKnG,UAAU,mBAAf,WACI,SAAC,KAAD,CACIuF,aAAc5D,EAAOT,QAAQd,MAC7BkE,KAAI,kBAAanB,EAAb,kBACJQ,QAASA,EACT6B,OAAQ,gBAAGC,EAAH,EAAGA,MAAH,EAAUG,WAAcC,MAAxB,OACJ,SAACC,EAAA,GAAD,gBACIjH,SAAUA,EACVkH,WAAY,CACR/F,UAAW,oBAEXyF,GALR,IAMIzF,UAAU,YACVC,KAAK,QACL+F,KAAK,SACLC,QAAQ,aAVR,IALhB,KAoBI,iCACI,SAAC,KAAD,CACIV,aAAc5D,EAAOR,QAAQf,MAC7BkE,KAAI,kBAAanB,EAAb,kBACJQ,QAASA,EACT6B,OAAQ,gBAAGC,EAAH,EAAGA,MAAH,EAAUG,WAAcC,MAAxB,OACJ,SAACC,EAAA,GAAD,gBACIjH,SAAUA,EACVkH,WAAY,CACR/F,UAAW,oBAEXyF,GALR,IAMIzF,UAAU,YACVC,KAAK,QACL+F,KAAK,SACLC,QAAQ,aAVR,IAcXhB,IACG,SAAC,KAAD,CACIM,aAAc5D,EAAOR,QAAQf,MAC7BkE,KAAI,kBAAanB,EAAb,yBACJQ,QAASA,EACT6B,OAAQ,gBAAGC,EAAH,EAAGA,MAAH,EAAUG,WAAcC,MAAxB,OACJ,SAACC,EAAA,GAAD,gBACIjH,SAAUA,EACVkH,WAAY,CACR/F,UAAW,4BAEXyF,GALR,IAMIzF,UAAU,YACVC,KAAK,QACL+F,KAAK,SACLC,QAAQ,SACRC,YAAanI,EAAE,SAXf,aAmB5B,SAACmH,EAAA,GAAD,CAAMG,MAAI,EAACrF,UAAU,kCAAkCsF,GAAI,EAA3D,UACI,SAAC,KAAD,CACIC,aAAc5D,EAAOR,QAAQpC,GAC7BuF,KAAI,kBAAanB,EAAb,eACJQ,QAASA,EACT6B,OAAQ,oBAAGC,MAASC,EAAZ,EAAYA,MAAOC,EAAnB,EAAmBA,SAAnB,EAA+BC,WAAcC,MAA7C,OACJ,iBAAM7F,UAAU,oBAAhB,SACM0F,EAkBEnF,EAAmBmF,EAAD,OAAQ7H,QAAR,IAAQA,OAAR,EAAQA,EAAMY,OAjBhC,iCACI,SAAC,EAAD,CACIoB,MAAO,WACHoE,GAAa,EAChB,KAEL,SAAC,EAAD,CACIzG,QAAS2G,EACTxG,KAAMqG,EACNvG,OAAQ,SAACkB,GACLgH,EAAShH,EAAOI,IAChByF,EAAQ,OAACJ,QAAD,IAACA,OAAD,EAACA,EAAOrF,GAAIJ,EAAOI,GAC9B,EACDrB,gBAAiBA,QAhB7B,UA2BpB,SAAC0I,EAAA,EAAD,MAGX,CACD,OAAexG,EAAAA,KAAW8D,I,iEClN1B,SAAS2C,GAASvG,GACd,IAAQwG,EAAqCxG,EAArCwG,SAAUZ,EAA2B5F,EAA3B4F,MAAOvC,EAAoBrD,EAApBqD,MAAUoD,GAAnC,OAA6CzG,EAA7C,IAEA,OACI,gCAAK0G,KAAK,WAAWC,OAAQf,IAAUvC,EAAOpE,GAAE,0BAAqBoE,IAAaoD,GAAlF,aACKb,IAAUvC,IACP,SAACgD,EAAA,EAAD,CAAK7H,GAAI,CAAE4D,EAAG,GAAd,UACI,SAACwE,EAAA,EAAD,UAAaJ,QAKhC,CAED,IAEMK,GAAS,CACXC,YAAa,EACbjG,UAAW,EACXiD,UAAWmB,EAAAA,EAAAA,UA6Of,OA1OA,WACI,OAAsBlB,EAAAA,EAAAA,UAAS,gBAA/B,eAAOgD,EAAP,KAAYC,EAAZ,KAIA,IAFiBlJ,EAAAA,EAAAA,MAATC,MAEgBgG,EAAAA,EAAAA,WAAS,IAAjC,eAAOlG,EAAP,KAAaoJ,EAAb,KACA,GAAoClD,EAAAA,EAAAA,UAAwB,MAA5D,eAAOmD,EAAP,KAAmBC,EAAnB,KAEMC,GAAkBnG,EAAAA,EAAAA,cAAY,SAACoC,GACjC8D,EAAc9D,GACd4D,GAAQ,EACX,GAAE,IAEH,GAAoEI,EAAAA,EAAAA,MAA5DxD,EAAR,EAAQA,QAAuByD,GAA/B,EAAiBC,aAAjB,EAA+BD,OAE/B,GAFA,EAAsCE,SAAtC,EAAgDC,SAAhD,EAA0DC,OAUtDC,EAAAA,EAAAA,IAAc,CACd9D,QAAAA,EACAW,KAAM,UACNoD,QAAS,YAVDhH,EADZ,EACIiH,OAMAC,GAPJ,EAEIC,OAFJ,EAGIC,QAHJ,EAIIC,OAJJ,EAKIC,KALJ,EAMIC,KANJ,EAOIL,QAOJ,GAAqDH,EAAAA,EAAAA,IAAc,CAC/D9D,QAAAA,EACAW,KAAM,UACNoD,QAAS,WAHG7G,EAAhB,EAAQ8G,OAA0BO,EAAlC,EAAyBC,QAMzB,GAIIV,EAAAA,EAAAA,IAAc,CACd9D,QAAAA,EACAW,KAAM,WACNoD,QAAS,WANDU,EADZ,EACIT,OAEQU,GAHZ,EAEIC,OAFJ,EAGIT,SAOJU,EAAAA,EAAAA,YAAU,WACNnB,EAAM,CACF1G,SAASlC,EAAAA,EAAAA,MAAIoG,EAAAA,EAAAA,OAAM,EAAG+B,GAAOC,cAAc,iBAAO,CAC9C7H,GAAI,GACJW,UAAW,GACXC,SAAU,GAH6B,IAK3CkB,QAAS,GACTuH,SAAU,CACN,CAAElH,QAAS,CAAEnC,GAAI,GAAIqB,MAAO,IAAMe,QAAS,CAAEpC,GAAI,GAAIqB,MAAO,KAC5D,CAAEc,QAAS,CAAEnC,GAAI,GAAIqB,MAAO,IAAMe,QAAS,CAAEpC,GAAI,GAAIqB,MAAO,KAC5D,CAAEc,QAAS,CAAEnC,GAAI,GAAIqB,MAAO,IAAMe,QAAS,CAAEpC,GAAI,GAAIqB,MAAO,KAC5D,CAAEc,QAAS,CAAEnC,GAAI,GAAIqB,MAAO,IAAMe,QAAS,CAAEpC,GAAI,GAAIqB,MAAO,KAC5D,CAAEc,QAAS,CAAEnC,GAAI,GAAIqB,MAAO,IAAMe,QAAS,CAAEpC,GAAI,GAAIqB,MAAO,KAC5D,CAAEc,QAAS,CAAEnC,GAAI,GAAIqB,MAAO,IAAMe,QAAS,CAAEpC,GAAI,GAAIqB,MAAO,KAC5D,CAAEc,QAAS,CAAEnC,GAAI,GAAIqB,MAAO,IAAMe,QAAS,CAAEpC,GAAI,GAAIqB,MAAO,KAC5D,CAAEc,QAAS,CAAEnC,GAAI,GAAIqB,MAAO,IAAMe,QAAS,CAAEpC,GAAI,GAAIqB,MAAO,OAGvE,GAAE,CAACgH,KAEJoB,EAAAA,GAAAA,IAAgB,WACZ,IAAI3G,EAAAA,EAAAA,UAAQW,EAAAA,EAAAA,QAAO9B,GAAS,SAAC+E,GAAD,OAAYA,EAAM1G,EAAlB,KAAwB,CAChD,IAAM0J,GAAmBjK,EAAAA,EAAAA,MAAIkK,EAAAA,EAAAA,cAAahI,EAAS,IAAI,+BAAE0D,EAAF,KAASG,EAAT,WAAqB,CACxErD,QAAS,CAAEnC,GAAIqF,EAAMrF,IAAM,GAAIqB,MAAO,IACtCe,QAAS,CAAEpC,GAAIwF,EAAMxF,IAAM,GAAIqB,MAAO,IAFa,IAKvD8H,EACIvB,GAAO/C,YAAcmB,EAAAA,EAAAA,UACf3D,EAAAA,EAAAA,QACIqH,GACAjK,EAAAA,EAAAA,KAAIiK,GAAkB,gBAAGvH,EAAH,EAAGA,QAAH,MAA2B,CAC7CA,QADkB,EAAYC,QAE9BA,QAASD,EAFS,KAK1BuH,EAEb,CACD/F,QAAQC,IAAIjC,EAAS,SACxB,GAAE,CAACA,IAEJgC,QAAQC,IAAI,UAAW,WAEvB,IAAMgG,GAAgBtE,EAAAA,EAAAA,IAAS,CAC3BV,QAAAA,EACAW,KAAM,YAKV5B,QAAQC,IAAIgG,EAAe,iBAC3BjG,QAAQC,IAAIjC,EAAS,WAErB,IAAQ3C,GAAMC,EAAAA,EAAAA,KAAND,EAOF6K,GAAc7H,EAAAA,EAAAA,cAAY,WAC5BkG,EAAc,MACdF,GAAQ,EACX,GAAE,IAEG8B,GAAa9H,EAAAA,EAAAA,cACf,SAACpC,GACGiJ,EAAOZ,EAAsB,CACzBjI,GAAIJ,EAAOI,GACXW,UAAWf,EAAOe,UAClBC,SAAUhB,EAAOgB,WAErBiJ,GACH,GACD,CAACA,EAAa5B,EAAYY,IAGxBlK,GAAkBkE,EAAAA,EAAAA,UAAQ,WAC5B,OAAOkH,EAAAA,EAAAA,UAAQtK,EAAAA,EAAAA,KAAIkC,EAAS,MAC/B,GAAE,CAACA,IAKJ,OAHAgC,QAAQC,IAAI9B,EAAS,WACrB6B,QAAQC,IAAIyF,EAAU,aAGlB,iCACI,SAAC,EAAD,CACI5K,QAASoL,EACTjL,KAAMA,EACNF,OAAQoL,EACRnL,gBAAiBA,KAErB,UAACqL,EAAA,EAAD,YAEI,UAACC,EAAA,EAAD,CAAMtD,MAAOmB,EAAKlB,SAvCT,SAACsD,EAA6BC,GAC/CpC,EAAOoC,EAEV,EAoCqDjD,QAAQ,aAAlD,WACI,SAACkD,EAAA,EAAD,CAAKC,MAAM,eAAe1D,MAAM,kBAChC,SAACyD,EAAA,EAAD,CAAKC,MAAM,MAAM1D,MAAM,SACvB,SAACyD,EAAA,EAAD,CAAKC,MAAM,MAAM1D,MAAM,SACvB,SAACyD,EAAA,EAAD,CAAKC,MAAM,MAAM1D,MAAM,SACvB,SAACyD,EAAA,EAAD,CAAKC,MAAM,YAAY1D,MAAM,eAC7B,SAACyD,EAAA,EAAD,CAAKC,MAAM,aAAQ1D,MAAM,mBAG7B,UAACW,GAAD,CAAUX,MAAOmB,EAAK1D,MAAO,eAA7B,WACI,UAACkG,EAAA,EAAD,CAAapD,QAAQ,WAArB,WACI,SAACqD,EAAA,EAAD,CAAQrD,QAAQ,YAAYhG,KAAK,QAAjC,sBAGA,SAACqJ,EAAA,EAAD,CAAQrJ,KAAK,QAAb,sBACA,SAACqJ,EAAA,EAAD,CAAQrJ,KAAK,QAAb,yBAGJ,SAAC,EAAD,CACID,UAAU,OACVU,QAASA,EACTE,YAAasG,EACbvG,UAAW,EACXE,QAAS8H,KAGb,UAACxC,EAAA,EAAD,YACKtE,EAAAA,EAAAA,SAAQhB,KACL,SAAC0I,EAAA,EAAD,CAAOC,SAAS,OAAOvD,QAAQ,WAA/B,SACKlI,EAAE,qEAIVS,EAAAA,EAAAA,KACGqC,GACA,SAACc,EAAQwB,GAAT,OACIxB,EAAOT,QAAQnC,IACf4C,EAAOR,QAAQpC,KACX,SAAC,GAAD,CAEI4E,QAASA,EACTR,MAAOA,EACPxB,OAAQA,GAHHA,EAAOG,OAJxB,WAaZ,SAACuE,GAAD,CAAUX,MAAOmB,EAAK1D,MAAO,MAA7B,UACK3E,EAAAA,EAAAA,KAAI4J,GAAU,SAACzG,EAAQwB,GAAT,OACX,SAAC,GAAD,CACIzF,gBAAiBA,EACjBkG,UAAW+C,GAAO/C,UAClBD,QAASA,EACTR,MAAOA,EACPxB,OAAQA,EAER9B,MAAO,SAAC8B,GACJ0G,EAAQ1G,EACX,GAHIA,EAAOG,OAPL,OAcnB,SAACuE,GAAD,CAAUX,MAAOmB,EAAK1D,MAAO,MAA7B,yBAGA,SAACkD,GAAD,CAAUX,MAAOmB,EAAK1D,MAAO,MAA7B,yBAGA,SAACkD,GAAD,CAAUX,MAAOmB,EAAK1D,MAAO,YAA7B,yBAGA,SAACkD,GAAD,CAAUX,MAAOmB,EAAK1D,MAAO,aAA7B,yBAGA,UAACgD,EAAA,EAAD,CAAKnG,UAAU,YAAf,WACI,SAACsJ,EAAA,EAAD,CACIrK,QAAS,WAAQ,EACjBwK,WAAW,SAACC,GAAA,EAAD,IACXpK,MAAM,UACNgH,SAAUvI,EAAE,2BAEhB,SAACuL,EAAA,EAAD,CACIrK,QAAS,WAAQ,EACjBwK,WAAW,SAACE,GAAA,EAAD,IACXrK,MAAM,UACNgH,SAAUvI,EAAE,+BAMnC,C","sources":["components/PlayerPicker/PlayerPicker.tsx","components/RoundAddButton/RoundAddButton.tsx","helpers/global.ts","components/ScoreTable/ScoreTable.tsx","components/ScoreTable/ScoreRow.tsx","pages/TournamentDetail.tsx"],"sourcesContent":["import PersonIcon from '@mui/icons-material/Person';\r\nimport Avatar from '@mui/material/Avatar';\r\nimport { blue } from '@mui/material/colors';\r\nimport Dialog from '@mui/material/Dialog';\r\nimport DialogTitle from '@mui/material/DialogTitle';\r\nimport List from '@mui/material/List';\r\nimport ListItem from '@mui/material/ListItem';\r\nimport ListItemAvatar from '@mui/material/ListItemAvatar';\r\nimport ListItemText from '@mui/material/ListItemText';\r\nimport { Loading } from 'components/Loading';\r\nimport { useActivePlayerListQuery } from 'hooks';\r\nimport { includes, map } from 'lodash';\r\nimport 'lodash.combinations';\r\nimport React from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { Fn, Player } from 'types/global';\r\n\r\ntype Props = {\r\n    onClose: Fn;\r\n    onPick: (player: Player) => void;\r\n    disabledPlayers?: string[];\r\n    open: boolean;\r\n};\r\n\r\nfunction PlayerPicker({ onClose, onPick, disabledPlayers, open }: Props) {\r\n    const { data, isLoading } = useActivePlayerListQuery();\r\n    const { t } = useTranslation();\r\n\r\n    return (\r\n        <Dialog onClose={onClose} open={open}>\r\n            <Loading loading={isLoading}>\r\n                <DialogTitle>{t(`Wybierz zawodnika`)}</DialogTitle>\r\n                <List sx={{ pt: 0 }}>\r\n                    {map(data?.docs, (docSnapshot) => {\r\n                        const player = docSnapshot.data();\r\n\r\n                        return (\r\n                            <ListItem\r\n                                disabled={includes(disabledPlayers, docSnapshot.id)}\r\n                                button\r\n                                onClick={() => onPick({ ...player, id: docSnapshot.id })}\r\n                                key={docSnapshot.id}\r\n                            >\r\n                                <ListItemAvatar>\r\n                                    <Avatar sx={{ bgcolor: blue[100], color: blue[600] }}>\r\n                                        <PersonIcon />\r\n                                    </Avatar>\r\n                                </ListItemAvatar>\r\n                                <ListItemText primary={player.firstName + ' ' + player.lastName} />\r\n                            </ListItem>\r\n                        );\r\n                    })}\r\n                </List>\r\n            </Loading>\r\n        </Dialog>\r\n    );\r\n}\r\nexport default React.memo(PlayerPicker);\r\n","import { IconButton, IconButtonTypeMap } from '@mui/material';\r\nimport AddCircleIcon from '@mui/icons-material/AddCircle';\r\n\r\ntype Props = {\r\n    onAdd: () => void;\r\n} & IconButtonTypeMap['props'];\r\n\r\nfunction RoundAddButton({ onAdd, ...props }: Props) {\r\n    return (\r\n        <IconButton className=\"p-0\" size=\"small\" color=\"primary\" onClick={onAdd} {...props}>\r\n            <AddCircleIcon />\r\n        </IconButton>\r\n    );\r\n}\r\nexport default RoundAddButton;\r\n","import { matchStatus } from 'constants/global';\r\nimport { QueryDocumentSnapshot, QuerySnapshot } from 'firebase/firestore';\r\nimport { find } from 'lodash';\r\nimport { Player } from 'types/global';\r\n\r\nexport const getMatchStatus = (score: number) => {\r\n    if (score === 0) return matchStatus.D;\r\n\r\n    return score > 0 ? matchStatus.W : matchStatus.L;\r\n};\r\n\r\nexport const getPkt = (score: number) => {\r\n    if (score === 0) return 1;\r\n\r\n    return score > 0 ? 3 : 0;\r\n};\r\n\r\nexport const findPlayerNameById = (\r\n    id: string,\r\n    docs: QueryDocumentSnapshot<Player>[] | undefined\r\n) => {\r\n    if (!id) return;\r\n\r\n    const player = find(docs, { id: id })?.data();\r\n\r\n    return player?.firstName + ' ' + player?.lastName;\r\n};\r\n","import AddCircleIcon from '@mui/icons-material/AddCircle';\r\nimport { IconButton } from '@mui/material';\r\nimport { green, red } from '@mui/material/colors';\r\nimport Table from '@mui/material/Table';\r\nimport TableBody from '@mui/material/TableBody';\r\nimport TableHead from '@mui/material/TableHead';\r\nimport TableRow from '@mui/material/TableRow';\r\nimport { RoundAddButton } from 'components/RoundAddButton';\r\nimport { TableContainer } from 'components/TableContainer';\r\nimport { matchStatus } from 'constants/global';\r\nimport { findPlayerNameById, getMatchStatus, getPkt } from 'helpers/global';\r\nimport { useActivePlayerListQuery } from 'hooks';\r\nimport { concat, filter, isEmpty, map, orderBy, reduce, size } from 'lodash';\r\nimport 'lodash.combinations';\r\nimport React, { useCallback, useMemo } from 'react';\r\nimport { FieldArrayWithId } from 'react-hook-form';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { TableCell } from 'style/components';\r\nimport { Result, TournamentSchema } from 'types/global';\r\n\r\ntype ScoreResult = {\r\n    formId: string;\r\n    id: string;\r\n    pkt: number;\r\n    m: number;\r\n    w: number;\r\n    r: number;\r\n    p: number;\r\n    brPlus: number;\r\n    brMinus: number;\r\n    brDiff: number;\r\n};\r\n\r\ntype Props = {\r\n    players: FieldArrayWithId<TournamentSchema, 'players', 'formId'>[];\r\n    results: Result[];\r\n    promotion: number;\r\n    onAddPlayer: (index: number) => void;\r\n    className?: string;\r\n};\r\n\r\ntype MatchResult = {\r\n    status: keyof typeof matchStatus;\r\n    plus: number;\r\n    minus: number;\r\n    diff: number;\r\n    pkt: number;\r\n};\r\n\r\nfunction ScoreTable({ players, promotion, onAddPlayer, results, className }: Props) {\r\n    const { t } = useTranslation();\r\n    const { data } = useActivePlayerListQuery();\r\n\r\n    const getAllResultsByPlayerId = useCallback(\r\n        (id: string) =>\r\n            reduce(\r\n                results,\r\n                (acc: MatchResult[], { playerA, playerB }) => {\r\n                    if (playerA.score && playerB.score) {\r\n                        if (playerA.id === id) {\r\n                            return concat(acc, {\r\n                                status: getMatchStatus(\r\n                                    parseInt(playerA.score) - parseInt(playerB.score)\r\n                                ),\r\n                                plus: parseInt(playerA.score),\r\n                                minus: parseInt(playerB.score),\r\n                                diff: parseInt(playerA.score) - parseInt(playerB.score),\r\n                                pkt: getPkt(parseInt(playerA.score) - parseInt(playerB.score)),\r\n                            });\r\n                        }\r\n\r\n                        if (playerB.id === id) {\r\n                            return concat(acc, {\r\n                                status: getMatchStatus(\r\n                                    parseInt(playerB.score) - parseInt(playerA.score)\r\n                                ),\r\n                                plus: parseInt(playerB.score),\r\n                                minus: parseInt(playerA.score),\r\n                                diff: parseInt(playerB.score) - parseInt(playerA.score),\r\n                                pkt: getPkt(parseInt(playerB.score) - parseInt(playerA.score)),\r\n                            });\r\n                        }\r\n                    }\r\n\r\n                    return acc;\r\n                },\r\n                []\r\n            ),\r\n        [results]\r\n    );\r\n\r\n    const result = useMemo<ScoreResult[]>(() => {\r\n        if (isEmpty(results)) {\r\n            return map(players, (player) => ({\r\n                formId: player.formId,\r\n                id: player.id || '',\r\n                pkt: 0,\r\n                m: 0,\r\n                w: 0,\r\n                r: 0,\r\n                p: 0,\r\n                brPlus: 0,\r\n                brMinus: 0,\r\n                brDiff: 0,\r\n            }));\r\n        }\r\n\r\n        const resultList = map(players, (player) => {\r\n            const playerResult = getAllResultsByPlayerId(player.id as string);\r\n\r\n            return {\r\n                formId: player.formId,\r\n                id: player.id || '',\r\n                pkt: reduce(playerResult, (acc, { pkt }) => acc + pkt, 0),\r\n                m: size(playerResult),\r\n                w: size(filter(playerResult, { status: matchStatus.W })),\r\n                r: size(filter(playerResult, { status: matchStatus.D })),\r\n                p: size(filter(playerResult, { status: matchStatus.L })),\r\n                brPlus: reduce(playerResult, (acc, { plus }) => acc + plus, 0),\r\n                brMinus: reduce(playerResult, (acc, { minus }) => acc + minus, 0),\r\n                brDiff: reduce(playerResult, (acc, { diff }) => acc + diff, 0),\r\n            };\r\n        });\r\n\r\n        return orderBy(resultList, ['pkt', 'brDiff', 'brPlus'], ['desc', 'desc', 'desc']);\r\n    }, [results, players, getAllResultsByPlayerId]);\r\n\r\n    console.log(result, 'result');\r\n\r\n    return (\r\n        <TableContainer className={className}>\r\n            <Table>\r\n                <TableHead>\r\n                    <TableRow>\r\n                        <TableCell align=\"left\">{t('Zawodnik')}</TableCell>\r\n                        <TableCell width={50} className=\"text-center\">\r\n                            {t('Pkt')}\r\n                        </TableCell>\r\n                        <TableCell width={50} className=\"text-center\">\r\n                            {t('M')}\r\n                        </TableCell>\r\n                        <TableCell width={50} className=\"text-center\">\r\n                            {t('W')}\r\n                        </TableCell>\r\n                        <TableCell width={50} className=\"text-center\">\r\n                            {t('R')}\r\n                        </TableCell>\r\n                        <TableCell width={50} className=\"text-center\">\r\n                            {t('P')}\r\n                        </TableCell>\r\n                        <TableCell width={50} className=\"text-center\">\r\n                            {t('Br+')}\r\n                        </TableCell>\r\n                        <TableCell width={50} className=\"text-center\">\r\n                            {t('Br-')}\r\n                        </TableCell>\r\n                        <TableCell width={50} className=\"text-center\">\r\n                            {t('+/-')}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {map(\r\n                        result,\r\n                        ({ formId, id, pkt, m, w, r, p, brPlus, brMinus, brDiff }, index) => (\r\n                            <TableRow\r\n                                key={formId}\r\n                                style={{\r\n                                    backgroundColor: promotion > index ? green[100] : red[100],\r\n                                }}\r\n                            >\r\n                                <TableCell component=\"th\" scope=\"row\">\r\n                                    {id ? (\r\n                                        findPlayerNameById(id, data?.docs)\r\n                                    ) : (\r\n                                        <RoundAddButton\r\n                                            onAdd={() => {\r\n                                                onAddPlayer(index);\r\n                                            }}\r\n                                        />\r\n                                    )}\r\n                                </TableCell>\r\n                                <TableCell\r\n                                    component=\"th\"\r\n                                    scope=\"row\"\r\n                                    className=\"text-center font-bold\"\r\n                                >\r\n                                    {pkt}\r\n                                </TableCell>\r\n                                <TableCell component=\"th\" scope=\"row\" className=\"text-center\">\r\n                                    {m}\r\n                                </TableCell>\r\n                                <TableCell component=\"th\" scope=\"row\" className=\"text-center\">\r\n                                    {w}\r\n                                </TableCell>\r\n                                <TableCell component=\"th\" scope=\"row\" className=\"text-center\">\r\n                                    {r}\r\n                                </TableCell>\r\n                                <TableCell component=\"th\" scope=\"row\" className=\"text-center\">\r\n                                    {p}\r\n                                </TableCell>\r\n                                <TableCell component=\"th\" scope=\"row\" className=\"text-center\">\r\n                                    {brPlus}\r\n                                </TableCell>\r\n                                <TableCell component=\"th\" scope=\"row\" className=\"text-center\">\r\n                                    {brMinus}\r\n                                </TableCell>\r\n                                <TableCell component=\"th\" scope=\"row\" className=\"text-center\">\r\n                                    {brDiff}\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        )\r\n                    )}\r\n                </TableBody>\r\n            </Table>\r\n        </TableContainer>\r\n    );\r\n}\r\nexport default React.memo(ScoreTable);\r\n","import { Alert, Button, ButtonGroup, Divider, Grid, Paper, TextField } from '@mui/material';\r\nimport Box from '@mui/material/Box';\r\nimport Tab from '@mui/material/Tab';\r\nimport Tabs from '@mui/material/Tabs';\r\nimport Typography from '@mui/material/Typography';\r\nimport { PlayerPicker } from 'components/PlayerPicker';\r\nimport { RoundAddButton } from 'components/RoundAddButton';\r\nimport { ScoreTable } from 'components/ScoreTable';\r\nimport { findPlayerNameById } from 'helpers/global';\r\nimport { useActivePlayerListQuery } from 'hooks';\r\nimport { combinations, compact, filter, forEach, isEmpty, map, range } from 'lodash';\r\nimport 'lodash.combinations';\r\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\r\nimport {\r\n    Control,\r\n    Controller,\r\n    useFieldArray,\r\n    UseFieldArrayInsert,\r\n    useForm,\r\n    useWatch,\r\n} from 'react-hook-form';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { useUpdateEffect } from 'react-use';\r\nimport { Fn, Player, Result, TournamentSchema, TypeOfWin } from 'types/global';\r\nimport { match, P } from 'ts-pattern';\r\n\r\ntype FormResult = Result & { formId: string };\r\n\r\ntype Props = {\r\n    control: Control<TournamentSchema, any>;\r\n    index: number;\r\n    result: FormResult;\r\n    onAdd?: (result: Result) => void;\r\n    typeOfWin?: TypeOfWin;\r\n    disabledPlayers?: string[];\r\n};\r\n\r\nfunction ScoreRow({ control, index, result, onAdd, typeOfWin, disabledPlayers }: Props) {\r\n    const { data } = useActivePlayerListQuery();\r\n    const { t } = useTranslation();\r\n    const [teamAOpen, setTeamAOpen] = useState(false);\r\n    const [teamBOpen, setTeamBOpen] = useState(false);\r\n\r\n    const handleTeamAClose = useCallback(() => {\r\n        setTeamAOpen(false);\r\n    }, []);\r\n\r\n    const handleTeamBClose = useCallback(() => {\r\n        setTeamBOpen(false);\r\n    }, []);\r\n\r\n    const teamA = useWatch({\r\n        control,\r\n        name: `results.${index}.playerA`,\r\n    });\r\n\r\n    const teamB = useWatch({\r\n        control,\r\n        name: `results.${index}.playerB`,\r\n    });\r\n\r\n    const getCountOfMatches = () =>\r\n        match(typeOfWin)\r\n            .with(TypeOfWin.TwoMatch, () => 2)\r\n            .with(TypeOfWin.Best3, () => 3)\r\n            .with(TypeOfWin.Best5, () => 5)\r\n            .otherwise(() => 0);\r\n\r\n    const addMatch = (teamAId?: string, teamBId?: string) => {\r\n        if (teamAId && teamBId && onAdd) {\r\n            forEach(range(0, getCountOfMatches()), () => {\r\n                onAdd({\r\n                    playerA: { id: teamAId, score: '' },\r\n                    playerB: { id: teamBId, score: '' },\r\n                });\r\n            });\r\n        }\r\n    };\r\n\r\n    const isDraw = onAdd && teamA?.score && teamB?.score && teamA?.score === teamB?.score;\r\n    const disabled = !teamA?.id || !teamB?.id;\r\n\r\n    return (\r\n        <>\r\n            <Grid container className=\"py-1 items-center\" wrap=\"nowrap\">\r\n                <Grid item xs={5} className=\"flex justify-end items-center\">\r\n                    <Controller\r\n                        defaultValue={result.playerA.id}\r\n                        name={`results.${index}.playerA.id`}\r\n                        control={control}\r\n                        render={({ field: { value, onChange }, fieldState: { error } }) => (\r\n                            <span className=\"text-xs break-all\">\r\n                                {!value ? (\r\n                                    <>\r\n                                        <RoundAddButton\r\n                                            onAdd={() => {\r\n                                                setTeamAOpen(true);\r\n                                            }}\r\n                                        />\r\n                                        <PlayerPicker\r\n                                            onClose={handleTeamAClose}\r\n                                            open={teamAOpen}\r\n                                            onPick={(player) => {\r\n                                                onChange(player.id);\r\n                                                addMatch(player.id, teamB?.id);\r\n                                            }}\r\n                                            disabledPlayers={disabledPlayers}\r\n                                        />\r\n                                    </>\r\n                                ) : (\r\n                                    findPlayerNameById(value, data?.docs)\r\n                                )}\r\n                            </span>\r\n                        )}\r\n                    />\r\n                    {isDraw && (\r\n                        <Controller\r\n                            defaultValue={result.playerB.score}\r\n                            name={`results.${index}.playerA.penaltyScore`}\r\n                            control={control}\r\n                            render={({ field, fieldState: { error } }) => (\r\n                                <TextField\r\n                                    disabled={disabled}\r\n                                    inputProps={{\r\n                                        className: 'p-1 text-center text-xs',\r\n                                    }}\r\n                                    {...field}\r\n                                    className=\"mx-1 w-10\"\r\n                                    size=\"small\"\r\n                                    type=\"number\"\r\n                                    variant=\"filled\"\r\n                                    placeholder={t('kr.')}\r\n                                />\r\n                            )}\r\n                        />\r\n                    )}\r\n                </Grid>\r\n                <Grid item>\r\n                    <Box className=\"flex flex-nowrap\">\r\n                        <Controller\r\n                            defaultValue={result.playerA.score}\r\n                            name={`results.${index}.playerA.score`}\r\n                            control={control}\r\n                            render={({ field, fieldState: { error } }) => (\r\n                                <TextField\r\n                                    disabled={disabled}\r\n                                    inputProps={{\r\n                                        className: 'p-1 text-center',\r\n                                    }}\r\n                                    {...field}\r\n                                    className=\"mx-1 w-10\"\r\n                                    size=\"small\"\r\n                                    type=\"number\"\r\n                                    variant=\"outlined\"\r\n                                />\r\n                            )}\r\n                        />\r\n                        :\r\n                        <>\r\n                            <Controller\r\n                                defaultValue={result.playerB.score}\r\n                                name={`results.${index}.playerB.score`}\r\n                                control={control}\r\n                                render={({ field, fieldState: { error } }) => (\r\n                                    <TextField\r\n                                        disabled={disabled}\r\n                                        inputProps={{\r\n                                            className: 'p-1 text-center',\r\n                                        }}\r\n                                        {...field}\r\n                                        className=\"mx-1 w-10\"\r\n                                        size=\"small\"\r\n                                        type=\"number\"\r\n                                        variant=\"outlined\"\r\n                                    />\r\n                                )}\r\n                            />\r\n                            {isDraw && (\r\n                                <Controller\r\n                                    defaultValue={result.playerB.score}\r\n                                    name={`results.${index}.playerB.penaltyScore`}\r\n                                    control={control}\r\n                                    render={({ field, fieldState: { error } }) => (\r\n                                        <TextField\r\n                                            disabled={disabled}\r\n                                            inputProps={{\r\n                                                className: 'p-1 text-center text-xs',\r\n                                            }}\r\n                                            {...field}\r\n                                            className=\"mx-1 w-10\"\r\n                                            size=\"small\"\r\n                                            type=\"number\"\r\n                                            variant=\"filled\"\r\n                                            placeholder={t('kr.')}\r\n                                        />\r\n                                    )}\r\n                                />\r\n                            )}\r\n                        </>\r\n                    </Box>\r\n                </Grid>\r\n                <Grid item className=\"flex justify-start items-center\" xs={5}>\r\n                    <Controller\r\n                        defaultValue={result.playerB.id}\r\n                        name={`results.${index}.playerB.id`}\r\n                        control={control}\r\n                        render={({ field: { value, onChange }, fieldState: { error } }) => (\r\n                            <span className=\"text-xs break-all\">\r\n                                {!value ? (\r\n                                    <>\r\n                                        <RoundAddButton\r\n                                            onAdd={() => {\r\n                                                setTeamBOpen(true);\r\n                                            }}\r\n                                        />\r\n                                        <PlayerPicker\r\n                                            onClose={handleTeamBClose}\r\n                                            open={teamBOpen}\r\n                                            onPick={(player) => {\r\n                                                onChange(player.id);\r\n                                                addMatch(teamA?.id, player.id);\r\n                                            }}\r\n                                            disabledPlayers={disabledPlayers}\r\n                                        />\r\n                                    </>\r\n                                ) : (\r\n                                    findPlayerNameById(value, data?.docs)\r\n                                )}\r\n                            </span>\r\n                        )}\r\n                    />\r\n                </Grid>\r\n            </Grid>\r\n            <Divider />\r\n        </>\r\n    );\r\n}\r\nexport default React.memo(ScoreRow);\r\n","import { Alert, Button, ButtonGroup, Divider, Grid, Paper, TextField } from '@mui/material';\r\nimport Box from '@mui/material/Box';\r\nimport Tab from '@mui/material/Tab';\r\nimport Tabs from '@mui/material/Tabs';\r\nimport Typography from '@mui/material/Typography';\r\nimport { PlayerPicker } from 'components/PlayerPicker';\r\nimport { RoundAddButton } from 'components/RoundAddButton';\r\nimport { ScoreRow, ScoreTable } from 'components/ScoreTable';\r\nimport { findPlayerNameById } from 'helpers/global';\r\nimport { useActivePlayerListQuery } from 'hooks';\r\nimport { combinations, compact, concat, filter, isEmpty, map, range } from 'lodash';\r\nimport 'lodash.combinations';\r\nimport { useCallback, useEffect, useMemo, useState } from 'react';\r\nimport { Controller, useFieldArray, useForm, useWatch } from 'react-hook-form';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { useUpdateEffect } from 'react-use';\r\nimport { Player, TournamentSchema, TypeOfWin } from 'types/global';\r\nimport SaveIcon from '@mui/icons-material/Save';\r\nimport PlayCircleFilledWhiteIcon from '@mui/icons-material/PlayCircleFilledWhite';\r\nimport StopCircleIcon from '@mui/icons-material/StopCircle';\r\n\r\ninterface TabPanelProps {\r\n    children?: React.ReactNode;\r\n    index: string;\r\n    value: string;\r\n}\r\n\r\nfunction TabPanel(props: TabPanelProps) {\r\n    const { children, value, index, ...other } = props;\r\n\r\n    return (\r\n        <div role=\"tabpanel\" hidden={value !== index} id={`simple-tabpanel-${index}`} {...other}>\r\n            {value === index && (\r\n                <Box sx={{ p: 3 }}>\r\n                    <Typography>{children}</Typography>\r\n                </Box>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nconst isTwoMatch = false;\r\n\r\nconst schema = {\r\n    playerCount: 3,\r\n    promotion: 1,\r\n    typeOfWin: TypeOfWin.OneMatch,\r\n};\r\n\r\nfunction TournamentDetail() {\r\n    const [tab, setTab] = useState('Faza grupowa');\r\n\r\n    const { data } = useActivePlayerListQuery();\r\n\r\n    const [open, setOpen] = useState(false);\r\n    const [modalIndex, setModalIndex] = useState<number | null>(null);\r\n\r\n    const handleClickOpen = useCallback((index: number) => {\r\n        setModalIndex(index);\r\n        setOpen(true);\r\n    }, []);\r\n\r\n    const { control, handleSubmit, reset, register, setValue, watch } = useForm<TournamentSchema>();\r\n\r\n    const {\r\n        fields: players,\r\n        append,\r\n        prepend,\r\n        remove,\r\n        swap,\r\n        move,\r\n        update,\r\n    } = useFieldArray({\r\n        control,\r\n        name: 'players',\r\n        keyName: 'formId',\r\n    });\r\n\r\n    const { fields: results, replace: resultsReplace } = useFieldArray({\r\n        control,\r\n        name: 'results',\r\n        keyName: 'formId',\r\n    });\r\n\r\n    const {\r\n        fields: results2,\r\n        insert,\r\n        append: append2,\r\n    } = useFieldArray({\r\n        control,\r\n        name: 'results2',\r\n        keyName: 'formId',\r\n    });\r\n\r\n    useEffect(() => {\r\n        reset({\r\n            players: map(range(0, schema.playerCount), () => ({\r\n                id: '',\r\n                firstName: '',\r\n                lastName: '',\r\n            })),\r\n            results: [],\r\n            results2: [\r\n                { playerA: { id: '', score: '' }, playerB: { id: '', score: '' } },\r\n                { playerA: { id: '', score: '' }, playerB: { id: '', score: '' } },\r\n                { playerA: { id: '', score: '' }, playerB: { id: '', score: '' } },\r\n                { playerA: { id: '', score: '' }, playerB: { id: '', score: '' } },\r\n                { playerA: { id: '', score: '' }, playerB: { id: '', score: '' } },\r\n                { playerA: { id: '', score: '' }, playerB: { id: '', score: '' } },\r\n                { playerA: { id: '', score: '' }, playerB: { id: '', score: '' } },\r\n                { playerA: { id: '', score: '' }, playerB: { id: '', score: '' } },\r\n            ],\r\n        });\r\n    }, [reset]);\r\n\r\n    useUpdateEffect(() => {\r\n        if (isEmpty(filter(players, (field) => !field.id))) {\r\n            const baseCombinations = map(combinations(players, 2), ([teamA, teamB]) => ({\r\n                playerA: { id: teamA.id || '', score: '' },\r\n                playerB: { id: teamB.id || '', score: '' },\r\n            }));\r\n\r\n            resultsReplace(\r\n                schema.typeOfWin === TypeOfWin.TwoMatch\r\n                    ? concat(\r\n                          baseCombinations,\r\n                          map(baseCombinations, ({ playerA, playerB }) => ({\r\n                              playerA: playerB,\r\n                              playerB: playerA,\r\n                          }))\r\n                      )\r\n                    : baseCombinations\r\n            );\r\n        }\r\n        console.log(players, 'fields');\r\n    }, [players]);\r\n\r\n    console.log('results', 'results');\r\n\r\n    const resultsValues = useWatch({\r\n        control,\r\n        name: 'results',\r\n    });\r\n\r\n    // \"my-2\"\r\n\r\n    console.log(resultsValues, 'resultsValues');\r\n    console.log(players, 'players');\r\n\r\n    const { t } = useTranslation();\r\n\r\n    const handleChange = (event: React.SyntheticEvent, newValue: string) => {\r\n        setTab(newValue);\r\n        // setValue(newValue);\r\n    };\r\n\r\n    const handleClose = useCallback(() => {\r\n        setModalIndex(null);\r\n        setOpen(false);\r\n    }, []);\r\n\r\n    const handlePick = useCallback(\r\n        (player: Player) => {\r\n            update(modalIndex as number, {\r\n                id: player.id,\r\n                firstName: player.firstName,\r\n                lastName: player.lastName,\r\n            });\r\n            handleClose();\r\n        },\r\n        [handleClose, modalIndex, update]\r\n    );\r\n\r\n    const disabledPlayers = useMemo(() => {\r\n        return compact(map(players, 'id'));\r\n    }, [players]);\r\n\r\n    console.log(results, 'results');\r\n    console.log(results2, 'results2');\r\n\r\n    return (\r\n        <>\r\n            <PlayerPicker\r\n                onClose={handleClose}\r\n                open={open}\r\n                onPick={handlePick}\r\n                disabledPlayers={disabledPlayers}\r\n            />\r\n            <Paper>\r\n                {/* <Box sx={{ borderBottom: 1, borderColor: 'divider' }}> */}\r\n                <Tabs value={tab} onChange={handleChange} variant=\"scrollable\">\r\n                    <Tab label=\"Faza grupowa\" value=\"Faza grupowa\" />\r\n                    <Tab label=\"1/8\" value=\"1/8\" />\r\n                    <Tab label=\"1/4\" value=\"1/4\" />\r\n                    <Tab label=\"1/2\" value=\"1/2\" />\r\n                    <Tab label=\"mecz o 3.\" value=\"mecz o 3.\" />\r\n                    <Tab label=\"Finał\" value=\"Finał\" />\r\n                </Tabs>\r\n                {/* </Box> */}\r\n                <TabPanel value={tab} index={'Faza grupowa'}>\r\n                    <ButtonGroup variant=\"outlined\">\r\n                        <Button variant=\"contained\" size=\"small\">\r\n                            Grupa A\r\n                        </Button>\r\n                        <Button size=\"small\">Grupa B</Button>\r\n                        <Button size=\"small\">Grupa C</Button>\r\n                    </ButtonGroup>\r\n\r\n                    <ScoreTable\r\n                        className=\"my-2\"\r\n                        players={players}\r\n                        onAddPlayer={handleClickOpen}\r\n                        promotion={1}\r\n                        results={resultsValues}\r\n                    />\r\n\r\n                    <Box>\r\n                        {isEmpty(results) && (\r\n                            <Alert severity=\"info\" variant=\"standard\">\r\n                                {t('Wprowadź wszystkich graczy aby wygenerować terminarz')}\r\n                            </Alert>\r\n                        )}\r\n                        {/* {map(combinations(fields, 2), ([teamA, teamB], index) => ( */}\r\n                        {map(\r\n                            results,\r\n                            (result, index) =>\r\n                                result.playerA.id &&\r\n                                result.playerB.id && (\r\n                                    <ScoreRow\r\n                                        key={result.formId}\r\n                                        control={control}\r\n                                        index={index}\r\n                                        result={result}\r\n                                    />\r\n                                )\r\n                        )}\r\n                    </Box>\r\n                </TabPanel>\r\n                <TabPanel value={tab} index={'1/8'}>\r\n                    {map(results2, (result, index) => (\r\n                        <ScoreRow\r\n                            disabledPlayers={disabledPlayers}\r\n                            typeOfWin={schema.typeOfWin}\r\n                            control={control}\r\n                            index={index}\r\n                            result={result}\r\n                            key={result.formId}\r\n                            onAdd={(result) => {\r\n                                append2(result);\r\n                            }}\r\n                        />\r\n                    ))}\r\n                </TabPanel>\r\n                <TabPanel value={tab} index={'1/4'}>\r\n                    Item Three\r\n                </TabPanel>\r\n                <TabPanel value={tab} index={'1/2'}>\r\n                    Item Three\r\n                </TabPanel>\r\n                <TabPanel value={tab} index={'mecz o 3.'}>\r\n                    Item Three\r\n                </TabPanel>\r\n                <TabPanel value={tab} index={'Finał'}>\r\n                    Item Three\r\n                </TabPanel>\r\n                <Box className=\"px-6 pb-4\">\r\n                    <Button\r\n                        onClick={() => {}}\r\n                        startIcon={<StopCircleIcon />}\r\n                        color=\"primary\"\r\n                        children={t('Zakończ turniej')}\r\n                    />\r\n                    <Button\r\n                        onClick={() => {}}\r\n                        startIcon={<PlayCircleFilledWhiteIcon />}\r\n                        color=\"primary\"\r\n                        children={t('Wystartuj turniej')}\r\n                    />\r\n                </Box>\r\n            </Paper>\r\n        </>\r\n    );\r\n}\r\nexport default TournamentDetail;\r\n"],"names":["PlayerPicker","onClose","onPick","disabledPlayers","open","useActivePlayerListQuery","data","isLoading","t","useTranslation","Dialog","Loading","loading","DialogTitle","List","sx","pt","map","docs","docSnapshot","player","ListItem","disabled","includes","id","button","onClick","ListItemAvatar","Avatar","bgcolor","blue","color","Person","ListItemText","primary","firstName","lastName","React","onAdd","props","IconButton","className","size","AddCircle","getMatchStatus","score","matchStatus","getPkt","findPlayerNameById","find","ScoreTable","players","promotion","onAddPlayer","results","getAllResultsByPlayerId","useCallback","reduce","acc","playerA","playerB","concat","status","parseInt","plus","minus","diff","pkt","result","useMemo","isEmpty","formId","m","w","r","p","brPlus","brMinus","brDiff","resultList","playerResult","filter","orderBy","console","log","TableContainer","Table","TableHead","TableRow","align","width","TableBody","index","style","backgroundColor","green","red","component","scope","ScoreRow","control","typeOfWin","useState","teamAOpen","setTeamAOpen","teamBOpen","setTeamBOpen","handleTeamAClose","handleTeamBClose","teamA","useWatch","name","teamB","addMatch","teamAId","teamBId","forEach","range","match","with","TypeOfWin","otherwise","isDraw","Grid","container","wrap","item","xs","defaultValue","render","field","value","onChange","fieldState","error","TextField","inputProps","type","variant","placeholder","Box","Divider","TabPanel","children","other","role","hidden","Typography","schema","playerCount","tab","setTab","setOpen","modalIndex","setModalIndex","handleClickOpen","useForm","reset","handleSubmit","register","setValue","watch","useFieldArray","keyName","fields","update","append","prepend","remove","swap","move","resultsReplace","replace","results2","append2","insert","useEffect","useUpdateEffect","baseCombinations","combinations","resultsValues","handleClose","handlePick","compact","Paper","Tabs","event","newValue","Tab","label","ButtonGroup","Button","Alert","severity","startIcon","StopCircle","PlayCircleFilledWhite"],"sourceRoot":""}