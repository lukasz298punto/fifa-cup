{"version":3,"file":"static/js/208.d7cc32f8.chunk.js","mappings":"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","sources":["components/TabPanel/TabPanel.tsx","components/PlayerPicker/PlayerPicker.tsx","components/RoundAddButton/RoundAddButton.tsx","components/ScoreTable/ScoreTable.tsx","components/ScoreTable/ScoreRow.tsx","Modules/Tournament/Group.tsx","Modules/Tournament/GroupsPhase.tsx","Modules/Tournament/CupPhase.tsx","pages/TournamentDetail.tsx"],"sourcesContent":["import { Box } from '@mui/system';\r\nimport clsx from 'clsx';\r\n\r\ntype TabPanelProps = {\r\n    children?: React.ReactNode;\r\n    index: string;\r\n    value: string;\r\n    className?: string;\r\n};\r\n\r\nfunction TabPanel({ children, value, index, className }: TabPanelProps) {\r\n    return (\r\n        <div className={clsx(value !== index && 'hidden')}>\r\n            <Box className={className}>{children}</Box>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TabPanel;\r\n","import PersonIcon from '@mui/icons-material/Person';\r\nimport Avatar from '@mui/material/Avatar';\r\nimport { blue } from '@mui/material/colors';\r\nimport Dialog from '@mui/material/Dialog';\r\nimport DialogTitle from '@mui/material/DialogTitle';\r\nimport List from '@mui/material/List';\r\nimport ListItem from '@mui/material/ListItem';\r\nimport ListItemAvatar from '@mui/material/ListItemAvatar';\r\nimport ListItemText from '@mui/material/ListItemText';\r\nimport { Loading } from 'components/Loading';\r\nimport { useActivePlayerListQuery } from 'hooks';\r\nimport { includes, map } from 'lodash';\r\nimport 'lodash.combinations';\r\nimport React from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { Fn, Player } from 'types/global';\r\n\r\ntype Props = {\r\n    onClose: Fn;\r\n    onPick: (player: Player) => void;\r\n    disabledPlayers?: string[];\r\n    open: boolean;\r\n};\r\n\r\nfunction PlayerPicker({ onClose, onPick, disabledPlayers, open }: Props) {\r\n    const { data, isLoading } = useActivePlayerListQuery();\r\n    const { t } = useTranslation();\r\n\r\n    return (\r\n        <Dialog onClose={onClose} open={open}>\r\n            <Loading loading={isLoading}>\r\n                <DialogTitle>{t(`Wybierz zawodnika`)}</DialogTitle>\r\n                <List sx={{ pt: 0 }}>\r\n                    {map(data?.docs, (docSnapshot) => {\r\n                        const player = docSnapshot.data();\r\n\r\n                        return (\r\n                            <ListItem\r\n                                disabled={includes(disabledPlayers, docSnapshot.id)}\r\n                                button\r\n                                onClick={() => onPick({ ...player, id: docSnapshot.id })}\r\n                                key={docSnapshot.id}\r\n                            >\r\n                                <ListItemAvatar>\r\n                                    <Avatar sx={{ bgcolor: blue[100], color: blue[600] }}>\r\n                                        <PersonIcon />\r\n                                    </Avatar>\r\n                                </ListItemAvatar>\r\n                                <ListItemText primary={player.firstName + ' ' + player.lastName} />\r\n                            </ListItem>\r\n                        );\r\n                    })}\r\n                </List>\r\n            </Loading>\r\n        </Dialog>\r\n    );\r\n}\r\nexport default React.memo(PlayerPicker);\r\n","import { IconButton, IconButtonTypeMap } from '@mui/material';\r\nimport AddCircleIcon from '@mui/icons-material/AddCircle';\r\n\r\ntype Props = {\r\n    onAdd: () => void;\r\n} & IconButtonTypeMap['props'];\r\n\r\nfunction RoundAddButton({ onAdd, ...props }: Props) {\r\n    return (\r\n        <IconButton className=\"p-0\" size=\"small\" color=\"primary\" onClick={onAdd} {...props}>\r\n            <AddCircleIcon />\r\n        </IconButton>\r\n    );\r\n}\r\nexport default RoundAddButton;\r\n","import AddCircleIcon from '@mui/icons-material/AddCircle';\r\nimport { IconButton } from '@mui/material';\r\nimport { green, red } from '@mui/material/colors';\r\nimport Table from '@mui/material/Table';\r\nimport TableBody from '@mui/material/TableBody';\r\nimport TableHead from '@mui/material/TableHead';\r\nimport TableRow from '@mui/material/TableRow';\r\nimport { RoundAddButton } from 'components/RoundAddButton';\r\nimport { TableContainer } from 'components/TableContainer';\r\nimport { matchStatus } from 'constants/global';\r\nimport { findPlayerNameById, getMatchStatus, getPkt } from 'helpers/global';\r\nimport { useActivePlayerListQuery } from 'hooks';\r\nimport { concat, filter, isEmpty, map, orderBy, reduce, size } from 'lodash';\r\nimport 'lodash.combinations';\r\nimport React, { useCallback, useMemo } from 'react';\r\nimport { FieldArrayWithId } from 'react-hook-form';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { TableCell } from 'style/components';\r\nimport { Player, Result, TournamentSchema } from 'types/global';\r\n\r\ntype ScoreResult = {\r\n    formId: string;\r\n    id: string;\r\n    pkt: number;\r\n    m: number;\r\n    w: number;\r\n    r: number;\r\n    p: number;\r\n    brPlus: number;\r\n    brMinus: number;\r\n    brDiff: number;\r\n};\r\n\r\ntype Props = {\r\n    players: (Omit<Player, 'active'> & { formId: string })[];\r\n    results: Result[];\r\n    promotion: number;\r\n    onAddPlayer: (index: number) => void;\r\n    className?: string;\r\n};\r\n\r\ntype MatchResult = {\r\n    status: keyof typeof matchStatus;\r\n    plus: number;\r\n    minus: number;\r\n    diff: number;\r\n    pkt: number;\r\n};\r\n\r\nfunction ScoreTable({ players, promotion, onAddPlayer, results, className }: Props) {\r\n    const { t } = useTranslation();\r\n    const { data } = useActivePlayerListQuery();\r\n\r\n    const getAllResultsByPlayerId = useCallback(\r\n        (id: string) =>\r\n            reduce(\r\n                results,\r\n                (acc: MatchResult[], { playerA, playerB }) => {\r\n                    if (playerA.score && playerB.score) {\r\n                        if (playerA.id === id) {\r\n                            return concat(acc, {\r\n                                status: getMatchStatus(\r\n                                    parseInt(playerA.score) - parseInt(playerB.score)\r\n                                ),\r\n                                plus: parseInt(playerA.score),\r\n                                minus: parseInt(playerB.score),\r\n                                diff: parseInt(playerA.score) - parseInt(playerB.score),\r\n                                pkt: getPkt(parseInt(playerA.score) - parseInt(playerB.score)),\r\n                            });\r\n                        }\r\n\r\n                        if (playerB.id === id) {\r\n                            return concat(acc, {\r\n                                status: getMatchStatus(\r\n                                    parseInt(playerB.score) - parseInt(playerA.score)\r\n                                ),\r\n                                plus: parseInt(playerB.score),\r\n                                minus: parseInt(playerA.score),\r\n                                diff: parseInt(playerB.score) - parseInt(playerA.score),\r\n                                pkt: getPkt(parseInt(playerB.score) - parseInt(playerA.score)),\r\n                            });\r\n                        }\r\n                    }\r\n\r\n                    return acc;\r\n                },\r\n                []\r\n            ),\r\n        [results]\r\n    );\r\n\r\n    const result = useMemo<ScoreResult[]>(() => {\r\n        if (isEmpty(results)) {\r\n            return map(players, (player) => ({\r\n                formId: player.formId,\r\n                id: player.id || '',\r\n                pkt: 0,\r\n                m: 0,\r\n                w: 0,\r\n                r: 0,\r\n                p: 0,\r\n                brPlus: 0,\r\n                brMinus: 0,\r\n                brDiff: 0,\r\n            }));\r\n        }\r\n\r\n        const resultList = map(players, (player) => {\r\n            const playerResult = getAllResultsByPlayerId(player.id as string);\r\n\r\n            return {\r\n                formId: player.formId,\r\n                id: player.id || '',\r\n                pkt: reduce(playerResult, (acc, { pkt }) => acc + pkt, 0),\r\n                m: size(playerResult),\r\n                w: size(filter(playerResult, { status: matchStatus.W })),\r\n                r: size(filter(playerResult, { status: matchStatus.D })),\r\n                p: size(filter(playerResult, { status: matchStatus.L })),\r\n                brPlus: reduce(playerResult, (acc, { plus }) => acc + plus, 0),\r\n                brMinus: reduce(playerResult, (acc, { minus }) => acc + minus, 0),\r\n                brDiff: reduce(playerResult, (acc, { diff }) => acc + diff, 0),\r\n            };\r\n        });\r\n\r\n        return orderBy(resultList, ['pkt', 'brDiff', 'brPlus'], ['desc', 'desc', 'desc']);\r\n    }, [results, players, getAllResultsByPlayerId]);\r\n\r\n    return (\r\n        <TableContainer className={className}>\r\n            <Table>\r\n                <TableHead>\r\n                    <TableRow>\r\n                        <TableCell align=\"left\">{t('Zawodnik')}</TableCell>\r\n                        <TableCell width={50} className=\"text-center\">\r\n                            {t('Pkt')}\r\n                        </TableCell>\r\n                        <TableCell width={50} className=\"text-center\">\r\n                            {t('M')}\r\n                        </TableCell>\r\n                        <TableCell width={50} className=\"text-center\">\r\n                            {t('W')}\r\n                        </TableCell>\r\n                        <TableCell width={50} className=\"text-center\">\r\n                            {t('R')}\r\n                        </TableCell>\r\n                        <TableCell width={50} className=\"text-center\">\r\n                            {t('P')}\r\n                        </TableCell>\r\n                        <TableCell width={50} className=\"text-center\">\r\n                            {t('Br+')}\r\n                        </TableCell>\r\n                        <TableCell width={50} className=\"text-center\">\r\n                            {t('Br-')}\r\n                        </TableCell>\r\n                        <TableCell width={50} className=\"text-center\">\r\n                            {t('+/-')}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {map(\r\n                        result,\r\n                        ({ formId, id, pkt, m, w, r, p, brPlus, brMinus, brDiff }, index) => (\r\n                            <TableRow\r\n                                key={formId}\r\n                                style={{\r\n                                    backgroundColor: promotion > index ? green[100] : red[100],\r\n                                }}\r\n                            >\r\n                                <TableCell component=\"th\" scope=\"row\">\r\n                                    {id ? (\r\n                                        findPlayerNameById(id, data?.docs)\r\n                                    ) : (\r\n                                        <RoundAddButton\r\n                                            onAdd={() => {\r\n                                                onAddPlayer(index);\r\n                                            }}\r\n                                        />\r\n                                    )}\r\n                                </TableCell>\r\n                                <TableCell\r\n                                    component=\"th\"\r\n                                    scope=\"row\"\r\n                                    className=\"text-center font-bold\"\r\n                                >\r\n                                    {pkt}\r\n                                </TableCell>\r\n                                <TableCell component=\"th\" scope=\"row\" className=\"text-center\">\r\n                                    {m}\r\n                                </TableCell>\r\n                                <TableCell component=\"th\" scope=\"row\" className=\"text-center\">\r\n                                    {w}\r\n                                </TableCell>\r\n                                <TableCell component=\"th\" scope=\"row\" className=\"text-center\">\r\n                                    {r}\r\n                                </TableCell>\r\n                                <TableCell component=\"th\" scope=\"row\" className=\"text-center\">\r\n                                    {p}\r\n                                </TableCell>\r\n                                <TableCell component=\"th\" scope=\"row\" className=\"text-center\">\r\n                                    {brPlus}\r\n                                </TableCell>\r\n                                <TableCell component=\"th\" scope=\"row\" className=\"text-center\">\r\n                                    {brMinus}\r\n                                </TableCell>\r\n                                <TableCell component=\"th\" scope=\"row\" className=\"text-center\">\r\n                                    {brDiff}\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        )\r\n                    )}\r\n                </TableBody>\r\n            </Table>\r\n        </TableContainer>\r\n    );\r\n}\r\nexport default React.memo(ScoreTable);\r\n","import { Alert, Button, ButtonGroup, Divider, Grid, Paper, TextField } from '@mui/material';\r\nimport Box from '@mui/material/Box';\r\nimport Tab from '@mui/material/Tab';\r\nimport Tabs from '@mui/material/Tabs';\r\nimport Typography from '@mui/material/Typography';\r\nimport { PlayerPicker } from 'components/PlayerPicker';\r\nimport { RoundAddButton } from 'components/RoundAddButton';\r\nimport { ScoreTable } from 'components/ScoreTable';\r\nimport { findPlayerNameById, parseInputNumber } from 'helpers/global';\r\nimport { useActivePlayerListQuery } from 'hooks';\r\nimport { combinations, compact, filter, forEach, isEmpty, map, range } from 'lodash';\r\nimport 'lodash.combinations';\r\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\r\nimport {\r\n    Control,\r\n    Controller,\r\n    useFieldArray,\r\n    UseFieldArrayInsert,\r\n    useForm,\r\n    useWatch,\r\n} from 'react-hook-form';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { useUpdateEffect } from 'react-use';\r\nimport { Fn, Player, PlayerResult, Result, TournamentSchema, TypeOfWin } from 'types/global';\r\nimport { match, P } from 'ts-pattern';\r\n\r\ntype FormResult = Result & { formId: string };\r\n\r\ntype Props = {\r\n    control: Control<TournamentSchema, any>;\r\n    result: FormResult;\r\n    onAdd?: (result: Result) => void;\r\n    typeOfWin?: TypeOfWin;\r\n    disabledPlayers?: string[];\r\n    formName: any;\r\n};\r\n\r\nfunction ScoreRow({ control, result, onAdd, typeOfWin, disabledPlayers, formName }: Props) {\r\n    const { data } = useActivePlayerListQuery();\r\n    const { t } = useTranslation();\r\n    const [teamAOpen, setTeamAOpen] = useState(false);\r\n    const [teamBOpen, setTeamBOpen] = useState(false);\r\n\r\n    const handleTeamAClose = useCallback(() => {\r\n        setTeamAOpen(false);\r\n    }, []);\r\n\r\n    const handleTeamBClose = useCallback(() => {\r\n        setTeamBOpen(false);\r\n    }, []);\r\n\r\n    const getFormName = (name: string): any => `${formName}.${name}`;\r\n\r\n    const teamA = useWatch({\r\n        control,\r\n        name: getFormName('playerA'),\r\n    }) as PlayerResult;\r\n\r\n    const teamB = useWatch({\r\n        control,\r\n        name: getFormName('playerB'),\r\n    }) as PlayerResult;\r\n\r\n    const getCountOfMatches = () =>\r\n        match(typeOfWin)\r\n            .with(TypeOfWin.TwoMatch, () => 2)\r\n            .with(TypeOfWin.Best3, () => 3)\r\n            .with(TypeOfWin.Best5, () => 5)\r\n            .otherwise(() => 0);\r\n\r\n    const addMatch = (teamAId?: string, teamBId?: string) => {\r\n        if (teamAId && teamBId && onAdd) {\r\n            forEach(range(0, getCountOfMatches()), () => {\r\n                onAdd({\r\n                    playerA: { id: teamAId, score: '' },\r\n                    playerB: { id: teamBId, score: '' },\r\n                });\r\n            });\r\n        }\r\n    };\r\n\r\n    const isDraw = onAdd && teamA?.score && teamB?.score && teamA?.score === teamB?.score;\r\n    const disabled = !teamA?.id || !teamB?.id;\r\n\r\n    return (\r\n        <>\r\n            <Grid container className=\"py-1 items-center\" wrap=\"nowrap\">\r\n                <Grid item xs={5} className=\"flex justify-end items-center\">\r\n                    <Controller\r\n                        defaultValue={result.playerA.id}\r\n                        name={getFormName('playerA.id')}\r\n                        control={control}\r\n                        render={({ field: { value, onChange }, fieldState: { error } }) => (\r\n                            <span className=\"text-xs break-all\">\r\n                                {!value ? (\r\n                                    <>\r\n                                        <RoundAddButton\r\n                                            onAdd={() => {\r\n                                                setTeamAOpen(true);\r\n                                            }}\r\n                                        />\r\n                                        <PlayerPicker\r\n                                            onClose={handleTeamAClose}\r\n                                            open={teamAOpen}\r\n                                            onPick={(player) => {\r\n                                                onChange(player.id);\r\n                                                addMatch(player.id, teamB?.id);\r\n                                            }}\r\n                                            disabledPlayers={disabledPlayers}\r\n                                        />\r\n                                    </>\r\n                                ) : (\r\n                                    findPlayerNameById(value, data?.docs)\r\n                                )}\r\n                            </span>\r\n                        )}\r\n                    />\r\n                    {isDraw && (\r\n                        <Controller\r\n                            defaultValue={result.playerB.penaltyScore}\r\n                            name={getFormName('playerA.penaltyScore')}\r\n                            control={control}\r\n                            render={({ field: { onChange, value }, fieldState: { error } }) => (\r\n                                <TextField\r\n                                    disabled={disabled}\r\n                                    inputProps={{\r\n                                        className: 'p-1 text-center text-xs',\r\n                                    }}\r\n                                    value={value}\r\n                                    onChange={(e) => {\r\n                                        onChange(parseInputNumber(e.target.value));\r\n                                    }}\r\n                                    className=\"mx-1 w-10\"\r\n                                    size=\"small\"\r\n                                    type=\"number\"\r\n                                    variant=\"filled\"\r\n                                    placeholder={t('kr.')}\r\n                                />\r\n                            )}\r\n                        />\r\n                    )}\r\n                </Grid>\r\n                <Grid item>\r\n                    <Box className=\"flex flex-nowrap\">\r\n                        <Controller\r\n                            defaultValue={result.playerA.score}\r\n                            name={getFormName('playerA.score')}\r\n                            control={control}\r\n                            render={({ field: { onChange, value }, fieldState: { error } }) => (\r\n                                <TextField\r\n                                    disabled={disabled}\r\n                                    inputProps={{\r\n                                        className: 'p-1 text-center',\r\n                                    }}\r\n                                    value={value}\r\n                                    onChange={(e) => {\r\n                                        onChange(parseInputNumber(e.target.value));\r\n                                    }}\r\n                                    className=\"mx-1 w-10\"\r\n                                    size=\"small\"\r\n                                    type=\"number\"\r\n                                    variant=\"outlined\"\r\n                                />\r\n                            )}\r\n                        />\r\n                        :\r\n                        <>\r\n                            <Controller\r\n                                defaultValue={result.playerB.score}\r\n                                name={getFormName('playerB.score')}\r\n                                control={control}\r\n                                render={({ field: { onChange, value }, fieldState: { error } }) => (\r\n                                    <TextField\r\n                                        disabled={disabled}\r\n                                        inputProps={{\r\n                                            className: 'p-1 text-center',\r\n                                        }}\r\n                                        value={value}\r\n                                        onChange={(e) => {\r\n                                            onChange(parseInputNumber(e.target.value));\r\n                                        }}\r\n                                        className=\"mx-1 w-10\"\r\n                                        size=\"small\"\r\n                                        type=\"number\"\r\n                                        variant=\"outlined\"\r\n                                    />\r\n                                )}\r\n                            />\r\n                            {isDraw && (\r\n                                <Controller\r\n                                    defaultValue={result.playerB.penaltyScore}\r\n                                    name={getFormName('playerB.penaltyScore')}\r\n                                    control={control}\r\n                                    render={({\r\n                                        field: { onChange, value },\r\n                                        fieldState: { error },\r\n                                    }) => (\r\n                                        <TextField\r\n                                            disabled={disabled}\r\n                                            inputProps={{\r\n                                                className: 'p-1 text-center text-xs',\r\n                                            }}\r\n                                            value={value}\r\n                                            onChange={(e) => {\r\n                                                onChange(parseInputNumber(e.target.value));\r\n                                            }}\r\n                                            className=\"mx-1 w-10\"\r\n                                            size=\"small\"\r\n                                            type=\"number\"\r\n                                            variant=\"filled\"\r\n                                            placeholder={t('kr.')}\r\n                                        />\r\n                                    )}\r\n                                />\r\n                            )}\r\n                        </>\r\n                    </Box>\r\n                </Grid>\r\n                <Grid item className=\"flex justify-start items-center\" xs={5}>\r\n                    <Controller\r\n                        defaultValue={result.playerB.id}\r\n                        name={getFormName('playerB.id')}\r\n                        control={control}\r\n                        render={({ field: { value, onChange }, fieldState: { error } }) => (\r\n                            <span className=\"text-xs break-all\">\r\n                                {!value ? (\r\n                                    <>\r\n                                        <RoundAddButton\r\n                                            onAdd={() => {\r\n                                                setTeamBOpen(true);\r\n                                            }}\r\n                                        />\r\n                                        <PlayerPicker\r\n                                            onClose={handleTeamBClose}\r\n                                            open={teamBOpen}\r\n                                            onPick={(player) => {\r\n                                                onChange(player.id);\r\n                                                addMatch(teamA?.id, player.id);\r\n                                            }}\r\n                                            disabledPlayers={disabledPlayers}\r\n                                        />\r\n                                    </>\r\n                                ) : (\r\n                                    findPlayerNameById(value, data?.docs)\r\n                                )}\r\n                            </span>\r\n                        )}\r\n                    />\r\n                </Grid>\r\n            </Grid>\r\n            <Divider />\r\n        </>\r\n    );\r\n}\r\nexport default React.memo(ScoreRow);\r\n","import { Alert } from '@mui/material';\r\nimport Box from '@mui/material/Box';\r\nimport { PlayerPicker } from 'components/PlayerPicker';\r\nimport { ScoreRow, ScoreTable } from 'components/ScoreTable';\r\nimport { combinations, compact, concat, filter, isEmpty, map, range } from 'lodash';\r\nimport 'lodash.combinations';\r\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\r\nimport { Control, useFieldArray, useWatch } from 'react-hook-form';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { useUpdateEffect } from 'react-use';\r\nimport { Player, TournamentSchema, TypeOfWin } from 'types/global';\r\n\r\ntype Props = {\r\n    control: Control<TournamentSchema, any>;\r\n    typeOfWin: TypeOfWin;\r\n    promotion: any;\r\n    index: number;\r\n    phaseIndex: number;\r\n    playerCount: number;\r\n};\r\n\r\nfunction Group({ control, typeOfWin, promotion, index, phaseIndex, playerCount }: Props) {\r\n    const { t } = useTranslation();\r\n\r\n    const {\r\n        fields: players,\r\n        replace,\r\n        update,\r\n    } = useFieldArray({\r\n        control,\r\n        name: `phases.${phaseIndex}.groups.${index}.players`,\r\n        keyName: 'formId',\r\n    });\r\n    const { fields: results, replace: resultsReplace } = useFieldArray({\r\n        control,\r\n        name: `phases.${phaseIndex}.groups.${index}.results`,\r\n        keyName: 'formId',\r\n    });\r\n\r\n    const [modalIndex, setModalIndex] = useState<number | null>(null);\r\n    const handleClickOpen = useCallback((index: number) => {\r\n        setModalIndex(index);\r\n        setOpen(true);\r\n    }, []);\r\n\r\n    const [open, setOpen] = useState(false);\r\n\r\n    const handleClose = useCallback(() => {\r\n        setModalIndex(null);\r\n        setOpen(false);\r\n    }, []);\r\n\r\n    const disabledPlayers = useMemo(() => {\r\n        return compact(map(players, 'id'));\r\n    }, [players]);\r\n\r\n    const resultsValues = useWatch({\r\n        control,\r\n        name: `phases.${phaseIndex}.groups.${index}.results`,\r\n    });\r\n\r\n    const handlePick = useCallback(\r\n        (player: Player) => {\r\n            update(modalIndex as number, {\r\n                id: player.id,\r\n                firstName: player.firstName,\r\n                lastName: player.lastName,\r\n            });\r\n            handleClose();\r\n        },\r\n        [handleClose, modalIndex, update]\r\n    );\r\n\r\n    console.log(results, 'results');\r\n\r\n    useUpdateEffect(() => {\r\n        if (isEmpty(filter(players, (field) => !field.id)) && isEmpty(results)) {\r\n            const baseCombinations = map(combinations(players, 2), ([teamA, teamB]) => ({\r\n                playerA: { id: teamA.id || '', score: '' },\r\n                playerB: { id: teamB.id || '', score: '' },\r\n            }));\r\n\r\n            resultsReplace(\r\n                typeOfWin === TypeOfWin.TwoMatch\r\n                    ? concat(\r\n                          baseCombinations,\r\n                          map(baseCombinations, ({ playerA, playerB }) => ({\r\n                              playerA: playerB,\r\n                              playerB: playerA,\r\n                          }))\r\n                      )\r\n                    : baseCombinations\r\n            );\r\n        }\r\n    }, [players]);\r\n\r\n    // useEffect(() => {\r\n    //     replace(\r\n    //         map(range(0, playerCount), () => ({\r\n    //             id: '',\r\n    //             firstName: '',\r\n    //             lastName: '',\r\n    //         }))\r\n    //     );\r\n    // }, [playerCount, replace]);\r\n\r\n    return (\r\n        <>\r\n            <PlayerPicker\r\n                onClose={handleClose}\r\n                open={open}\r\n                onPick={handlePick}\r\n                disabledPlayers={disabledPlayers}\r\n            />\r\n            <ScoreTable\r\n                className=\"my-2\"\r\n                players={players}\r\n                onAddPlayer={handleClickOpen}\r\n                promotion={promotion}\r\n                results={resultsValues}\r\n            />\r\n            <Box>\r\n                {isEmpty(results) && (\r\n                    <Alert severity=\"info\" variant=\"standard\">\r\n                        {t('Wprowadź wszystkich graczy aby wygenerować terminarz')}\r\n                    </Alert>\r\n                )}\r\n                {map(\r\n                    results,\r\n                    (result, i) =>\r\n                        result.playerA.id &&\r\n                        result.playerB.id && (\r\n                            <ScoreRow\r\n                                key={result.formId}\r\n                                control={control}\r\n                                result={result}\r\n                                formName={`phases.${phaseIndex}.groups.${index}.results.${i}`}\r\n                            />\r\n                        )\r\n                )}\r\n            </Box>\r\n        </>\r\n    );\r\n}\r\nexport default React.memo(Group);\r\n","import { Button, ButtonGroup } from '@mui/material';\r\nimport { TabPanel } from 'components/TabPanel';\r\nimport { groupSymbol } from 'constants/global';\r\nimport { map } from 'lodash';\r\nimport React, { useState } from 'react';\r\nimport { Schema, TournamentSchema } from 'types/global';\r\nimport { useTranslation } from 'react-i18next';\r\nimport Group from './Group';\r\nimport { Control } from 'react-hook-form';\r\n\r\ntype Props = {\r\n    schema: Schema;\r\n    index: number;\r\n    control: Control<TournamentSchema, any>;\r\n};\r\n\r\nfunction GroupsPhase({ schema, index, control }: Props) {\r\n    const [tab, setTab] = useState('0');\r\n\r\n    const { t } = useTranslation();\r\n\r\n    const handleClick = (index: string) => {\r\n        setTab(index);\r\n    };\r\n\r\n    const phase = schema.phases[index];\r\n\r\n    return (\r\n        <>\r\n            <ButtonGroup variant=\"outlined\">\r\n                {map(phase.groups, (group, index) => (\r\n                    <Button\r\n                        key={index}\r\n                        variant={tab === String(index) ? 'contained' : 'outlined'}\r\n                        size=\"small\"\r\n                        onClick={() => handleClick(String(index))}\r\n                    >\r\n                        {t('Grupa')} {groupSymbol[index]}\r\n                    </Button>\r\n                ))}\r\n            </ButtonGroup>\r\n            {map(phase.groups, (group, i) => (\r\n                <TabPanel key={i} value={tab} index={String(i)}>\r\n                    <Group\r\n                        playerCount={group.playerCount}\r\n                        control={control}\r\n                        typeOfWin={phase.typeOfWin}\r\n                        promotion={group.promotion}\r\n                        index={i}\r\n                        phaseIndex={index}\r\n                    />\r\n                </TabPanel>\r\n            ))}\r\n        </>\r\n    );\r\n}\r\nexport default React.memo(GroupsPhase);\r\n","import { ScoreRow } from 'components/ScoreTable';\r\nimport { compact, flatMap, map, range } from 'lodash';\r\nimport React, { useCallback, useEffect, useMemo } from 'react';\r\nimport { Control, useFieldArray, useWatch } from 'react-hook-form';\r\nimport { Result, Schema, TournamentSchema } from 'types/global';\r\n\r\ntype Props = {\r\n    schema: Schema;\r\n    index: number;\r\n    control: Control<TournamentSchema, any>;\r\n};\r\n\r\nfunction CupPhase({ schema, index, control }: Props) {\r\n    const {\r\n        fields: results,\r\n        append,\r\n        replace,\r\n    } = useFieldArray({\r\n        control,\r\n        name: `phases.${index}.results`,\r\n        keyName: 'formId',\r\n    });\r\n\r\n    const phase = schema.phases[index];\r\n\r\n    const resultsValues = useWatch({\r\n        control,\r\n        name: `phases.${index}.results`,\r\n    });\r\n\r\n    // useEffect(() => {\r\n    //     console.log('replace-cup', phase.pairCount);\r\n    //     replace(\r\n    //         map(range(0, Number(phase.pairCount) || 0), () => ({\r\n    //             playerA: { id: '', score: '' },\r\n    //             playerB: { id: '', score: '' },\r\n    //         }))\r\n    //     );\r\n    // }, [phase.pairCount, replace]);\r\n\r\n    const handleOnAdd = useCallback(\r\n        (result: Result) => {\r\n            append(result);\r\n        },\r\n        [append]\r\n    );\r\n\r\n    const disabledPlayers = useMemo(() => {\r\n        return compact([\r\n            ...flatMap(resultsValues, 'playerA.id'),\r\n            ...flatMap(resultsValues, 'playerB.id'),\r\n        ]);\r\n    }, [resultsValues]);\r\n\r\n    console.log(results, 'results---222');\r\n\r\n    return (\r\n        <>\r\n            {map(results, (result, i) => (\r\n                <ScoreRow\r\n                    formName={`phases.${index}.results.${i}`}\r\n                    disabledPlayers={disabledPlayers}\r\n                    typeOfWin={phase.typeOfWin}\r\n                    control={control}\r\n                    result={result}\r\n                    key={result.formId}\r\n                    onAdd={handleOnAdd}\r\n                />\r\n            ))}\r\n        </>\r\n    );\r\n}\r\nexport default React.memo(CupPhase);\r\n","import {\r\n    Alert,\r\n    Button,\r\n    ButtonGroup,\r\n    CircularProgress,\r\n    Divider,\r\n    Grid,\r\n    Paper,\r\n    TextField,\r\n} from '@mui/material';\r\nimport Box from '@mui/material/Box';\r\nimport Tab from '@mui/material/Tab';\r\nimport Tabs from '@mui/material/Tabs';\r\nimport Typography from '@mui/material/Typography';\r\nimport { PlayerPicker } from 'components/PlayerPicker';\r\nimport { RoundAddButton } from 'components/RoundAddButton';\r\nimport { ScoreRow, ScoreTable } from 'components/ScoreTable';\r\nimport { findPlayerNameById } from 'helpers/global';\r\nimport { useActivePlayerListQuery, useSchemaQuery, useUpdateTournamentMutation } from 'hooks';\r\nimport { combinations, compact, concat, filter, isEmpty, map, range } from 'lodash';\r\nimport 'lodash.combinations';\r\nimport { useCallback, useEffect, useMemo, useState } from 'react';\r\nimport {\r\n    Controller,\r\n    SubmitErrorHandler,\r\n    SubmitHandler,\r\n    useFieldArray,\r\n    useForm,\r\n    useWatch,\r\n} from 'react-hook-form';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { useDebounce, useUpdateEffect } from 'react-use';\r\nimport { GroupStageType, Player, TournamentSchema, TypeOfWin } from 'types/global';\r\nimport SaveIcon from '@mui/icons-material/Save';\r\nimport PlayCircleFilledWhiteIcon from '@mui/icons-material/PlayCircleFilledWhite';\r\nimport StopCircleIcon from '@mui/icons-material/StopCircle';\r\nimport { useTournamentQuery } from 'hooks';\r\nimport { useParams } from 'react-router-dom';\r\nimport { Loading } from 'components/Loading';\r\nimport { CupPhase, GroupsPhase } from 'Modules/Tournament';\r\nimport { TabPanel } from 'components/TabPanel';\r\nimport { format } from 'date-fns';\r\nimport { dateTimeFormat } from 'constants/global';\r\n\r\nenum UpdateType {\r\n    End,\r\n    Update,\r\n    Start,\r\n}\r\n\r\nfunction TournamentDetail() {\r\n    const { id } = useParams<{ id: string }>();\r\n    const [tab, setTab] = useState('0');\r\n    const { mutate, isLoading } = useUpdateTournamentMutation(id as string);\r\n    const { t } = useTranslation();\r\n\r\n    const { data: tournamentData, isLoading: tournamentIsLoading } = useTournamentQuery(\r\n        id as string\r\n    );\r\n\r\n    const tournament = useMemo(() => {\r\n        return tournamentData?.data();\r\n    }, [tournamentData]);\r\n\r\n    console.log(tournament, 'tournamentData');\r\n\r\n    const { data: schemaData, isLoading: schemaIsLoading } = useSchemaQuery(tournament?.schemaId);\r\n\r\n    const schema = useMemo(() => {\r\n        return schemaData?.data();\r\n    }, [schemaData]);\r\n\r\n    const { control, handleSubmit, reset, register, setValue, watch } = useForm<TournamentSchema>();\r\n\r\n    const phases = useWatch({\r\n        control,\r\n        name: 'phases',\r\n    });\r\n\r\n    console.log(tournament, 'tournament');\r\n\r\n    useEffect(() => {\r\n        if (tournament && schema) {\r\n            if (tournament?.phases) {\r\n                reset(tournament);\r\n            } else {\r\n                reset({\r\n                    ...tournament,\r\n                    phases: map(schema?.phases, (phase) => {\r\n                        if (phase.isGroupStage === GroupStageType.GroupStage) {\r\n                            return {\r\n                                groups: map(phase?.groups, (group) => ({\r\n                                    players: map(range(0, group.playerCount), () => ({\r\n                                        id: '',\r\n                                        firstName: '',\r\n                                        lastName: '',\r\n                                    })),\r\n                                    results: [],\r\n                                })),\r\n                            };\r\n                        } else {\r\n                            return {\r\n                                results: map(range(0, Number(phase.pairCount) || 0), () => ({\r\n                                    playerA: { id: '', score: '' },\r\n                                    playerB: { id: '', score: '' },\r\n                                })),\r\n                            };\r\n                        }\r\n                    }),\r\n                });\r\n            }\r\n        }\r\n        return () => {\r\n            console.log('Noniec');\r\n        };\r\n    }, [reset, tournament, schema]);\r\n\r\n    const handleChange = (_: React.SyntheticEvent, newValue: string) => {\r\n        setTab(newValue);\r\n    };\r\n\r\n    const handleOnSubmit = useCallback(\r\n        (type: UpdateType = UpdateType.Update) =>\r\n            () => {\r\n                handleSubmit(\r\n                    async (data) => {\r\n                        mutate({\r\n                            ...data,\r\n                            startDate:\r\n                                type === UpdateType.Start\r\n                                    ? format(new Date(), dateTimeFormat)\r\n                                    : data.startDate,\r\n                            endDate:\r\n                                type === UpdateType.End\r\n                                    ? format(new Date(), dateTimeFormat)\r\n                                    : data.endDate,\r\n                        });\r\n                        console.log(data, 'data');\r\n                    },\r\n                    (data) => {\r\n                        console.log(data);\r\n                    }\r\n                )();\r\n            },\r\n        [handleSubmit, mutate]\r\n    );\r\n\r\n    useDebounce(\r\n        () => {\r\n            if (tournament && schema) {\r\n                handleOnSubmit()();\r\n            }\r\n            console.log('odpalamy');\r\n        },\r\n        3000,\r\n        [phases]\r\n    );\r\n\r\n    if (tournamentIsLoading || schemaIsLoading) {\r\n        return <CircularProgress size={24} />;\r\n    }\r\n\r\n    return (\r\n        <Paper>\r\n            <Tabs value={tab} onChange={handleChange} variant=\"scrollable\">\r\n                {map(schema?.phases, (value, index) => (\r\n                    <Tab label={value.name} value={String(index)} key={index} />\r\n                ))}\r\n            </Tabs>\r\n            {schema &&\r\n                map(schema?.phases, (value, index) => (\r\n                    <TabPanel value={tab} index={String(index)} className=\"p-3\" key={index}>\r\n                        {value.isGroupStage === GroupStageType.Cup ? (\r\n                            <CupPhase schema={schema} index={index} control={control} />\r\n                        ) : (\r\n                            <GroupsPhase schema={schema} index={index} control={control} />\r\n                        )}\r\n                    </TabPanel>\r\n                ))}\r\n            <Box className=\"px-6 pb-4\">\r\n                {tournament?.startDate && !tournament?.endDate && (\r\n                    <Button\r\n                        onClick={handleOnSubmit(UpdateType.End)}\r\n                        startIcon={<StopCircleIcon />}\r\n                        color=\"primary\"\r\n                        children={t('Zakończ turniej')}\r\n                    />\r\n                )}\r\n                {!tournament?.startDate && !tournament?.endDate && (\r\n                    <Button\r\n                        onClick={handleOnSubmit(UpdateType.Start)}\r\n                        startIcon={<PlayCircleFilledWhiteIcon />}\r\n                        color=\"primary\"\r\n                        children={t('Wystartuj turniej')}\r\n                    />\r\n                )}\r\n            </Box>\r\n        </Paper>\r\n    );\r\n}\r\nexport default TournamentDetail;\r\n"],"names":["children","value","index","className","clsx","PlayerPicker","onClose","onPick","disabledPlayers","open","useActivePlayerListQuery","data","isLoading","t","useTranslation","Dialog","Loading","loading","DialogTitle","List","sx","pt","map","docs","docSnapshot","player","ListItem","disabled","includes","id","button","onClick","ListItemAvatar","Avatar","bgcolor","blue","color","Person","ListItemText","primary","firstName","lastName","React","onAdd","props","IconButton","size","AddCircle","ScoreTable","players","promotion","onAddPlayer","results","getAllResultsByPlayerId","useCallback","reduce","acc","playerA","playerB","score","concat","status","getMatchStatus","parseInt","plus","minus","diff","pkt","getPkt","result","useMemo","isEmpty","formId","m","w","r","p","brPlus","brMinus","brDiff","resultList","playerResult","filter","matchStatus","orderBy","TableContainer","Table","TableHead","TableRow","align","width","TableBody","style","backgroundColor","green","red","component","scope","findPlayerNameById","ScoreRow","control","typeOfWin","formName","useState","teamAOpen","setTeamAOpen","teamBOpen","setTeamBOpen","handleTeamAClose","handleTeamBClose","getFormName","name","teamA","useWatch","teamB","addMatch","teamAId","teamBId","forEach","range","match","with","TypeOfWin","otherwise","isDraw","Grid","container","wrap","item","xs","defaultValue","render","field","onChange","fieldState","error","penaltyScore","TextField","inputProps","e","parseInputNumber","target","type","variant","placeholder","Box","Divider","Group","phaseIndex","playerCount","useFieldArray","keyName","fields","update","replace","resultsReplace","modalIndex","setModalIndex","handleClickOpen","setOpen","handleClose","compact","resultsValues","handlePick","console","log","useUpdateEffect","baseCombinations","combinations","Alert","severity","i","GroupsPhase","schema","tab","setTab","phase","phases","ButtonGroup","groups","group","Button","String","handleClick","groupSymbol","CupPhase","append","handleOnAdd","flatMap","UpdateType","useParams","useUpdateTournamentMutation","mutate","useTournamentQuery","tournamentData","tournamentIsLoading","tournament","useSchemaQuery","schemaId","schemaData","schemaIsLoading","useForm","handleSubmit","reset","register","setValue","watch","useEffect","isGroupStage","GroupStageType","Number","pairCount","handleOnSubmit","Update","startDate","Start","format","Date","dateTimeFormat","endDate","End","useDebounce","CircularProgress","Paper","Tabs","_","newValue","Tab","label","startIcon","StopCircle","PlayCircleFilledWhite"],"sourceRoot":""}