{"version":3,"file":"static/js/208.87967967.chunk.js","mappings":"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","sources":["components/TabPanel/TabPanel.tsx","components/PlayerPicker/PlayerPicker.tsx","components/RoundAddButton/RoundAddButton.tsx","components/ScoreTable/ScoreTable.tsx","components/ScoreTable/ScoreRow.tsx","Modules/Tournament/Group.tsx","Modules/Tournament/GroupsPhase.tsx","Modules/Tournament/CupPhase.tsx","pages/TournamentDetail.tsx"],"sourcesContent":["import { Box } from '@mui/system';\r\nimport clsx from 'clsx';\r\n\r\ntype TabPanelProps = {\r\n    children?: React.ReactNode;\r\n    index: string;\r\n    value: string;\r\n    className?: string;\r\n};\r\n\r\nfunction TabPanel({ children, value, index, className }: TabPanelProps) {\r\n    return (\r\n        <div className={clsx(value !== index && 'hidden')}>\r\n            <Box className={className}>{children}</Box>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TabPanel;\r\n","import PersonIcon from '@mui/icons-material/Person';\r\nimport Avatar from '@mui/material/Avatar';\r\nimport { blue } from '@mui/material/colors';\r\nimport Dialog from '@mui/material/Dialog';\r\nimport DialogTitle from '@mui/material/DialogTitle';\r\nimport List from '@mui/material/List';\r\nimport ListItem from '@mui/material/ListItem';\r\nimport ListItemAvatar from '@mui/material/ListItemAvatar';\r\nimport ListItemText from '@mui/material/ListItemText';\r\nimport { Loading } from 'components/Loading';\r\nimport { useActivePlayerListQuery } from 'hooks';\r\nimport { includes, map } from 'lodash';\r\nimport 'lodash.combinations';\r\nimport React from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { Fn, Player } from 'types/global';\r\n\r\ntype Props = {\r\n    onClose: Fn;\r\n    onPick: (player: Player) => void;\r\n    disabledPlayers?: string[];\r\n    open: boolean;\r\n};\r\n\r\nfunction PlayerPicker({ onClose, onPick, disabledPlayers, open }: Props) {\r\n    const { data, isLoading } = useActivePlayerListQuery();\r\n    const { t } = useTranslation();\r\n\r\n    return (\r\n        <Dialog onClose={onClose} open={open}>\r\n            <Loading loading={isLoading}>\r\n                <DialogTitle>{t(`Wybierz zawodnika`)}</DialogTitle>\r\n                <List sx={{ pt: 0 }}>\r\n                    {map(data?.docs, (docSnapshot) => {\r\n                        const player = docSnapshot.data();\r\n\r\n                        return (\r\n                            <ListItem\r\n                                disabled={includes(disabledPlayers, docSnapshot.id)}\r\n                                button\r\n                                onClick={() => onPick({ ...player, id: docSnapshot.id })}\r\n                                key={docSnapshot.id}\r\n                            >\r\n                                <ListItemAvatar>\r\n                                    <Avatar sx={{ bgcolor: blue[100], color: blue[600] }}>\r\n                                        <PersonIcon />\r\n                                    </Avatar>\r\n                                </ListItemAvatar>\r\n                                <ListItemText primary={player.firstName + ' ' + player.lastName} />\r\n                            </ListItem>\r\n                        );\r\n                    })}\r\n                </List>\r\n            </Loading>\r\n        </Dialog>\r\n    );\r\n}\r\nexport default React.memo(PlayerPicker);\r\n","import { IconButton, IconButtonTypeMap } from '@mui/material';\r\nimport AddCircleIcon from '@mui/icons-material/AddCircle';\r\n\r\ntype Props = {\r\n    onAdd: () => void;\r\n} & IconButtonTypeMap['props'];\r\n\r\nfunction RoundAddButton({ onAdd, ...props }: Props) {\r\n    return (\r\n        <IconButton className=\"p-0\" size=\"small\" color=\"primary\" onClick={onAdd} {...props}>\r\n            <AddCircleIcon />\r\n        </IconButton>\r\n    );\r\n}\r\nexport default RoundAddButton;\r\n","import { styled } from '@mui/material/styles';\r\nimport { green, red } from '@mui/material/colors';\r\nimport Table from '@mui/material/Table';\r\nimport TableBody from '@mui/material/TableBody';\r\nimport TableHead from '@mui/material/TableHead';\r\nimport TableRow from '@mui/material/TableRow';\r\nimport { RoundAddButton } from 'components/RoundAddButton';\r\nimport { TableContainer } from 'components/TableContainer';\r\nimport { QueryDocumentSnapshot } from 'firebase/firestore';\r\nimport { getAllPlayersResults } from 'helpers/calculate';\r\nimport { findPlayerNameById } from 'helpers/global';\r\nimport { isEmpty, map } from 'lodash';\r\nimport 'lodash.combinations';\r\nimport React, { useMemo } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { TableCell as TableCellPrimary } from 'style/components';\r\nimport { Player, Result } from 'types/global';\r\nimport { tableCellClasses } from '@mui/material/TableCell';\r\n\r\ntype ScoreResult = {\r\n    id: string;\r\n    formId?: string;\r\n    pkt: number;\r\n    m: number;\r\n    w: number;\r\n    r: number;\r\n    p: number;\r\n    brPlus: number;\r\n    brMinus: number;\r\n    brDiff: number;\r\n};\r\n\r\nconst TableCell = styled(TableCellPrimary)(({ theme }) => ({\r\n    [`&.${tableCellClasses.head}`]: {\r\n        fontSize: 11,\r\n        padding: 6,\r\n    },\r\n    [`&.${tableCellClasses.body}`]: {\r\n        fontSize: 11,\r\n        padding: 6,\r\n    },\r\n}));\r\n\r\ntype Props = {\r\n    players: (Omit<Player, 'active'> & { formId: string })[];\r\n    results: Result[];\r\n    promotion: number;\r\n    onAddPlayer: (index: number) => void;\r\n    className?: string;\r\n    allActivePlayers: QueryDocumentSnapshot<Player>[] | undefined;\r\n};\r\n\r\nfunction ScoreTable({\r\n    players,\r\n    promotion,\r\n    onAddPlayer,\r\n    results,\r\n    className,\r\n    allActivePlayers,\r\n}: Props) {\r\n    const { t } = useTranslation();\r\n\r\n    const result = useMemo<ScoreResult[]>(() => {\r\n        if (isEmpty(results)) {\r\n            return map(players, (player) => ({\r\n                id: player.id || '',\r\n                pkt: 0,\r\n                m: 0,\r\n                w: 0,\r\n                r: 0,\r\n                p: 0,\r\n                brPlus: 0,\r\n                brMinus: 0,\r\n                brDiff: 0,\r\n            }));\r\n        }\r\n\r\n        return getAllPlayersResults(map(players, 'id'), results);\r\n    }, [results, players]);\r\n\r\n    return (\r\n        <TableContainer className={className}>\r\n            <Table>\r\n                <TableHead>\r\n                    <TableRow>\r\n                        <TableCell align=\"left\">{t('Zawodnik')}</TableCell>\r\n                        <TableCell width={50} className=\"text-center\">\r\n                            {t('Pkt')}\r\n                        </TableCell>\r\n                        <TableCell width={50} className=\"text-center\">\r\n                            {t('M')}\r\n                        </TableCell>\r\n                        <TableCell width={50} className=\"text-center\">\r\n                            {t('W')}\r\n                        </TableCell>\r\n                        <TableCell width={50} className=\"text-center\">\r\n                            {t('R')}\r\n                        </TableCell>\r\n                        <TableCell width={50} className=\"text-center\">\r\n                            {t('P')}\r\n                        </TableCell>\r\n                        <TableCell width={50} className=\"text-center\">\r\n                            {t('Br+')}\r\n                        </TableCell>\r\n                        <TableCell width={50} className=\"text-center\">\r\n                            {t('Br-')}\r\n                        </TableCell>\r\n                        <TableCell width={50} className=\"text-center\">\r\n                            {t('+/-')}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {map(result, ({ id, pkt, m, w, r, p, brPlus, brMinus, brDiff }, index) => (\r\n                        <TableRow\r\n                            key={id}\r\n                            style={{\r\n                                backgroundColor: promotion > index ? green[100] : red[100],\r\n                            }}\r\n                        >\r\n                            <TableCell component=\"th\" scope=\"row\">\r\n                                {id ? (\r\n                                    findPlayerNameById(id, allActivePlayers)\r\n                                ) : (\r\n                                    <RoundAddButton\r\n                                        onAdd={() => {\r\n                                            onAddPlayer(index);\r\n                                        }}\r\n                                    />\r\n                                )}\r\n                            </TableCell>\r\n                            <TableCell component=\"th\" scope=\"row\" className=\"text-center font-bold\">\r\n                                {pkt}\r\n                            </TableCell>\r\n                            <TableCell component=\"th\" scope=\"row\" className=\"text-center\">\r\n                                {m}\r\n                            </TableCell>\r\n                            <TableCell component=\"th\" scope=\"row\" className=\"text-center\">\r\n                                {w}\r\n                            </TableCell>\r\n                            <TableCell component=\"th\" scope=\"row\" className=\"text-center\">\r\n                                {r}\r\n                            </TableCell>\r\n                            <TableCell component=\"th\" scope=\"row\" className=\"text-center\">\r\n                                {p}\r\n                            </TableCell>\r\n                            <TableCell component=\"th\" scope=\"row\" className=\"text-center\">\r\n                                {brPlus}\r\n                            </TableCell>\r\n                            <TableCell component=\"th\" scope=\"row\" className=\"text-center\">\r\n                                {brMinus}\r\n                            </TableCell>\r\n                            <TableCell component=\"th\" scope=\"row\" className=\"text-center\">\r\n                                {brDiff}\r\n                            </TableCell>\r\n                        </TableRow>\r\n                    ))}\r\n                </TableBody>\r\n            </Table>\r\n        </TableContainer>\r\n    );\r\n}\r\nexport default React.memo(ScoreTable);\r\n","import RefreshIcon from '@mui/icons-material/Refresh';\r\nimport { Divider, Grid, IconButton, TextField } from '@mui/material';\r\nimport Box from '@mui/material/Box';\r\nimport { PlayerPicker } from 'components/PlayerPicker';\r\nimport { RoundAddButton } from 'components/RoundAddButton';\r\nimport { findPlayerNameById, parseInputNumber } from 'helpers/global';\r\nimport { useActivePlayerListQuery, useIsLogged } from 'hooks';\r\nimport { forEach, range } from 'lodash';\r\nimport 'lodash.combinations';\r\nimport React, { useCallback, useState } from 'react';\r\nimport { Control, Controller, useWatch } from 'react-hook-form';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { match } from 'ts-pattern';\r\nimport { PlayerResult, Result, TournamentSchema, TypeOfWin } from 'types/global';\r\n\r\ntype FormResult = Result & { formId: string };\r\n\r\ntype Props = {\r\n    control: Control<TournamentSchema, any>;\r\n    result: FormResult;\r\n    onAdd?: (result: Result) => void;\r\n    typeOfWin?: TypeOfWin;\r\n    disabledPlayers?: string[];\r\n    formName: any;\r\n    isGroup?: boolean;\r\n};\r\n\r\nfunction ScoreRow({\r\n    control,\r\n    result,\r\n    onAdd,\r\n    typeOfWin,\r\n    disabledPlayers,\r\n    formName,\r\n    isGroup = false,\r\n}: Props) {\r\n    const { data } = useActivePlayerListQuery();\r\n    const { t } = useTranslation();\r\n    const [teamAOpen, setTeamAOpen] = useState(false);\r\n    const [teamBOpen, setTeamBOpen] = useState(false);\r\n    const isLogged = useIsLogged();\r\n\r\n    const handleTeamAClose = useCallback(() => {\r\n        setTeamAOpen(false);\r\n    }, []);\r\n\r\n    const handleTeamBClose = useCallback(() => {\r\n        setTeamBOpen(false);\r\n    }, []);\r\n\r\n    const getFormName = (name: string): any => `${formName}.${name}`;\r\n\r\n    const teamA = useWatch({\r\n        control,\r\n        name: getFormName('playerA'),\r\n    }) as PlayerResult;\r\n\r\n    const teamB = useWatch({\r\n        control,\r\n        name: getFormName('playerB'),\r\n    }) as PlayerResult;\r\n\r\n    const getCountOfMatches = () =>\r\n        match(typeOfWin)\r\n            .with(TypeOfWin.TwoMatch, () => 1)\r\n            .otherwise(() => 0);\r\n\r\n    const addMatch = (teamAId?: string, teamBId?: string) => {\r\n        if (teamAId && teamBId && onAdd) {\r\n            forEach(range(0, getCountOfMatches()), () => {\r\n                onAdd({\r\n                    playerA: { id: teamAId, score: '' },\r\n                    playerB: { id: teamBId, score: '' },\r\n                });\r\n            });\r\n        }\r\n    };\r\n\r\n    const disabled = !teamA?.id || !teamB?.id;\r\n\r\n    return (\r\n        <>\r\n            <Grid container className=\"py-1 items-center\" wrap=\"nowrap\">\r\n                <Grid item xs={5} className=\"flex justify-end items-center\">\r\n                    <Controller\r\n                        defaultValue={result.playerA.id}\r\n                        name={getFormName('playerA.id')}\r\n                        control={control}\r\n                        render={({ field: { value, onChange } }) => (\r\n                            <span className=\"text-xs break-words text-right\">\r\n                                {!value && isLogged ? (\r\n                                    <>\r\n                                        <RoundAddButton\r\n                                            onAdd={() => {\r\n                                                setTeamAOpen(true);\r\n                                            }}\r\n                                        />\r\n                                        <PlayerPicker\r\n                                            onClose={handleTeamAClose}\r\n                                            open={teamAOpen}\r\n                                            onPick={(player) => {\r\n                                                onChange(player.id);\r\n                                                addMatch(player.id, teamB?.id);\r\n                                            }}\r\n                                            disabledPlayers={disabledPlayers}\r\n                                        />\r\n                                    </>\r\n                                ) : (\r\n                                    <span className=\"flex items-center\">\r\n                                        {!isGroup && isLogged && (\r\n                                            <>\r\n                                                <PlayerPicker\r\n                                                    onClose={handleTeamAClose}\r\n                                                    open={teamAOpen}\r\n                                                    onPick={(player) => {\r\n                                                        onChange(player.id);\r\n                                                        handleTeamAClose();\r\n                                                    }}\r\n                                                    disabledPlayers={disabledPlayers}\r\n                                                />\r\n                                                <IconButton\r\n                                                    className=\"p-0\"\r\n                                                    size=\"small\"\r\n                                                    color=\"primary\"\r\n                                                    onClick={() => {\r\n                                                        setTeamAOpen(true);\r\n                                                    }}\r\n                                                >\r\n                                                    <RefreshIcon />\r\n                                                </IconButton>\r\n                                            </>\r\n                                        )}\r\n                                        {findPlayerNameById(value, data?.docs)}\r\n                                    </span>\r\n                                )}\r\n                            </span>\r\n                        )}\r\n                    />\r\n                    {!isGroup && (\r\n                        <Controller\r\n                            defaultValue={result.playerB.penaltyScore || ''}\r\n                            name={getFormName('playerA.penaltyScore')}\r\n                            control={control}\r\n                            render={({ field: { onChange, value } }) =>\r\n                                isLogged ? (\r\n                                    <TextField\r\n                                        disabled={disabled}\r\n                                        inputProps={{\r\n                                            className: 'p-1 text-center text-xs',\r\n                                        }}\r\n                                        value={value}\r\n                                        onChange={(e) => {\r\n                                            onChange(parseInputNumber(e.target.value));\r\n                                        }}\r\n                                        className=\"mx-1 w-8\"\r\n                                        size=\"small\"\r\n                                        type=\"number\"\r\n                                        variant=\"filled\"\r\n                                        placeholder={t('kr.')}\r\n                                    />\r\n                                ) : (\r\n                                    <span className=\"text-xs ml-1 mb-[7px] -mr-[3px] opacity-15\">\r\n                                        {value}\r\n                                    </span>\r\n                                )\r\n                            }\r\n                        />\r\n                    )}\r\n                </Grid>\r\n                <Grid item>\r\n                    <Box className=\"flex flex-nowrap\">\r\n                        <Controller\r\n                            defaultValue={result.playerA.score}\r\n                            name={getFormName('playerA.score')}\r\n                            control={control}\r\n                            render={({ field: { onChange, value } }) =>\r\n                                isLogged ? (\r\n                                    <TextField\r\n                                        autoComplete=\"off\"\r\n                                        disabled={disabled}\r\n                                        inputProps={{\r\n                                            className: 'p-1 text-center',\r\n                                        }}\r\n                                        value={value}\r\n                                        onChange={(e) => {\r\n                                            onChange(parseInputNumber(e.target.value));\r\n                                        }}\r\n                                        className=\"mx-1 w-8\"\r\n                                        size=\"small\"\r\n                                        type=\"number\"\r\n                                        variant=\"outlined\"\r\n                                    />\r\n                                ) : (\r\n                                    <span className=\"mx-1 font-bold\">{value}</span>\r\n                                )\r\n                            }\r\n                        />\r\n                        :\r\n                        <>\r\n                            <Controller\r\n                                defaultValue={result.playerB.score}\r\n                                name={getFormName('playerB.score')}\r\n                                control={control}\r\n                                render={({ field: { onChange, value } }) =>\r\n                                    isLogged ? (\r\n                                        <TextField\r\n                                            autoComplete=\"off\"\r\n                                            disabled={disabled}\r\n                                            inputProps={{\r\n                                                className: 'p-1 text-center',\r\n                                            }}\r\n                                            value={value}\r\n                                            onChange={(e) => {\r\n                                                onChange(parseInputNumber(e.target.value));\r\n                                            }}\r\n                                            className=\"mx-1 w-8\"\r\n                                            size=\"small\"\r\n                                            type=\"number\"\r\n                                            variant=\"outlined\"\r\n                                        />\r\n                                    ) : (\r\n                                        <span className=\"mx-1 font-bold\">{value}</span>\r\n                                    )\r\n                                }\r\n                            />\r\n                        </>\r\n                    </Box>\r\n                </Grid>\r\n                <Grid item className=\"flex justify-start items-center\" xs={5}>\r\n                    {!isGroup && (\r\n                        <Controller\r\n                            defaultValue={result.playerB.penaltyScore || ''}\r\n                            name={getFormName('playerB.penaltyScore')}\r\n                            control={control}\r\n                            render={({ field: { onChange, value } }) =>\r\n                                isLogged ? (\r\n                                    <TextField\r\n                                        autoComplete=\"off\"\r\n                                        disabled={disabled}\r\n                                        inputProps={{\r\n                                            className: 'p-1 text-center text-xs',\r\n                                        }}\r\n                                        value={value}\r\n                                        onChange={(e) => {\r\n                                            onChange(parseInputNumber(e.target.value));\r\n                                        }}\r\n                                        className=\"mx-1 w-8\"\r\n                                        size=\"small\"\r\n                                        type=\"number\"\r\n                                        variant=\"filled\"\r\n                                        placeholder={t('kr.')}\r\n                                    />\r\n                                ) : (\r\n                                    <span className=\"text-xs mr-1 mb-[7px] -ml-[3px] opacity-15\">\r\n                                        {value}\r\n                                    </span>\r\n                                )\r\n                            }\r\n                        />\r\n                    )}\r\n                    <Controller\r\n                        defaultValue={result.playerB.id}\r\n                        name={getFormName('playerB.id')}\r\n                        control={control}\r\n                        render={({ field: { value, onChange } }) => (\r\n                            <span className=\"text-xs break-words\">\r\n                                {!value && isLogged ? (\r\n                                    <>\r\n                                        <RoundAddButton\r\n                                            onAdd={() => {\r\n                                                setTeamBOpen(true);\r\n                                            }}\r\n                                        />\r\n                                        <PlayerPicker\r\n                                            onClose={handleTeamBClose}\r\n                                            open={teamBOpen}\r\n                                            onPick={(player) => {\r\n                                                onChange(player.id);\r\n                                                addMatch(teamA?.id, player.id);\r\n                                            }}\r\n                                            disabledPlayers={disabledPlayers}\r\n                                        />\r\n                                    </>\r\n                                ) : (\r\n                                    <span className=\"flex items-center\">\r\n                                        {findPlayerNameById(value, data?.docs)}\r\n                                        {!isGroup && isLogged && (\r\n                                            <>\r\n                                                <PlayerPicker\r\n                                                    onClose={handleTeamBClose}\r\n                                                    open={teamBOpen}\r\n                                                    onPick={(player) => {\r\n                                                        onChange(player.id);\r\n                                                        handleTeamBClose();\r\n                                                    }}\r\n                                                    disabledPlayers={disabledPlayers}\r\n                                                />\r\n                                                <IconButton\r\n                                                    className=\"p-0\"\r\n                                                    size=\"small\"\r\n                                                    color=\"primary\"\r\n                                                    onClick={() => {\r\n                                                        setTeamBOpen(true);\r\n                                                    }}\r\n                                                >\r\n                                                    <RefreshIcon />\r\n                                                </IconButton>\r\n                                            </>\r\n                                        )}\r\n                                    </span>\r\n                                )}\r\n                            </span>\r\n                        )}\r\n                    />\r\n                </Grid>\r\n            </Grid>\r\n            <Divider />\r\n        </>\r\n    );\r\n}\r\nexport default React.memo(ScoreRow);\r\n","import { Alert, CircularProgress } from '@mui/material';\r\nimport Box from '@mui/material/Box';\r\nimport { PlayerPicker } from 'components/PlayerPicker';\r\nimport { ScoreRow, ScoreTable } from 'components/ScoreTable';\r\nimport { useActivePlayerListQuery } from 'hooks';\r\nimport { combinations, compact, concat, filter, isEmpty, map, shuffle } from 'lodash';\r\nimport 'lodash.combinations';\r\nimport React, { useCallback, useMemo, useState } from 'react';\r\nimport { Control, useFieldArray, useWatch } from 'react-hook-form';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { useUpdateEffect } from 'react-use';\r\nimport { Player, TournamentSchema, TypeOfWin } from 'types/global';\r\n\r\ntype Props = {\r\n    control: Control<TournamentSchema, any>;\r\n    typeOfWin: TypeOfWin;\r\n    promotion: any;\r\n    index: number;\r\n    phaseIndex: number;\r\n};\r\n\r\nfunction Group({ control, typeOfWin, promotion, index, phaseIndex }: Props) {\r\n    const { t } = useTranslation();\r\n    const { data, isLoading } = useActivePlayerListQuery();\r\n\r\n    const { fields: players, update } = useFieldArray({\r\n        control,\r\n        name: `phases.${phaseIndex}.groups.${index}.players`,\r\n        keyName: 'formId',\r\n    });\r\n    const { fields: results, replace: resultsReplace } = useFieldArray({\r\n        control,\r\n        name: `phases.${phaseIndex}.groups.${index}.results`,\r\n        keyName: 'formId',\r\n    });\r\n\r\n    const [modalIndex, setModalIndex] = useState<number | null>(null);\r\n    const handleClickOpen = useCallback((index: number) => {\r\n        setModalIndex(index);\r\n        setOpen(true);\r\n    }, []);\r\n\r\n    const [open, setOpen] = useState(false);\r\n\r\n    const handleClose = useCallback(() => {\r\n        setModalIndex(null);\r\n        setOpen(false);\r\n    }, []);\r\n\r\n    const disabledPlayers = useMemo(() => {\r\n        return compact(map(players, 'id'));\r\n    }, [players]);\r\n\r\n    const resultsValues = useWatch({\r\n        control,\r\n        name: `phases.${phaseIndex}.groups.${index}.results`,\r\n    });\r\n\r\n    const handlePick = useCallback(\r\n        (player: Player) => {\r\n            update(modalIndex as number, {\r\n                id: player.id,\r\n                firstName: player.firstName,\r\n                lastName: player.lastName,\r\n            });\r\n            handleClose();\r\n        },\r\n        [handleClose, modalIndex, update]\r\n    );\r\n\r\n    useUpdateEffect(() => {\r\n        if (isEmpty(filter(players, (field) => !field.id)) && isEmpty(results)) {\r\n            const baseCombinations = shuffle(\r\n                map(combinations(players, 2), ([teamA, teamB]) => ({\r\n                    playerA: { id: teamA.id || '', score: '' },\r\n                    playerB: { id: teamB.id || '', score: '' },\r\n                }))\r\n            );\r\n\r\n            resultsReplace(\r\n                typeOfWin === TypeOfWin.TwoMatch\r\n                    ? concat(\r\n                          baseCombinations,\r\n                          map(baseCombinations, ({ playerA, playerB }) => ({\r\n                              playerA: playerB,\r\n                              playerB: playerA,\r\n                          }))\r\n                      )\r\n                    : baseCombinations\r\n            );\r\n        }\r\n    }, [players]);\r\n\r\n    if (isLoading) {\r\n        return <CircularProgress size={24} className=\"mt-2\" />;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <PlayerPicker\r\n                onClose={handleClose}\r\n                open={open}\r\n                onPick={handlePick}\r\n                disabledPlayers={disabledPlayers}\r\n            />\r\n            <ScoreTable\r\n                allActivePlayers={data?.docs}\r\n                className=\"my-2\"\r\n                players={players}\r\n                onAddPlayer={handleClickOpen}\r\n                promotion={promotion}\r\n                results={resultsValues}\r\n            />\r\n            <Box>\r\n                {isEmpty(results) && (\r\n                    <Alert severity=\"info\" variant=\"standard\">\r\n                        {t('Wprowadź wszystkich graczy aby wygenerować terminarz')}\r\n                    </Alert>\r\n                )}\r\n                {map(\r\n                    results,\r\n                    (result, i) =>\r\n                        result.playerA.id &&\r\n                        result.playerB.id && (\r\n                            <ScoreRow\r\n                                isGroup\r\n                                key={result.formId}\r\n                                control={control}\r\n                                result={result}\r\n                                formName={`phases.${phaseIndex}.groups.${index}.results.${i}`}\r\n                            />\r\n                        )\r\n                )}\r\n            </Box>\r\n        </>\r\n    );\r\n}\r\nexport default React.memo(Group);\r\n","import { Button, ButtonGroup } from '@mui/material';\r\nimport { TabPanel } from 'components/TabPanel';\r\nimport { groupSymbol } from 'constants/global';\r\nimport { map } from 'lodash';\r\nimport React, { useState } from 'react';\r\nimport { Schema, TournamentSchema } from 'types/global';\r\nimport { useTranslation } from 'react-i18next';\r\nimport Group from './Group';\r\nimport { Control } from 'react-hook-form';\r\n\r\ntype Props = {\r\n    schema: Schema;\r\n    index: number;\r\n    control: Control<TournamentSchema, any>;\r\n};\r\n\r\nfunction GroupsPhase({ schema, index, control }: Props) {\r\n    const [tab, setTab] = useState('0');\r\n\r\n    const { t } = useTranslation();\r\n\r\n    const handleClick = (index: string) => {\r\n        setTab(index);\r\n    };\r\n\r\n    const phase = schema.phases[index];\r\n\r\n    return (\r\n        <>\r\n            <ButtonGroup variant=\"outlined\">\r\n                {map(phase.groups, (group, index) => (\r\n                    <Button\r\n                        key={index}\r\n                        variant={tab === String(index) ? 'contained' : 'outlined'}\r\n                        size=\"small\"\r\n                        onClick={() => handleClick(String(index))}\r\n                    >\r\n                        {t('Grupa')} {groupSymbol[index]}\r\n                    </Button>\r\n                ))}\r\n            </ButtonGroup>\r\n            {map(phase.groups, (group, i) => (\r\n                <TabPanel key={i} value={tab} index={String(i)}>\r\n                    <Group\r\n                        control={control}\r\n                        typeOfWin={phase.typeOfWin}\r\n                        promotion={group.promotion}\r\n                        index={i}\r\n                        phaseIndex={index}\r\n                    />\r\n                </TabPanel>\r\n            ))}\r\n        </>\r\n    );\r\n}\r\nexport default React.memo(GroupsPhase);\r\n","import { ScoreRow } from 'components/ScoreTable';\r\nimport { compact, flatMap, map, range } from 'lodash';\r\nimport React, { useCallback, useEffect, useMemo } from 'react';\r\nimport { Control, useFieldArray, useWatch } from 'react-hook-form';\r\nimport { Result, Schema, TournamentSchema } from 'types/global';\r\n\r\ntype Props = {\r\n    schema: Schema;\r\n    index: number;\r\n    control: Control<TournamentSchema, any>;\r\n};\r\n\r\nfunction CupPhase({ schema, index, control }: Props) {\r\n    const {\r\n        fields: results,\r\n        append,\r\n        replace,\r\n    } = useFieldArray({\r\n        control,\r\n        name: `phases.${index}.results`,\r\n        keyName: 'formId',\r\n    });\r\n\r\n    const phase = schema.phases[index];\r\n\r\n    const resultsValues = useWatch({\r\n        control,\r\n        name: `phases.${index}.results`,\r\n    });\r\n\r\n    const handleOnAdd = useCallback(\r\n        (result: Result) => {\r\n            append(result);\r\n        },\r\n        [append]\r\n    );\r\n\r\n    const disabledPlayers = useMemo(() => {\r\n        return compact([\r\n            ...flatMap(resultsValues, 'playerA.id'),\r\n            ...flatMap(resultsValues, 'playerB.id'),\r\n        ]);\r\n    }, [resultsValues]);\r\n\r\n    return (\r\n        <>\r\n            {map(results, (result, i) => (\r\n                <ScoreRow\r\n                    formName={`phases.${index}.results.${i}`}\r\n                    disabledPlayers={disabledPlayers}\r\n                    typeOfWin={phase.typeOfWin}\r\n                    control={control}\r\n                    result={result}\r\n                    key={result.formId}\r\n                    onAdd={handleOnAdd}\r\n                />\r\n            ))}\r\n        </>\r\n    );\r\n}\r\nexport default React.memo(CupPhase);\r\n","import EmojiEventsIcon from '@mui/icons-material/EmojiEvents';\r\nimport PlayCircleFilledWhiteIcon from '@mui/icons-material/PlayCircleFilledWhite';\r\nimport SaveIcon from '@mui/icons-material/Save';\r\nimport StopCircleIcon from '@mui/icons-material/StopCircle';\r\nimport { Button, CircularProgress, Paper } from '@mui/material';\r\nimport Box from '@mui/material/Box';\r\nimport Tab from '@mui/material/Tab';\r\nimport Tabs from '@mui/material/Tabs';\r\nimport { Loading } from 'components/Loading';\r\nimport { TabPanel } from 'components/TabPanel';\r\nimport { dateTimeFormat } from 'constants/global';\r\nimport { format } from 'date-fns';\r\nimport {\r\n    useIsLogged,\r\n    useSchemaQuery,\r\n    useTournamentQuery,\r\n    useUpdateTournamentMutation,\r\n} from 'hooks';\r\nimport { map, range } from 'lodash';\r\nimport 'lodash.combinations';\r\nimport { CupPhase, GroupsPhase } from 'Modules/Tournament';\r\nimport { useCallback, useEffect, useMemo, useState } from 'react';\r\nimport { useForm } from 'react-hook-form';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { useParams } from 'react-router-dom';\r\nimport { GroupStageType, TournamentSchema } from 'types/global';\r\n\r\nenum UpdateType {\r\n    End,\r\n    Update,\r\n    Start,\r\n}\r\n\r\nfunction TournamentDetail() {\r\n    const { id } = useParams<{ id: string }>();\r\n    const [tab, setTab] = useState('0');\r\n    const { mutate, isLoading } = useUpdateTournamentMutation(id as string);\r\n    const { t } = useTranslation();\r\n\r\n    const isLogged = useIsLogged();\r\n\r\n    const { data: tournamentData, isLoading: tournamentIsLoading } = useTournamentQuery(\r\n        id as string\r\n    );\r\n\r\n    const tournament = useMemo(() => {\r\n        return tournamentData?.data();\r\n    }, [tournamentData]);\r\n\r\n    const { data: schemaData, isLoading: schemaIsLoading } = useSchemaQuery(tournament?.schemaId);\r\n\r\n    const schema = useMemo(() => {\r\n        return schemaData?.data();\r\n    }, [schemaData]);\r\n\r\n    const { control, handleSubmit, reset } = useForm<TournamentSchema>();\r\n\r\n    useEffect(() => {\r\n        if (tournament && schema) {\r\n            if (tournament?.phases) {\r\n                reset(tournament);\r\n            } else {\r\n                reset({\r\n                    ...tournament,\r\n                    phases: map(schema?.phases, (phase) => {\r\n                        if (phase.isGroupStage === GroupStageType.GroupStage) {\r\n                            return {\r\n                                groups: map(phase?.groups, (group) => ({\r\n                                    players: map(range(0, group.playerCount), () => ({\r\n                                        id: '',\r\n                                        firstName: '',\r\n                                        lastName: '',\r\n                                    })),\r\n                                    results: [],\r\n                                })),\r\n                            };\r\n                        } else {\r\n                            return {\r\n                                results: map(range(0, Number(phase.pairCount) || 0), () => ({\r\n                                    playerA: { id: '', score: '' },\r\n                                    playerB: { id: '', score: '' },\r\n                                })),\r\n                            };\r\n                        }\r\n                    }),\r\n                });\r\n            }\r\n        }\r\n    }, [reset, tournament, schema]);\r\n\r\n    const handleChange = (_: React.SyntheticEvent, newValue: string) => {\r\n        setTab(newValue);\r\n    };\r\n\r\n    const handleOnSubmit = useCallback(\r\n        (type: UpdateType = UpdateType.Update) =>\r\n            () => {\r\n                handleSubmit(\r\n                    async (data) => {\r\n                        console.log(data);\r\n                        mutate({\r\n                            ...data,\r\n                            startDate:\r\n                                type === UpdateType.Start\r\n                                    ? format(new Date(), dateTimeFormat)\r\n                                    : data.startDate,\r\n                            endDate:\r\n                                type === UpdateType.End\r\n                                    ? format(new Date(), dateTimeFormat)\r\n                                    : data.endDate,\r\n                        });\r\n                        console.log(data, 'data');\r\n                    },\r\n                    (data) => {\r\n                        console.log(data);\r\n                    }\r\n                )();\r\n            },\r\n        [handleSubmit, mutate]\r\n    );\r\n\r\n    if (tournamentIsLoading || schemaIsLoading) {\r\n        return <CircularProgress size={24} />;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Box>\r\n                <EmojiEventsIcon className=\"text-xs mr-1\" />\r\n                <span className=\"text-xs\">{tournament?.name}</span>\r\n                {tournament?.endDate && <span className=\"text-xs ml-1\">({t('Zakończony')})</span>}\r\n            </Box>\r\n            <Paper>\r\n                <Tabs value={tab} onChange={handleChange} variant=\"scrollable\">\r\n                    {map(schema?.phases, (value, index) => (\r\n                        <Tab label={value.name} value={String(index)} key={index} />\r\n                    ))}\r\n                </Tabs>\r\n                {schema &&\r\n                    map(schema?.phases, (value, index) => (\r\n                        <TabPanel value={tab} index={String(index)} className=\"p-3\" key={index}>\r\n                            {value.isGroupStage === GroupStageType.Cup ? (\r\n                                <CupPhase schema={schema} index={index} control={control} />\r\n                            ) : (\r\n                                <GroupsPhase schema={schema} index={index} control={control} />\r\n                            )}\r\n                        </TabPanel>\r\n                    ))}\r\n                <Box className=\"px-6 pb-4 flex\">\r\n                    {isLogged && tournament?.startDate && !tournament?.endDate && (\r\n                        <Button\r\n                            onClick={handleOnSubmit(UpdateType.End)}\r\n                            startIcon={<StopCircleIcon />}\r\n                            color=\"primary\"\r\n                            children={t('Zakończ turniej')}\r\n                        />\r\n                    )}\r\n                    {isLogged && !tournament?.startDate && !tournament?.endDate && (\r\n                        <Button\r\n                            onClick={handleOnSubmit(UpdateType.Start)}\r\n                            startIcon={<PlayCircleFilledWhiteIcon />}\r\n                            color=\"primary\"\r\n                            children={t('Wystartuj turniej')}\r\n                        />\r\n                    )}\r\n                    {isLogged && (\r\n                        <Loading loading={isLoading}>\r\n                            <Button\r\n                                onClick={handleOnSubmit()}\r\n                                startIcon={<SaveIcon />}\r\n                                color=\"primary\"\r\n                                children={t('Zapisz zmiany')}\r\n                            />\r\n                        </Loading>\r\n                    )}\r\n                </Box>\r\n            </Paper>\r\n        </>\r\n    );\r\n}\r\nexport default TournamentDetail;\r\n"],"names":["children","value","index","className","clsx","PlayerPicker","onClose","onPick","disabledPlayers","open","useActivePlayerListQuery","data","isLoading","t","useTranslation","Dialog","Loading","loading","DialogTitle","List","sx","pt","map","docs","docSnapshot","player","ListItem","disabled","includes","id","button","onClick","ListItemAvatar","Avatar","bgcolor","blue","color","Person","ListItemText","primary","firstName","lastName","React","onAdd","props","IconButton","size","AddCircle","TableCell","styled","TableCellPrimary","theme","tableCellClasses","fontSize","padding","ScoreTable","players","promotion","onAddPlayer","results","allActivePlayers","result","useMemo","isEmpty","pkt","m","w","r","p","brPlus","brMinus","brDiff","getAllPlayersResults","TableContainer","Table","TableHead","TableRow","align","width","TableBody","style","backgroundColor","green","red","component","scope","findPlayerNameById","ScoreRow","control","typeOfWin","formName","isGroup","useState","teamAOpen","setTeamAOpen","teamBOpen","setTeamBOpen","isLogged","useIsLogged","handleTeamAClose","useCallback","handleTeamBClose","getFormName","name","teamA","useWatch","teamB","addMatch","teamAId","teamBId","forEach","range","match","with","TypeOfWin","otherwise","playerA","score","playerB","Grid","container","wrap","item","xs","defaultValue","render","field","onChange","Refresh","penaltyScore","TextField","inputProps","e","parseInputNumber","target","type","variant","placeholder","Box","autoComplete","Divider","Group","phaseIndex","useFieldArray","keyName","fields","update","resultsReplace","replace","modalIndex","setModalIndex","handleClickOpen","setOpen","handleClose","compact","resultsValues","handlePick","useUpdateEffect","filter","baseCombinations","shuffle","combinations","concat","CircularProgress","Alert","severity","i","formId","GroupsPhase","schema","tab","setTab","phase","phases","ButtonGroup","groups","group","Button","String","handleClick","groupSymbol","CupPhase","append","handleOnAdd","flatMap","UpdateType","useParams","useUpdateTournamentMutation","mutate","useTournamentQuery","tournamentData","tournamentIsLoading","tournament","useSchemaQuery","schemaId","schemaData","schemaIsLoading","useForm","handleSubmit","reset","useEffect","isGroupStage","GroupStageType","playerCount","Number","pairCount","handleOnSubmit","Update","console","log","startDate","Start","format","Date","dateTimeFormat","endDate","End","EmojiEvents","Paper","Tabs","_","newValue","Tab","label","startIcon","StopCircle","PlayCircleFilledWhite","Save"],"sourceRoot":""}