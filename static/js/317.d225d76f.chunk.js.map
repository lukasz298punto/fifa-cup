{"version":3,"file":"static/js/317.d225d76f.chunk.js","mappings":"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","sources":["components/TabPanel/TabPanel.tsx","components/PlayerPicker/PlayerPicker.tsx","components/RoundAddButton/RoundAddButton.tsx","helpers/global.ts","components/ScoreTable/ScoreTable.tsx","components/ScoreTable/ScoreRow.tsx","Modules/Tournament/Group.tsx","Modules/Tournament/GroupsPhase.tsx","Modules/Tournament/CupPhase.tsx","pages/TournamentDetail.tsx"],"sourcesContent":["import { Box } from '@mui/system';\r\nimport clsx from 'clsx';\r\n\r\ntype TabPanelProps = {\r\n    children?: React.ReactNode;\r\n    index: string;\r\n    value: string;\r\n    className?: string;\r\n};\r\n\r\nfunction TabPanel({ children, value, index, className }: TabPanelProps) {\r\n    return (\r\n        <div className={clsx(value !== index && 'hidden')}>\r\n            <Box className={className}>{children}</Box>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TabPanel;\r\n","import PersonIcon from '@mui/icons-material/Person';\r\nimport Avatar from '@mui/material/Avatar';\r\nimport { blue } from '@mui/material/colors';\r\nimport Dialog from '@mui/material/Dialog';\r\nimport DialogTitle from '@mui/material/DialogTitle';\r\nimport List from '@mui/material/List';\r\nimport ListItem from '@mui/material/ListItem';\r\nimport ListItemAvatar from '@mui/material/ListItemAvatar';\r\nimport ListItemText from '@mui/material/ListItemText';\r\nimport { Loading } from 'components/Loading';\r\nimport { useActivePlayerListQuery } from 'hooks';\r\nimport { includes, map } from 'lodash';\r\nimport 'lodash.combinations';\r\nimport React from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { Fn, Player } from 'types/global';\r\n\r\ntype Props = {\r\n    onClose: Fn;\r\n    onPick: (player: Player) => void;\r\n    disabledPlayers?: string[];\r\n    open: boolean;\r\n};\r\n\r\nfunction PlayerPicker({ onClose, onPick, disabledPlayers, open }: Props) {\r\n    const { data, isLoading } = useActivePlayerListQuery();\r\n    const { t } = useTranslation();\r\n\r\n    return (\r\n        <Dialog onClose={onClose} open={open}>\r\n            <Loading loading={isLoading}>\r\n                <DialogTitle>{t(`Wybierz zawodnika`)}</DialogTitle>\r\n                <List sx={{ pt: 0 }}>\r\n                    {map(data?.docs, (docSnapshot) => {\r\n                        const player = docSnapshot.data();\r\n\r\n                        return (\r\n                            <ListItem\r\n                                disabled={includes(disabledPlayers, docSnapshot.id)}\r\n                                button\r\n                                onClick={() => onPick({ ...player, id: docSnapshot.id })}\r\n                                key={docSnapshot.id}\r\n                            >\r\n                                <ListItemAvatar>\r\n                                    <Avatar sx={{ bgcolor: blue[100], color: blue[600] }}>\r\n                                        <PersonIcon />\r\n                                    </Avatar>\r\n                                </ListItemAvatar>\r\n                                <ListItemText primary={player.firstName + ' ' + player.lastName} />\r\n                            </ListItem>\r\n                        );\r\n                    })}\r\n                </List>\r\n            </Loading>\r\n        </Dialog>\r\n    );\r\n}\r\nexport default React.memo(PlayerPicker);\r\n","import { IconButton, IconButtonTypeMap } from '@mui/material';\r\nimport AddCircleIcon from '@mui/icons-material/AddCircle';\r\n\r\ntype Props = {\r\n    onAdd: () => void;\r\n} & IconButtonTypeMap['props'];\r\n\r\nfunction RoundAddButton({ onAdd, ...props }: Props) {\r\n    return (\r\n        <IconButton className=\"p-0\" size=\"small\" color=\"primary\" onClick={onAdd} {...props}>\r\n            <AddCircleIcon />\r\n        </IconButton>\r\n    );\r\n}\r\nexport default RoundAddButton;\r\n","import { matchStatus } from 'constants/global';\r\nimport { QueryDocumentSnapshot, QuerySnapshot } from 'firebase/firestore';\r\nimport { find } from 'lodash';\r\nimport { Player } from 'types/global';\r\n\r\nexport const getMatchStatus = (score: number) => {\r\n    if (score === 0) return matchStatus.D;\r\n\r\n    return score > 0 ? matchStatus.W : matchStatus.L;\r\n};\r\n\r\nexport const getPkt = (score: number) => {\r\n    if (score === 0) return 1;\r\n\r\n    return score > 0 ? 3 : 0;\r\n};\r\n\r\nexport const findPlayerNameById = (\r\n    id: string,\r\n    docs: QueryDocumentSnapshot<Player>[] | undefined\r\n) => {\r\n    if (!id) return;\r\n\r\n    const player = find(docs, { id: id })?.data();\r\n\r\n    return player?.firstName + ' ' + player?.lastName;\r\n};\r\n","import AddCircleIcon from '@mui/icons-material/AddCircle';\r\nimport { IconButton } from '@mui/material';\r\nimport { green, red } from '@mui/material/colors';\r\nimport Table from '@mui/material/Table';\r\nimport TableBody from '@mui/material/TableBody';\r\nimport TableHead from '@mui/material/TableHead';\r\nimport TableRow from '@mui/material/TableRow';\r\nimport { RoundAddButton } from 'components/RoundAddButton';\r\nimport { TableContainer } from 'components/TableContainer';\r\nimport { matchStatus } from 'constants/global';\r\nimport { findPlayerNameById, getMatchStatus, getPkt } from 'helpers/global';\r\nimport { useActivePlayerListQuery } from 'hooks';\r\nimport { concat, filter, isEmpty, map, orderBy, reduce, size } from 'lodash';\r\nimport 'lodash.combinations';\r\nimport React, { useCallback, useMemo } from 'react';\r\nimport { FieldArrayWithId } from 'react-hook-form';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { TableCell } from 'style/components';\r\nimport { Player, Result, TournamentSchema } from 'types/global';\r\n\r\ntype ScoreResult = {\r\n    formId: string;\r\n    id: string;\r\n    pkt: number;\r\n    m: number;\r\n    w: number;\r\n    r: number;\r\n    p: number;\r\n    brPlus: number;\r\n    brMinus: number;\r\n    brDiff: number;\r\n};\r\n\r\ntype Props = {\r\n    players: (Omit<Player, 'active'> & { formId: string })[];\r\n    results: Result[];\r\n    promotion: number;\r\n    onAddPlayer: (index: number) => void;\r\n    className?: string;\r\n};\r\n\r\ntype MatchResult = {\r\n    status: keyof typeof matchStatus;\r\n    plus: number;\r\n    minus: number;\r\n    diff: number;\r\n    pkt: number;\r\n};\r\n\r\nfunction ScoreTable({ players, promotion, onAddPlayer, results, className }: Props) {\r\n    const { t } = useTranslation();\r\n    const { data } = useActivePlayerListQuery();\r\n\r\n    const getAllResultsByPlayerId = useCallback(\r\n        (id: string) =>\r\n            reduce(\r\n                results,\r\n                (acc: MatchResult[], { playerA, playerB }) => {\r\n                    if (playerA.score && playerB.score) {\r\n                        if (playerA.id === id) {\r\n                            return concat(acc, {\r\n                                status: getMatchStatus(\r\n                                    parseInt(playerA.score) - parseInt(playerB.score)\r\n                                ),\r\n                                plus: parseInt(playerA.score),\r\n                                minus: parseInt(playerB.score),\r\n                                diff: parseInt(playerA.score) - parseInt(playerB.score),\r\n                                pkt: getPkt(parseInt(playerA.score) - parseInt(playerB.score)),\r\n                            });\r\n                        }\r\n\r\n                        if (playerB.id === id) {\r\n                            return concat(acc, {\r\n                                status: getMatchStatus(\r\n                                    parseInt(playerB.score) - parseInt(playerA.score)\r\n                                ),\r\n                                plus: parseInt(playerB.score),\r\n                                minus: parseInt(playerA.score),\r\n                                diff: parseInt(playerB.score) - parseInt(playerA.score),\r\n                                pkt: getPkt(parseInt(playerB.score) - parseInt(playerA.score)),\r\n                            });\r\n                        }\r\n                    }\r\n\r\n                    return acc;\r\n                },\r\n                []\r\n            ),\r\n        [results]\r\n    );\r\n\r\n    const result = useMemo<ScoreResult[]>(() => {\r\n        if (isEmpty(results)) {\r\n            return map(players, (player) => ({\r\n                formId: player.formId,\r\n                id: player.id || '',\r\n                pkt: 0,\r\n                m: 0,\r\n                w: 0,\r\n                r: 0,\r\n                p: 0,\r\n                brPlus: 0,\r\n                brMinus: 0,\r\n                brDiff: 0,\r\n            }));\r\n        }\r\n\r\n        const resultList = map(players, (player) => {\r\n            const playerResult = getAllResultsByPlayerId(player.id as string);\r\n\r\n            return {\r\n                formId: player.formId,\r\n                id: player.id || '',\r\n                pkt: reduce(playerResult, (acc, { pkt }) => acc + pkt, 0),\r\n                m: size(playerResult),\r\n                w: size(filter(playerResult, { status: matchStatus.W })),\r\n                r: size(filter(playerResult, { status: matchStatus.D })),\r\n                p: size(filter(playerResult, { status: matchStatus.L })),\r\n                brPlus: reduce(playerResult, (acc, { plus }) => acc + plus, 0),\r\n                brMinus: reduce(playerResult, (acc, { minus }) => acc + minus, 0),\r\n                brDiff: reduce(playerResult, (acc, { diff }) => acc + diff, 0),\r\n            };\r\n        });\r\n\r\n        return orderBy(resultList, ['pkt', 'brDiff', 'brPlus'], ['desc', 'desc', 'desc']);\r\n    }, [results, players, getAllResultsByPlayerId]);\r\n\r\n    return (\r\n        <TableContainer className={className}>\r\n            <Table>\r\n                <TableHead>\r\n                    <TableRow>\r\n                        <TableCell align=\"left\">{t('Zawodnik')}</TableCell>\r\n                        <TableCell width={50} className=\"text-center\">\r\n                            {t('Pkt')}\r\n                        </TableCell>\r\n                        <TableCell width={50} className=\"text-center\">\r\n                            {t('M')}\r\n                        </TableCell>\r\n                        <TableCell width={50} className=\"text-center\">\r\n                            {t('W')}\r\n                        </TableCell>\r\n                        <TableCell width={50} className=\"text-center\">\r\n                            {t('R')}\r\n                        </TableCell>\r\n                        <TableCell width={50} className=\"text-center\">\r\n                            {t('P')}\r\n                        </TableCell>\r\n                        <TableCell width={50} className=\"text-center\">\r\n                            {t('Br+')}\r\n                        </TableCell>\r\n                        <TableCell width={50} className=\"text-center\">\r\n                            {t('Br-')}\r\n                        </TableCell>\r\n                        <TableCell width={50} className=\"text-center\">\r\n                            {t('+/-')}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {map(\r\n                        result,\r\n                        ({ formId, id, pkt, m, w, r, p, brPlus, brMinus, brDiff }, index) => (\r\n                            <TableRow\r\n                                key={formId}\r\n                                style={{\r\n                                    backgroundColor: promotion > index ? green[100] : red[100],\r\n                                }}\r\n                            >\r\n                                <TableCell component=\"th\" scope=\"row\">\r\n                                    {id ? (\r\n                                        findPlayerNameById(id, data?.docs)\r\n                                    ) : (\r\n                                        <RoundAddButton\r\n                                            onAdd={() => {\r\n                                                onAddPlayer(index);\r\n                                            }}\r\n                                        />\r\n                                    )}\r\n                                </TableCell>\r\n                                <TableCell\r\n                                    component=\"th\"\r\n                                    scope=\"row\"\r\n                                    className=\"text-center font-bold\"\r\n                                >\r\n                                    {pkt}\r\n                                </TableCell>\r\n                                <TableCell component=\"th\" scope=\"row\" className=\"text-center\">\r\n                                    {m}\r\n                                </TableCell>\r\n                                <TableCell component=\"th\" scope=\"row\" className=\"text-center\">\r\n                                    {w}\r\n                                </TableCell>\r\n                                <TableCell component=\"th\" scope=\"row\" className=\"text-center\">\r\n                                    {r}\r\n                                </TableCell>\r\n                                <TableCell component=\"th\" scope=\"row\" className=\"text-center\">\r\n                                    {p}\r\n                                </TableCell>\r\n                                <TableCell component=\"th\" scope=\"row\" className=\"text-center\">\r\n                                    {brPlus}\r\n                                </TableCell>\r\n                                <TableCell component=\"th\" scope=\"row\" className=\"text-center\">\r\n                                    {brMinus}\r\n                                </TableCell>\r\n                                <TableCell component=\"th\" scope=\"row\" className=\"text-center\">\r\n                                    {brDiff}\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        )\r\n                    )}\r\n                </TableBody>\r\n            </Table>\r\n        </TableContainer>\r\n    );\r\n}\r\nexport default React.memo(ScoreTable);\r\n","import { Alert, Button, ButtonGroup, Divider, Grid, Paper, TextField } from '@mui/material';\r\nimport Box from '@mui/material/Box';\r\nimport Tab from '@mui/material/Tab';\r\nimport Tabs from '@mui/material/Tabs';\r\nimport Typography from '@mui/material/Typography';\r\nimport { PlayerPicker } from 'components/PlayerPicker';\r\nimport { RoundAddButton } from 'components/RoundAddButton';\r\nimport { ScoreTable } from 'components/ScoreTable';\r\nimport { findPlayerNameById } from 'helpers/global';\r\nimport { useActivePlayerListQuery } from 'hooks';\r\nimport { combinations, compact, filter, forEach, isEmpty, map, range } from 'lodash';\r\nimport 'lodash.combinations';\r\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\r\nimport {\r\n    Control,\r\n    Controller,\r\n    useFieldArray,\r\n    UseFieldArrayInsert,\r\n    useForm,\r\n    useWatch,\r\n} from 'react-hook-form';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { useUpdateEffect } from 'react-use';\r\nimport { Fn, Player, PlayerResult, Result, TournamentSchema, TypeOfWin } from 'types/global';\r\nimport { match, P } from 'ts-pattern';\r\n\r\ntype FormResult = Result & { formId: string };\r\n\r\ntype Props = {\r\n    control: Control<TournamentSchema, any>;\r\n    result: FormResult;\r\n    onAdd?: (result: Result) => void;\r\n    typeOfWin?: TypeOfWin;\r\n    disabledPlayers?: string[];\r\n    formName: any;\r\n};\r\n\r\nfunction ScoreRow({ control, result, onAdd, typeOfWin, disabledPlayers, formName }: Props) {\r\n    const { data } = useActivePlayerListQuery();\r\n    const { t } = useTranslation();\r\n    const [teamAOpen, setTeamAOpen] = useState(false);\r\n    const [teamBOpen, setTeamBOpen] = useState(false);\r\n\r\n    const handleTeamAClose = useCallback(() => {\r\n        setTeamAOpen(false);\r\n    }, []);\r\n\r\n    const handleTeamBClose = useCallback(() => {\r\n        setTeamBOpen(false);\r\n    }, []);\r\n\r\n    const getFormName = (name: string): any => `${formName}.${name}`;\r\n\r\n    const teamA = useWatch({\r\n        control,\r\n        name: getFormName('playerA'),\r\n    }) as PlayerResult;\r\n\r\n    const teamB = useWatch({\r\n        control,\r\n        name: getFormName('playerB'),\r\n    }) as PlayerResult;\r\n\r\n    const getCountOfMatches = () =>\r\n        match(typeOfWin)\r\n            .with(TypeOfWin.TwoMatch, () => 2)\r\n            .with(TypeOfWin.Best3, () => 3)\r\n            .with(TypeOfWin.Best5, () => 5)\r\n            .otherwise(() => 0);\r\n\r\n    const addMatch = (teamAId?: string, teamBId?: string) => {\r\n        if (teamAId && teamBId && onAdd) {\r\n            forEach(range(0, getCountOfMatches()), () => {\r\n                onAdd({\r\n                    playerA: { id: teamAId, score: '' },\r\n                    playerB: { id: teamBId, score: '' },\r\n                });\r\n            });\r\n        }\r\n    };\r\n\r\n    const isDraw = onAdd && teamA?.score && teamB?.score && teamA?.score === teamB?.score;\r\n    const disabled = !teamA?.id || !teamB?.id;\r\n\r\n    return (\r\n        <>\r\n            <Grid container className=\"py-1 items-center\" wrap=\"nowrap\">\r\n                <Grid item xs={5} className=\"flex justify-end items-center\">\r\n                    <Controller\r\n                        defaultValue={result.playerA.id}\r\n                        name={getFormName('playerA.id')}\r\n                        control={control}\r\n                        render={({ field: { value, onChange }, fieldState: { error } }) => (\r\n                            <span className=\"text-xs break-all\">\r\n                                {!value ? (\r\n                                    <>\r\n                                        <RoundAddButton\r\n                                            onAdd={() => {\r\n                                                setTeamAOpen(true);\r\n                                            }}\r\n                                        />\r\n                                        <PlayerPicker\r\n                                            onClose={handleTeamAClose}\r\n                                            open={teamAOpen}\r\n                                            onPick={(player) => {\r\n                                                onChange(player.id);\r\n                                                addMatch(player.id, teamB?.id);\r\n                                            }}\r\n                                            disabledPlayers={disabledPlayers}\r\n                                        />\r\n                                    </>\r\n                                ) : (\r\n                                    findPlayerNameById(value, data?.docs)\r\n                                )}\r\n                            </span>\r\n                        )}\r\n                    />\r\n                    {isDraw && (\r\n                        <Controller\r\n                            defaultValue={result.playerB.penaltyScore}\r\n                            name={getFormName('playerA.penaltyScore')}\r\n                            control={control}\r\n                            render={({ field, fieldState: { error } }) => (\r\n                                <TextField\r\n                                    disabled={disabled}\r\n                                    inputProps={{\r\n                                        className: 'p-1 text-center text-xs',\r\n                                    }}\r\n                                    {...field}\r\n                                    className=\"mx-1 w-10\"\r\n                                    size=\"small\"\r\n                                    type=\"number\"\r\n                                    variant=\"filled\"\r\n                                    placeholder={t('kr.')}\r\n                                />\r\n                            )}\r\n                        />\r\n                    )}\r\n                </Grid>\r\n                <Grid item>\r\n                    <Box className=\"flex flex-nowrap\">\r\n                        <Controller\r\n                            defaultValue={result.playerA.score}\r\n                            name={getFormName('playerA.score')}\r\n                            control={control}\r\n                            render={({ field, fieldState: { error } }) => (\r\n                                <TextField\r\n                                    disabled={disabled}\r\n                                    inputProps={{\r\n                                        className: 'p-1 text-center',\r\n                                    }}\r\n                                    {...field}\r\n                                    className=\"mx-1 w-10\"\r\n                                    size=\"small\"\r\n                                    type=\"number\"\r\n                                    variant=\"outlined\"\r\n                                />\r\n                            )}\r\n                        />\r\n                        :\r\n                        <>\r\n                            <Controller\r\n                                defaultValue={result.playerB.score}\r\n                                name={getFormName('playerB.score')}\r\n                                control={control}\r\n                                render={({ field, fieldState: { error } }) => (\r\n                                    <TextField\r\n                                        disabled={disabled}\r\n                                        inputProps={{\r\n                                            className: 'p-1 text-center',\r\n                                        }}\r\n                                        {...field}\r\n                                        className=\"mx-1 w-10\"\r\n                                        size=\"small\"\r\n                                        type=\"number\"\r\n                                        variant=\"outlined\"\r\n                                    />\r\n                                )}\r\n                            />\r\n                            {isDraw && (\r\n                                <Controller\r\n                                    defaultValue={result.playerB.penaltyScore}\r\n                                    name={getFormName('playerB.penaltyScore')}\r\n                                    control={control}\r\n                                    render={({ field, fieldState: { error } }) => (\r\n                                        <TextField\r\n                                            disabled={disabled}\r\n                                            inputProps={{\r\n                                                className: 'p-1 text-center text-xs',\r\n                                            }}\r\n                                            {...field}\r\n                                            className=\"mx-1 w-10\"\r\n                                            size=\"small\"\r\n                                            type=\"number\"\r\n                                            variant=\"filled\"\r\n                                            placeholder={t('kr.')}\r\n                                        />\r\n                                    )}\r\n                                />\r\n                            )}\r\n                        </>\r\n                    </Box>\r\n                </Grid>\r\n                <Grid item className=\"flex justify-start items-center\" xs={5}>\r\n                    <Controller\r\n                        defaultValue={result.playerB.id}\r\n                        name={getFormName('playerB.id')}\r\n                        control={control}\r\n                        render={({ field: { value, onChange }, fieldState: { error } }) => (\r\n                            <span className=\"text-xs break-all\">\r\n                                {!value ? (\r\n                                    <>\r\n                                        <RoundAddButton\r\n                                            onAdd={() => {\r\n                                                setTeamBOpen(true);\r\n                                            }}\r\n                                        />\r\n                                        <PlayerPicker\r\n                                            onClose={handleTeamBClose}\r\n                                            open={teamBOpen}\r\n                                            onPick={(player) => {\r\n                                                onChange(player.id);\r\n                                                addMatch(teamA?.id, player.id);\r\n                                            }}\r\n                                            disabledPlayers={disabledPlayers}\r\n                                        />\r\n                                    </>\r\n                                ) : (\r\n                                    findPlayerNameById(value, data?.docs)\r\n                                )}\r\n                            </span>\r\n                        )}\r\n                    />\r\n                </Grid>\r\n            </Grid>\r\n            <Divider />\r\n        </>\r\n    );\r\n}\r\nexport default React.memo(ScoreRow);\r\n","import { Alert } from '@mui/material';\r\nimport Box from '@mui/material/Box';\r\nimport { PlayerPicker } from 'components/PlayerPicker';\r\nimport { ScoreRow, ScoreTable } from 'components/ScoreTable';\r\nimport { combinations, compact, concat, filter, isEmpty, map, range } from 'lodash';\r\nimport 'lodash.combinations';\r\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\r\nimport { Control, useFieldArray, useWatch } from 'react-hook-form';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { useUpdateEffect } from 'react-use';\r\nimport { Player, TournamentSchema, TypeOfWin } from 'types/global';\r\n\r\ntype Props = {\r\n    control: Control<TournamentSchema, any>;\r\n    typeOfWin: TypeOfWin;\r\n    promotion: any;\r\n    index: number;\r\n    phaseIndex: number;\r\n    playerCount: number;\r\n};\r\n\r\nfunction Group({ control, typeOfWin, promotion, index, phaseIndex, playerCount }: Props) {\r\n    const { t } = useTranslation();\r\n\r\n    const {\r\n        fields: players,\r\n        replace,\r\n        update,\r\n    } = useFieldArray({\r\n        control,\r\n        name: `phases.${phaseIndex}.groups.${index}.players`,\r\n        keyName: 'formId',\r\n    });\r\n    const { fields: results, replace: resultsReplace } = useFieldArray({\r\n        control,\r\n        name: `phases.${phaseIndex}.groups.${index}.results`,\r\n        keyName: 'formId',\r\n    });\r\n\r\n    const [modalIndex, setModalIndex] = useState<number | null>(null);\r\n    const handleClickOpen = useCallback((index: number) => {\r\n        setModalIndex(index);\r\n        setOpen(true);\r\n    }, []);\r\n\r\n    const [open, setOpen] = useState(false);\r\n\r\n    const handleClose = useCallback(() => {\r\n        setModalIndex(null);\r\n        setOpen(false);\r\n    }, []);\r\n\r\n    const disabledPlayers = useMemo(() => {\r\n        return compact(map(players, 'id'));\r\n    }, [players]);\r\n\r\n    const resultsValues = useWatch({\r\n        control,\r\n        name: `phases.${phaseIndex}.groups.${index}.results`,\r\n    });\r\n\r\n    const handlePick = useCallback(\r\n        (player: Player) => {\r\n            update(modalIndex as number, {\r\n                id: player.id,\r\n                firstName: player.firstName,\r\n                lastName: player.lastName,\r\n            });\r\n            handleClose();\r\n        },\r\n        [handleClose, modalIndex, update]\r\n    );\r\n\r\n    useUpdateEffect(() => {\r\n        if (isEmpty(filter(players, (field) => !field.id))) {\r\n            const baseCombinations = map(combinations(players, 2), ([teamA, teamB]) => ({\r\n                playerA: { id: teamA.id || '', score: '' },\r\n                playerB: { id: teamB.id || '', score: '' },\r\n            }));\r\n\r\n            resultsReplace(\r\n                typeOfWin === TypeOfWin.TwoMatch\r\n                    ? concat(\r\n                          baseCombinations,\r\n                          map(baseCombinations, ({ playerA, playerB }) => ({\r\n                              playerA: playerB,\r\n                              playerB: playerA,\r\n                          }))\r\n                      )\r\n                    : baseCombinations\r\n            );\r\n        }\r\n    }, [players]);\r\n\r\n    // useEffect(() => {\r\n    //     replace(\r\n    //         map(range(0, playerCount), () => ({\r\n    //             id: '',\r\n    //             firstName: '',\r\n    //             lastName: '',\r\n    //         }))\r\n    //     );\r\n    // }, [playerCount, replace]);\r\n\r\n    return (\r\n        <>\r\n            <PlayerPicker\r\n                onClose={handleClose}\r\n                open={open}\r\n                onPick={handlePick}\r\n                disabledPlayers={disabledPlayers}\r\n            />\r\n            <ScoreTable\r\n                className=\"my-2\"\r\n                players={players}\r\n                onAddPlayer={handleClickOpen}\r\n                promotion={promotion}\r\n                results={resultsValues}\r\n            />\r\n            <Box>\r\n                {isEmpty(results) && (\r\n                    <Alert severity=\"info\" variant=\"standard\">\r\n                        {t('Wprowadź wszystkich graczy aby wygenerować terminarz')}\r\n                    </Alert>\r\n                )}\r\n                {map(\r\n                    results,\r\n                    (result, i) =>\r\n                        result.playerA.id &&\r\n                        result.playerB.id && (\r\n                            <ScoreRow\r\n                                key={result.formId}\r\n                                control={control}\r\n                                result={result}\r\n                                formName={`phases.${phaseIndex}.groups.${index}.results.${i}`}\r\n                            />\r\n                        )\r\n                )}\r\n            </Box>\r\n        </>\r\n    );\r\n}\r\nexport default React.memo(Group);\r\n","import { Button, ButtonGroup } from '@mui/material';\r\nimport { TabPanel } from 'components/TabPanel';\r\nimport { groupSymbol } from 'constants/global';\r\nimport { map } from 'lodash';\r\nimport React, { useState } from 'react';\r\nimport { Schema, TournamentSchema } from 'types/global';\r\nimport { useTranslation } from 'react-i18next';\r\nimport Group from './Group';\r\nimport { Control } from 'react-hook-form';\r\n\r\ntype Props = {\r\n    schema: Schema;\r\n    index: number;\r\n    control: Control<TournamentSchema, any>;\r\n};\r\n\r\nfunction GroupsPhase({ schema, index, control }: Props) {\r\n    const [tab, setTab] = useState('0');\r\n\r\n    const { t } = useTranslation();\r\n\r\n    const handleClick = (index: string) => {\r\n        setTab(index);\r\n    };\r\n\r\n    const phase = schema.phases[index];\r\n\r\n    return (\r\n        <>\r\n            <ButtonGroup variant=\"outlined\">\r\n                {map(phase.groups, (group, index) => (\r\n                    <Button\r\n                        key={index}\r\n                        variant={tab === String(index) ? 'contained' : 'outlined'}\r\n                        size=\"small\"\r\n                        onClick={() => handleClick(String(index))}\r\n                    >\r\n                        {t('Grupa')} {groupSymbol[index]}\r\n                    </Button>\r\n                ))}\r\n            </ButtonGroup>\r\n            {map(phase.groups, (group, i) => (\r\n                <TabPanel key={i} value={tab} index={String(i)}>\r\n                    <Group\r\n                        playerCount={group.playerCount}\r\n                        control={control}\r\n                        typeOfWin={phase.typeOfWin}\r\n                        promotion={group.promotion}\r\n                        index={i}\r\n                        phaseIndex={index}\r\n                    />\r\n                </TabPanel>\r\n            ))}\r\n        </>\r\n    );\r\n}\r\nexport default React.memo(GroupsPhase);\r\n","import { ScoreRow } from 'components/ScoreTable';\r\nimport { compact, flatMap, map, range } from 'lodash';\r\nimport React, { useCallback, useEffect, useMemo } from 'react';\r\nimport { Control, useFieldArray, useWatch } from 'react-hook-form';\r\nimport { Result, Schema, TournamentSchema } from 'types/global';\r\n\r\ntype Props = {\r\n    schema: Schema;\r\n    index: number;\r\n    control: Control<TournamentSchema, any>;\r\n};\r\n\r\nfunction CupPhase({ schema, index, control }: Props) {\r\n    const {\r\n        fields: results,\r\n        append,\r\n        replace,\r\n    } = useFieldArray({\r\n        control,\r\n        name: `phases.${index}.results`,\r\n        keyName: 'formId',\r\n    });\r\n\r\n    const phase = schema.phases[index];\r\n\r\n    const resultsValues = useWatch({\r\n        control,\r\n        name: `phases.${index}.results`,\r\n    });\r\n\r\n    // useEffect(() => {\r\n    //     console.log('replace-cup', phase.pairCount);\r\n    //     replace(\r\n    //         map(range(0, Number(phase.pairCount) || 0), () => ({\r\n    //             playerA: { id: '', score: '' },\r\n    //             playerB: { id: '', score: '' },\r\n    //         }))\r\n    //     );\r\n    // }, [phase.pairCount, replace]);\r\n\r\n    const handleOnAdd = useCallback(\r\n        (result: Result) => {\r\n            append(result);\r\n        },\r\n        [append]\r\n    );\r\n\r\n    const disabledPlayers = useMemo(() => {\r\n        return compact([\r\n            ...flatMap(resultsValues, 'playerA.id'),\r\n            ...flatMap(resultsValues, 'playerB.id'),\r\n        ]);\r\n    }, [resultsValues]);\r\n\r\n    console.log(results, 'results---222');\r\n\r\n    return (\r\n        <>\r\n            {map(results, (result, i) => (\r\n                <ScoreRow\r\n                    formName={`phases.${index}.results.${i}`}\r\n                    disabledPlayers={disabledPlayers}\r\n                    typeOfWin={phase.typeOfWin}\r\n                    control={control}\r\n                    result={result}\r\n                    key={result.formId}\r\n                    onAdd={handleOnAdd}\r\n                />\r\n            ))}\r\n        </>\r\n    );\r\n}\r\nexport default React.memo(CupPhase);\r\n","import { Alert, Button, ButtonGroup, Divider, Grid, Paper, TextField } from '@mui/material';\r\nimport Box from '@mui/material/Box';\r\nimport Tab from '@mui/material/Tab';\r\nimport Tabs from '@mui/material/Tabs';\r\nimport Typography from '@mui/material/Typography';\r\nimport { PlayerPicker } from 'components/PlayerPicker';\r\nimport { RoundAddButton } from 'components/RoundAddButton';\r\nimport { ScoreRow, ScoreTable } from 'components/ScoreTable';\r\nimport { findPlayerNameById } from 'helpers/global';\r\nimport { useActivePlayerListQuery, useSchemaQuery } from 'hooks';\r\nimport { combinations, compact, concat, filter, isEmpty, map, range } from 'lodash';\r\nimport 'lodash.combinations';\r\nimport { useCallback, useEffect, useMemo, useState } from 'react';\r\nimport {\r\n    Controller,\r\n    SubmitErrorHandler,\r\n    SubmitHandler,\r\n    useFieldArray,\r\n    useForm,\r\n    useWatch,\r\n} from 'react-hook-form';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { useUpdateEffect } from 'react-use';\r\nimport { GroupStageType, Player, TournamentSchema, TypeOfWin } from 'types/global';\r\nimport SaveIcon from '@mui/icons-material/Save';\r\nimport PlayCircleFilledWhiteIcon from '@mui/icons-material/PlayCircleFilledWhite';\r\nimport StopCircleIcon from '@mui/icons-material/StopCircle';\r\nimport { useTournamentQuery } from 'hooks';\r\nimport { useParams } from 'react-router-dom';\r\nimport { Loading } from 'components/Loading';\r\nimport { CupPhase, GroupsPhase } from 'Modules/Tournament';\r\nimport { TabPanel } from 'components/TabPanel';\r\n\r\nconst isTwoMatch = false;\r\n\r\nconst schema123 = {\r\n    playerCount: 3,\r\n    promotion: 1,\r\n    typeOfWin: TypeOfWin.OneMatch,\r\n};\r\n\r\nfunction TournamentDetail() {\r\n    const { id } = useParams<{ id: string }>();\r\n    const [tab, setTab] = useState('0');\r\n\r\n    const { data: tournamentData, isLoading: tournamentIsLoading } = useTournamentQuery(\r\n        id as string\r\n    );\r\n    const tournament = tournamentData?.data();\r\n    const { data: schemaData, isLoading: schemaIsLoading } = useSchemaQuery(tournament?.schemaId);\r\n    const schema = schemaData?.data();\r\n\r\n    const { control, handleSubmit, reset, register, setValue, watch } = useForm<TournamentSchema>();\r\n\r\n    useEffect(() => {\r\n        if (tournament?.phases) {\r\n            reset(tournament);\r\n        } else {\r\n            reset({\r\n                ...tournament,\r\n                phases: [\r\n                    {\r\n                        groups: [\r\n                            {\r\n                                players: map(range(0, 3), () => ({\r\n                                    id: '',\r\n                                    firstName: '',\r\n                                    lastName: '',\r\n                                })),\r\n                                results: [],\r\n                            },\r\n                        ],\r\n                    },\r\n                    {\r\n                        results: [\r\n                            { playerA: { id: '', score: '' }, playerB: { id: '', score: '' } },\r\n                        ],\r\n                    },\r\n                ],\r\n            });\r\n        }\r\n    }, [reset, tournamentData]);\r\n\r\n    const { t } = useTranslation();\r\n\r\n    const handleChange = (_: React.SyntheticEvent, newValue: string) => {\r\n        setTab(newValue);\r\n    };\r\n\r\n    const onSubmit = useCallback<SubmitHandler<TournamentSchema>>(async (data) => {\r\n        console.log(data, 'data');\r\n    }, []);\r\n\r\n    const onError = useCallback<SubmitErrorHandler<TournamentSchema>>((data) => {\r\n        console.log(data);\r\n    }, []);\r\n\r\n    const handleOnSubmit = useCallback(() => {\r\n        handleSubmit(onSubmit, onError)();\r\n    }, [handleSubmit, onSubmit, onError]);\r\n\r\n    return (\r\n        <Loading loading={tournamentIsLoading || schemaIsLoading}>\r\n            <Paper>\r\n                <Tabs value={tab} onChange={handleChange} variant=\"scrollable\">\r\n                    {map(schema?.phases, (value, index) => (\r\n                        <Tab label={value.name} value={String(index)} key={index} />\r\n                    ))}\r\n                </Tabs>\r\n                {schema &&\r\n                    map(schema?.phases, (value, index) => (\r\n                        <TabPanel value={tab} index={String(index)} className=\"p-3\" key={index}>\r\n                            {value.isGroupStage === GroupStageType.Cup ? (\r\n                                <CupPhase schema={schema} index={index} control={control} />\r\n                            ) : (\r\n                                <GroupsPhase schema={schema} index={index} control={control} />\r\n                            )}\r\n                        </TabPanel>\r\n                    ))}\r\n                <Box className=\"px-6 pb-4\">\r\n                    {tournament?.startDate && !tournament?.endDate && (\r\n                        <Button\r\n                            onClick={() => {}}\r\n                            startIcon={<StopCircleIcon />}\r\n                            color=\"primary\"\r\n                            children={t('Zakończ turniej')}\r\n                        />\r\n                    )}\r\n                    {!tournament?.startDate && !tournament?.endDate && (\r\n                        <Button\r\n                            onClick={handleOnSubmit}\r\n                            startIcon={<PlayCircleFilledWhiteIcon />}\r\n                            color=\"primary\"\r\n                            children={t('Wystartuj turniej')}\r\n                        />\r\n                    )}\r\n                </Box>\r\n            </Paper>\r\n        </Loading>\r\n        // </>\r\n    );\r\n}\r\nexport default TournamentDetail;\r\n"],"names":["children","value","index","className","clsx","PlayerPicker","onClose","onPick","disabledPlayers","open","useActivePlayerListQuery","data","isLoading","t","useTranslation","Dialog","Loading","loading","DialogTitle","List","sx","pt","map","docs","docSnapshot","player","ListItem","disabled","includes","id","button","onClick","ListItemAvatar","Avatar","bgcolor","blue","color","Person","ListItemText","primary","firstName","lastName","React","onAdd","props","IconButton","size","AddCircle","getMatchStatus","score","matchStatus","getPkt","findPlayerNameById","find","ScoreTable","players","promotion","onAddPlayer","results","getAllResultsByPlayerId","useCallback","reduce","acc","playerA","playerB","concat","status","parseInt","plus","minus","diff","pkt","result","useMemo","isEmpty","formId","m","w","r","p","brPlus","brMinus","brDiff","resultList","playerResult","filter","orderBy","TableContainer","Table","TableHead","TableRow","align","width","TableBody","style","backgroundColor","green","red","component","scope","ScoreRow","control","typeOfWin","formName","useState","teamAOpen","setTeamAOpen","teamBOpen","setTeamBOpen","handleTeamAClose","handleTeamBClose","getFormName","name","teamA","useWatch","teamB","addMatch","teamAId","teamBId","forEach","range","match","with","TypeOfWin","otherwise","isDraw","Grid","container","wrap","item","xs","defaultValue","render","field","onChange","fieldState","error","penaltyScore","TextField","inputProps","type","variant","placeholder","Box","Divider","Group","phaseIndex","playerCount","useFieldArray","keyName","fields","update","replace","resultsReplace","modalIndex","setModalIndex","handleClickOpen","setOpen","handleClose","compact","resultsValues","handlePick","useUpdateEffect","baseCombinations","combinations","Alert","severity","i","GroupsPhase","schema","tab","setTab","phase","phases","ButtonGroup","groups","group","Button","String","handleClick","groupSymbol","CupPhase","append","handleOnAdd","flatMap","console","log","useParams","useTournamentQuery","tournamentData","tournamentIsLoading","tournament","useSchemaQuery","schemaId","schemaData","schemaIsLoading","useForm","handleSubmit","reset","register","setValue","watch","useEffect","onSubmit","onError","handleOnSubmit","Paper","Tabs","_","newValue","Tab","label","isGroupStage","GroupStageType","startDate","endDate","startIcon","StopCircle","PlayCircleFilledWhite"],"sourceRoot":""}