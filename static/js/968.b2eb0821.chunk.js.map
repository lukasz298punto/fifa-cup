{"version":3,"file":"static/js/968.b2eb0821.chunk.js","mappings":"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","sources":["pages/TournamentDetail.tsx"],"sourcesContent":["import AddIcon from '@mui/icons-material/Add';\r\nimport AddCircleIcon from '@mui/icons-material/AddCircle';\r\nimport PersonIcon from '@mui/icons-material/Person';\r\nimport { Button, ButtonGroup, IconButton, Paper, TextField } from '@mui/material';\r\nimport Avatar from '@mui/material/Avatar';\r\nimport Box from '@mui/material/Box';\r\nimport { blue, green, red } from '@mui/material/colors';\r\nimport Dialog from '@mui/material/Dialog';\r\nimport DialogTitle from '@mui/material/DialogTitle';\r\nimport List from '@mui/material/List';\r\nimport ListItem from '@mui/material/ListItem';\r\nimport ListItemAvatar from '@mui/material/ListItemAvatar';\r\nimport ListItemText from '@mui/material/ListItemText';\r\nimport Tab from '@mui/material/Tab';\r\nimport Table from '@mui/material/Table';\r\nimport TableBody from '@mui/material/TableBody';\r\nimport TableHead from '@mui/material/TableHead';\r\nimport TableRow from '@mui/material/TableRow';\r\nimport Tabs from '@mui/material/Tabs';\r\nimport Typography from '@mui/material/Typography';\r\nimport { TableContainer } from 'components/TableContainer';\r\nimport { combinations, map, range, size } from 'lodash';\r\nimport 'lodash.combinations';\r\nimport { useEffect, useState } from 'react';\r\nimport { Controller, useFieldArray, useForm, useWatch } from 'react-hook-form';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { TableCell } from 'style/components';\r\nimport { Player } from 'types/global';\r\n\r\ninterface TabPanelProps {\r\n    children?: React.ReactNode;\r\n    index: string;\r\n    value: string;\r\n}\r\n\r\nfunction TabPanel(props: TabPanelProps) {\r\n    const { children, value, index, ...other } = props;\r\n\r\n    return (\r\n        <div\r\n            role=\"tabpanel\"\r\n            hidden={value !== index}\r\n            id={`simple-tabpanel-${index}`}\r\n            aria-labelledby={`simple-tab-${index}`}\r\n            {...other}\r\n        >\r\n            {value === index && (\r\n                <Box sx={{ p: 3 }}>\r\n                    <Typography>{children}</Typography>\r\n                </Box>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nconst isTwoMatch = false;\r\n\r\ntype Tournament = {\r\n    players: Omit<Player, 'active'>[];\r\n    results: [Player, Player][];\r\n};\r\n\r\nconst schema = {\r\n    playerCount: 3,\r\n    promotion: 1,\r\n};\r\n\r\nfunction TournamentDetail() {\r\n    const [value, setValue] = useState('Faza grupowa');\r\n    const teams = ['Japonia', 'Anglia', 'Argentyna'];\r\n    let pairs = combinations(teams, 2);\r\n\r\n    const [open, setOpen] = useState(false);\r\n    const [modalIndex, setModalIndex] = useState<number | null>(null);\r\n    const [selectedValue, setSelectedValue] = useState([]);\r\n\r\n    const handleClickOpen = (index: number) => () => {\r\n        setModalIndex(index);\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setModalIndex(null);\r\n        setOpen(false);\r\n    };\r\n\r\n    const { control, handleSubmit, reset, register } = useForm<Tournament>();\r\n\r\n    const { fields, append, prepend, remove, swap, move, insert, update } = useFieldArray({\r\n        control,\r\n        name: 'players',\r\n        keyName: 'formId',\r\n    });\r\n\r\n    useEffect(() => {\r\n        reset({\r\n            players: map(range(0, schema.playerCount), () => ({\r\n                id: '',\r\n                firstName: '',\r\n                lastName: '',\r\n            })),\r\n            results: [],\r\n        });\r\n    }, [reset]);\r\n\r\n    const results = useWatch({\r\n        control,\r\n        name: 'results',\r\n    });\r\n\r\n    console.log(results, 'results');\r\n\r\n    const { t } = useTranslation();\r\n\r\n    const handleChange = (event: React.SyntheticEvent, newValue: string) => {\r\n        setValue(newValue);\r\n    };\r\n\r\n    console.log(value, 'value');\r\n\r\n    const emails = ['username@gmail.com', 'user02@gmail.com', 'user03@gmail.com'];\r\n\r\n    console.log(combinations(fields, 2), 'combina');\r\n\r\n    return (\r\n        <>\r\n            <Dialog onClose={handleClose} open={open}>\r\n                <DialogTitle>Set backup account</DialogTitle>\r\n                <List sx={{ pt: 0 }}>\r\n                    {emails.map((email) => (\r\n                        <ListItem\r\n                            button\r\n                            onClick={() => {\r\n                                update(modalIndex as number, {\r\n                                    id: email,\r\n                                    firstName: email,\r\n                                    lastName: 'Boczon',\r\n                                });\r\n                                handleClose();\r\n                            }}\r\n                            key={email}\r\n                        >\r\n                            <ListItemAvatar>\r\n                                <Avatar sx={{ bgcolor: blue[100], color: blue[600] }}>\r\n                                    <PersonIcon />\r\n                                </Avatar>\r\n                            </ListItemAvatar>\r\n                            <ListItemText primary={email} />\r\n                        </ListItem>\r\n                    ))}\r\n                </List>\r\n            </Dialog>\r\n            <Paper>\r\n                {/* <Box sx={{ borderBottom: 1, borderColor: 'divider' }}> */}\r\n                <Tabs value={value} onChange={handleChange} variant=\"scrollable\">\r\n                    <Tab label=\"Faza grupowa\" value=\"Faza grupowa\" />\r\n                    <Tab label=\"1/8\" value=\"1/8\" />\r\n                    <Tab label=\"1/4\" value=\"1/4\" />\r\n                    <Tab label=\"1/2\" value=\"1/2\" />\r\n                    <Tab label=\"mecz o 3.\" value=\"mecz o 3.\" />\r\n                    <Tab label=\"Finał\" value=\"Finał\" />\r\n                </Tabs>\r\n                {/* </Box> */}\r\n                <TabPanel value={value} index={'Faza grupowa'}>\r\n                    <ButtonGroup variant=\"outlined\">\r\n                        <Button variant=\"contained\">Grupa A</Button>\r\n                        <Button>Grupa B</Button>\r\n                        <Button>Grupa C</Button>\r\n                    </ButtonGroup>\r\n\r\n                    <TableContainer className=\"my-2\">\r\n                        <Table>\r\n                            <TableHead>\r\n                                <TableRow>\r\n                                    <TableCell align=\"left\">{t('Zawodnik')}</TableCell>\r\n                                    <TableCell width={50} className=\"text-center\">\r\n                                        {t('Pkt')}\r\n                                    </TableCell>\r\n                                    <TableCell width={50} className=\"text-center\">\r\n                                        {t('M')}\r\n                                    </TableCell>\r\n                                    <TableCell width={50} className=\"text-center\">\r\n                                        {t('W')}\r\n                                    </TableCell>\r\n                                    <TableCell width={50} className=\"text-center\">\r\n                                        {t('R')}\r\n                                    </TableCell>\r\n                                    <TableCell width={50} className=\"text-center\">\r\n                                        {t('P')}\r\n                                    </TableCell>\r\n                                    <TableCell width={50} className=\"text-center\">\r\n                                        {t('Br+')}\r\n                                    </TableCell>\r\n                                    <TableCell width={50} className=\"text-center\">\r\n                                        {t('Br-')}\r\n                                    </TableCell>\r\n                                    <TableCell width={50} className=\"text-center\">\r\n                                        {t('+/-')}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            </TableHead>\r\n                            <TableBody>\r\n                                {map(fields, (field, index) => (\r\n                                    <TableRow\r\n                                        key={field.formId}\r\n                                        style={{\r\n                                            backgroundColor:\r\n                                                schema.promotion > index ? green[100] : red[100],\r\n                                        }}\r\n                                    >\r\n                                        <TableCell component=\"th\" scope=\"row\">\r\n                                            {field.id ? (\r\n                                                `${field.firstName} ${field.lastName}`\r\n                                            ) : (\r\n                                                <IconButton\r\n                                                    size=\"small\"\r\n                                                    color=\"primary\"\r\n                                                    onClick={handleClickOpen(index)}\r\n                                                >\r\n                                                    <AddCircleIcon />\r\n                                                </IconButton>\r\n                                            )}\r\n                                        </TableCell>\r\n                                        <TableCell\r\n                                            component=\"th\"\r\n                                            scope=\"row\"\r\n                                            className=\"text-center font-bold\"\r\n                                        >\r\n                                            0\r\n                                        </TableCell>\r\n                                        <TableCell\r\n                                            component=\"th\"\r\n                                            scope=\"row\"\r\n                                            className=\"text-center\"\r\n                                        >\r\n                                            0\r\n                                        </TableCell>\r\n                                        <TableCell\r\n                                            component=\"th\"\r\n                                            scope=\"row\"\r\n                                            className=\"text-center\"\r\n                                        >\r\n                                            0\r\n                                        </TableCell>\r\n                                        <TableCell\r\n                                            component=\"th\"\r\n                                            scope=\"row\"\r\n                                            className=\"text-center\"\r\n                                        >\r\n                                            0\r\n                                        </TableCell>\r\n                                        <TableCell\r\n                                            component=\"th\"\r\n                                            scope=\"row\"\r\n                                            className=\"text-center\"\r\n                                        >\r\n                                            {results?.[0][0].lastName}\r\n                                        </TableCell>\r\n                                        <TableCell\r\n                                            component=\"th\"\r\n                                            scope=\"row\"\r\n                                            className=\"text-center\"\r\n                                        >\r\n                                            0\r\n                                        </TableCell>\r\n                                        <TableCell\r\n                                            component=\"th\"\r\n                                            scope=\"row\"\r\n                                            className=\"text-center\"\r\n                                        >\r\n                                            0\r\n                                        </TableCell>\r\n                                        <TableCell\r\n                                            component=\"th\"\r\n                                            scope=\"row\"\r\n                                            className=\"text-center\"\r\n                                        >\r\n                                            0\r\n                                        </TableCell>\r\n                                    </TableRow>\r\n                                ))}\r\n                            </TableBody>\r\n                        </Table>\r\n                    </TableContainer>\r\n                    <Box className=\"flex justify-center\">\r\n                        <table>\r\n                            <tbody>\r\n                                {map(combinations(fields, 2), ([teamA, teamB], index) => (\r\n                                    <tr key={index}>\r\n                                        <td className=\"text-right py-3 border-b-2\">\r\n                                            {teamA.firstName && (\r\n                                                <Controller\r\n                                                    defaultValue={teamA.firstName}\r\n                                                    name={`results.${index}.0.firstName`}\r\n                                                    control={control}\r\n                                                    render={({\r\n                                                        field: { value },\r\n                                                        fieldState: { error },\r\n                                                    }) => <>{value}</>}\r\n                                                />\r\n                                            )}\r\n                                            {/* <span className=\"text-xsss\">{teamA.firstName} </span> */}\r\n                                        </td>\r\n                                        <td className=\"py-3 border-b-2\">\r\n                                            <span>\r\n                                                <Controller\r\n                                                    defaultValue={teamA.lastName}\r\n                                                    name={`results.${index}.0.lastName`}\r\n                                                    control={control}\r\n                                                    rules={{ required: t('To pole jest wymagane') }}\r\n                                                    render={({ field, fieldState: { error } }) => (\r\n                                                        <TextField\r\n                                                            inputProps={{\r\n                                                                className: 'p-1 text-center',\r\n                                                            }}\r\n                                                            {...field}\r\n                                                            className=\"mx-1 w-10\"\r\n                                                            size=\"small\"\r\n                                                            id=\"outlined-basic\"\r\n                                                            variant=\"outlined\"\r\n                                                        />\r\n                                                    )}\r\n                                                />\r\n                                                :\r\n                                                <Controller\r\n                                                    defaultValue={teamB.lastName}\r\n                                                    name={`results.${index}.1.lastName`}\r\n                                                    control={control}\r\n                                                    rules={{ required: t('To pole jest wymagane') }}\r\n                                                    render={({ field, fieldState: { error } }) => (\r\n                                                        <TextField\r\n                                                            inputProps={{\r\n                                                                className: 'p-1 text-center',\r\n                                                            }}\r\n                                                            {...field}\r\n                                                            className=\"mx-1 w-10\"\r\n                                                            size=\"small\"\r\n                                                            id=\"outlined-basic\"\r\n                                                            variant=\"outlined\"\r\n                                                        />\r\n                                                    )}\r\n                                                />\r\n                                            </span>\r\n                                        </td>\r\n                                        <td className=\"text-left border-b-2 py-3 \">\r\n                                            {teamB.firstName && (\r\n                                                <Controller\r\n                                                    defaultValue={teamB.firstName}\r\n                                                    name={`results.${index}.1.firstName`}\r\n                                                    control={control}\r\n                                                    render={({\r\n                                                        field: { value },\r\n                                                        fieldState: { error },\r\n                                                    }) => <>{value}</>}\r\n                                                />\r\n                                            )}\r\n                                        </td>\r\n                                    </tr>\r\n                                ))}\r\n                            </tbody>\r\n                        </table>\r\n                    </Box>\r\n                </TabPanel>\r\n                <TabPanel value={value} index={'1/8'}>\r\n                    Item Two\r\n                </TabPanel>\r\n                <TabPanel value={value} index={'1/4'}>\r\n                    Item Three\r\n                </TabPanel>\r\n                <TabPanel value={value} index={'1/2'}>\r\n                    Item Three\r\n                </TabPanel>\r\n                <TabPanel value={value} index={'mecz o 3.'}>\r\n                    Item Three\r\n                </TabPanel>\r\n                <TabPanel value={value} index={'Finał'}>\r\n                    Item Three\r\n                </TabPanel>\r\n            </Paper>\r\n        </>\r\n    );\r\n}\r\nexport default TournamentDetail;\r\n"],"names":["TabPanel","props","children","value","index","other","role","hidden","id","sx","p","schema","useState","setValue","combinations","open","setOpen","modalIndex","setModalIndex","handleClickOpen","handleClose","useForm","control","reset","handleSubmit","register","useFieldArray","name","keyName","fields","update","append","prepend","remove","swap","move","insert","useEffect","players","map","range","firstName","lastName","results","useWatch","console","log","t","useTranslation","onClose","pt","email","button","onClick","bgcolor","blue","color","primary","onChange","event","newValue","variant","label","className","align","width","field","style","backgroundColor","green","red","component","scope","size","formId","teamA","teamB","defaultValue","render","fieldState","error","rules","required","inputProps"],"sourceRoot":""}