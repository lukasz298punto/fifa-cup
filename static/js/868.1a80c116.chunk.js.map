{"version":3,"file":"static/js/868.1a80c116.chunk.js","mappings":"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","sources":["constants/global.ts","Modules/CupCreator/SchemaPhase.tsx","pages/CupCreator.tsx"],"sourcesContent":["export const groupSymbol = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L'];\r\n","import {\n    FormControl,\n    FormControlLabel,\n    FormHelperText,\n    FormLabel,\n    Grid,\n    MenuItem,\n    Paper,\n    Radio,\n    RadioGroup,\n    Select,\n    Table,\n    TableBody,\n    TableCell,\n    TableContainer,\n    TableHead,\n    TableRow,\n    TextField,\n} from '@mui/material';\nimport clsx from 'clsx';\nimport { groupSymbol } from 'constants/global';\nimport { isEmpty, map, range, size } from 'lodash';\nimport { SchemaFormInput } from 'pages/CupCreator';\nimport { useEffect } from 'react';\nimport { Control, Controller, FieldArrayWithId, useFieldArray, useWatch } from 'react-hook-form';\nimport { useTranslation } from 'react-i18next';\n\ntype Props = {\n    control: Control<SchemaFormInput, any>;\n    index: number;\n    visible: boolean;\n    field: FieldArrayWithId<SchemaFormInput, 'phases', 'formId'>;\n};\n\nfunction SchemaPhase({ control, index, field, visible }: Props) {\n    const { t } = useTranslation();\n\n    const groupCount = useWatch({ control, name: `phases.${index}.groupCount` });\n    const isGroupStage = !!Number(useWatch({ control, name: `phases.${index}.isGroupStage` }));\n\n    const { fields, append, prepend, remove, swap, move, insert, replace } = useFieldArray({\n        control,\n        name: `phases.${index}.groups`,\n        keyName: 'formId',\n    });\n\n    useEffect(() => {\n        if (groupCount) {\n            replace(map(range(0, groupCount), () => ({ playerCount: 3, promotion: 3 })));\n        }\n    }, [groupCount, replace]);\n\n    return (\n        <Grid\n            container\n            spacing={2}\n            key={field.formId}\n            className={clsx(!visible && 'hidden', 'mt-4')}\n        >\n            <Grid item xs={12}>\n                <FormControl>\n                    <FormLabel>{t('Typ fazy')}</FormLabel>\n                    <Controller\n                        defaultValue={field.isGroupStage}\n                        name={`phases.${index}.isGroupStage`}\n                        control={control}\n                        render={({ field }) => (\n                            <RadioGroup row {...field}>\n                                <FormControlLabel\n                                    value={'0'}\n                                    control={<Radio />}\n                                    label=\"Faza pucharowa\"\n                                />\n                                <FormControlLabel\n                                    value={'1'}\n                                    control={<Radio />}\n                                    label=\"Faza grupowa\"\n                                />\n                            </RadioGroup>\n                        )}\n                    />\n                </FormControl>\n            </Grid>\n            <Grid item xs={6} md={2}>\n                <FormControl className=\"w-full\">\n                    <FormLabel>{t('Rodzaj wygranej')}</FormLabel>\n                    <Controller\n                        defaultValue={field.typeOfWin}\n                        name={`phases.${index}.typeOfWin`}\n                        control={control}\n                        render={({ field }) => (\n                            <Select {...field} size=\"small\">\n                                <MenuItem value={1}>{t('Jeden mecz')}</MenuItem>\n                                <MenuItem value={2}>{t('Dwumecz')}</MenuItem>\n                                {!isGroupStage && <MenuItem value={3}>{t('Best 3')}</MenuItem>}\n                                {!isGroupStage && <MenuItem value={4}>{t('Best 5')}</MenuItem>}\n                            </Select>\n                        )}\n                    />\n                </FormControl>\n            </Grid>\n            {!isGroupStage && (\n                <Grid item xs={6} md={1}>\n                    <Controller\n                        defaultValue={field.pairCount}\n                        rules={{ required: t('To pole jest wymagane') }}\n                        name={`phases.${index}.pairCount`}\n                        control={control}\n                        render={({ field, fieldState: { error } }) => (\n                            <FormControl className=\"w-full\" error={!!error}>\n                                <FormLabel>{t('Ilość par')}</FormLabel>\n                                <TextField\n                                    {...field}\n                                    size=\"small\"\n                                    type=\"number\"\n                                    error={!!error}\n                                    helperText={error?.message || ''}\n                                />\n                            </FormControl>\n                        )}\n                    />\n                </Grid>\n            )}\n            {isGroupStage && (\n                <>\n                    <Grid item xs={6} md={1}>\n                        <Controller\n                            defaultValue={field.groupCount}\n                            name={`phases.${index}.groupCount`}\n                            rules={{ required: t('To pole jest wymagane') }}\n                            control={control}\n                            render={({ field, fieldState: { error } }) => (\n                                <FormControl className=\"w-full\" error={!!error}>\n                                    <FormLabel>{t('Ilość grup')}</FormLabel>\n                                    <Select\n                                        {...field}\n                                        size=\"small\"\n                                        className=\"w-full\"\n                                        error={!!error}\n                                    >\n                                        {map(range(1, size(groupSymbol) + 1), (val) => (\n                                            <MenuItem value={val}>{val}</MenuItem>\n                                        ))}\n                                    </Select>\n                                    {!!error && <FormHelperText>{error?.message}</FormHelperText>}\n                                </FormControl>\n                            )}\n                        />\n                    </Grid>\n                    {!isEmpty(fields) && (\n                        <Grid item container>\n                            <Grid item xs={12} sm={8} md={4} lg={3}>\n                                <TableContainer component={Paper}>\n                                    <Table size=\"small\" className=\"w-full\">\n                                        <TableHead>\n                                            <TableRow>\n                                                <TableCell align=\"left\">\n                                                    {t('Nazwa grupy')}\n                                                </TableCell>\n                                                <TableCell align=\"center\" width={110}>\n                                                    {t('Ilość drużyn')}\n                                                </TableCell>\n                                                <TableCell align=\"center\" width={100}>\n                                                    {t('Awans')}\n                                                </TableCell>\n                                            </TableRow>\n                                        </TableHead>\n                                        <TableBody>\n                                            {map(fields, (field, i) => (\n                                                <TableRow key={field.formId}>\n                                                    <TableCell component=\"th\" scope=\"row\">\n                                                        {t('Grupa')} {groupSymbol[i]}\n                                                    </TableCell>\n                                                    <TableCell align=\"right\">\n                                                        <Controller\n                                                            defaultValue={field.playerCount}\n                                                            name={`phases.${index}.groups.${i}.playerCount`}\n                                                            control={control}\n                                                            render={({ field }) => (\n                                                                <Select\n                                                                    {...field}\n                                                                    size=\"small\"\n                                                                    className=\"w-full\"\n                                                                >\n                                                                    {map(range(3, 16), (val) => (\n                                                                        <MenuItem value={val}>\n                                                                            {val}\n                                                                        </MenuItem>\n                                                                    ))}\n                                                                </Select>\n                                                            )}\n                                                        />\n                                                    </TableCell>\n                                                    <TableCell align=\"right\">\n                                                        <Controller\n                                                            defaultValue={field.promotion}\n                                                            name={`phases.${index}.groups.${i}.promotion`}\n                                                            control={control}\n                                                            render={({ field }) => (\n                                                                <Select\n                                                                    {...field}\n                                                                    size=\"small\"\n                                                                    className=\"w-full\"\n                                                                >\n                                                                    {map(range(3, 16), (val) => (\n                                                                        <MenuItem value={val}>\n                                                                            {val}\n                                                                        </MenuItem>\n                                                                    ))}\n                                                                </Select>\n                                                            )}\n                                                        />\n                                                    </TableCell>\n                                                </TableRow>\n                                            ))}\n                                        </TableBody>\n                                    </Table>\n                                </TableContainer>\n                            </Grid>\n                        </Grid>\n                    )}\n                </>\n            )}\n        </Grid>\n    );\n}\nexport default SchemaPhase;\n","import React, { useState } from 'react';\r\nimport Box from '@mui/material/Box';\r\nimport Stepper from '@mui/material/Stepper';\r\nimport Step from '@mui/material/Step';\r\nimport StepLabel from '@mui/material/StepLabel';\r\nimport Button, { ButtonProps } from '@mui/material/Button';\r\nimport Typography from '@mui/material/Typography';\r\nimport {\r\n    Avatar,\r\n    Divider,\r\n    FormControl,\r\n    FormControlLabel,\r\n    FormLabel,\r\n    Grid,\r\n    IconButton,\r\n    InputLabel,\r\n    List,\r\n    ListItem,\r\n    ListItemAvatar,\r\n    ListItemButton,\r\n    ListItemText,\r\n    MenuItem,\r\n    Paper,\r\n    Radio,\r\n    RadioGroup,\r\n    Select,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableContainer,\r\n    TableHead,\r\n    TableRow,\r\n    TextField,\r\n    useMediaQuery,\r\n} from '@mui/material';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { concat, filter, get, map, range, size } from 'lodash';\r\nimport SaveIcon from '@mui/icons-material/Save';\r\nimport AddIcon from '@mui/icons-material/Add';\r\nimport NavigateNextIcon from '@mui/icons-material/NavigateNext';\r\nimport ArrowBackIcon from '@mui/icons-material/ArrowBack';\r\nimport ArrowForwardIcon from '@mui/icons-material/ArrowForward';\r\nimport DeleteOutlineIcon from '@mui/icons-material/DeleteOutline';\r\nimport { useTheme } from '@emotion/react';\r\nimport { Title } from 'components/Title';\r\nimport { OverridableComponent } from '@mui/material/OverridableComponent';\r\nimport {\r\n    Controller,\r\n    SubmitErrorHandler,\r\n    SubmitHandler,\r\n    useFieldArray,\r\n    useForm,\r\n    useWatch,\r\n} from 'react-hook-form';\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport * as yup from 'yup';\r\nimport SchemaPhase from 'Modules/CupCreator/SchemaPhase';\r\n\r\nfunction FormButton({\r\n    mobileIcon: MobileIcon,\r\n    isMobile,\r\n    ...props\r\n}: ButtonProps & { isMobile: boolean; mobileIcon: OverridableComponent<any> }) {\r\n    if (isMobile) {\r\n        return (\r\n            <IconButton onClick={props.onClick} disabled={props.disabled} color={props.color}>\r\n                <MobileIcon />\r\n            </IconButton>\r\n        );\r\n    }\r\n\r\n    return <Button {...props} />;\r\n}\r\n\r\nexport type SchemaFormInput = {\r\n    name: string;\r\n    phases: {\r\n        name: string;\r\n        isGroupStage: '0' | '1';\r\n        typeOfWin: number;\r\n        pairCount?: number;\r\n        groupCount?: number;\r\n        groups?: { promotion: number; playerCount: number }[];\r\n    }[];\r\n    ex: any;\r\n};\r\n\r\n// const schema = yup\r\n//     .object({\r\n//         name: yup.string().required(),\r\n//         phases: {\r\n//             pairCount: yup.string().required(),\r\n//         },\r\n//     })\r\n\r\n//     .required();\r\n\r\nfunction CupCreator() {\r\n    const [activeStep, setActiveStep] = useState(0);\r\n    const theme = useTheme();\r\n    const matches = useMediaQuery(get(theme, 'breakpoints').down('sm'));\r\n    const { t } = useTranslation();\r\n    const { control, handleSubmit } = useForm<SchemaFormInput>({\r\n        defaultValues: {\r\n            phases: [{ isGroupStage: '0', typeOfWin: 1, name: 'Faza grupowa' }],\r\n        },\r\n    });\r\n\r\n    const { fields, append, prepend, remove, swap, move, insert } = useFieldArray({\r\n        control,\r\n        name: 'phases',\r\n        keyName: 'formId',\r\n    });\r\n\r\n    const handleNext = () => {\r\n        setActiveStep((prevActiveStep) => prevActiveStep + 1);\r\n    };\r\n\r\n    const handleBack = () => {\r\n        setActiveStep((prevActiveStep) => prevActiveStep - 1);\r\n    };\r\n\r\n    const handleAddNewStep = () => {\r\n        append({ name: `Etap ${size(fields) + 1}`, isGroupStage: '0', typeOfWin: 1 });\r\n    };\r\n\r\n    const handleRemoveStep = (index: number) => () => {\r\n        remove(index);\r\n    };\r\n\r\n    const onSubmit: SubmitHandler<SchemaFormInput> = (data) => {\r\n        console.log(data);\r\n    };\r\n\r\n    const onError: SubmitErrorHandler<SchemaFormInput> = (data) => {\r\n        console.log(data);\r\n    };\r\n\r\n    const handleOnSubmit = () => {\r\n        handleSubmit(onSubmit, onError)();\r\n    };\r\n\r\n    return (\r\n        <Paper\r\n            sx={{\r\n                p: 2,\r\n            }}\r\n        >\r\n            <Box className=\"flex mb-1 items-center\">\r\n                <Title className=\"mr-2\">{t('Tworzenie nowego schematu dla Turnieju')}</Title>\r\n                <Controller\r\n                    name=\"name\"\r\n                    control={control}\r\n                    rules={{ required: t('To pole jest wymagane') }}\r\n                    render={({ field, fieldState: { error } }) => (\r\n                        <TextField\r\n                            label={t('Nazwa schematu')}\r\n                            error={!!error}\r\n                            helperText={error?.message || ''}\r\n                            {...field}\r\n                            size=\"small\"\r\n                        />\r\n                    )}\r\n                />\r\n            </Box>\r\n            <Box sx={{ width: '100%' }}>\r\n                <Stepper\r\n                    nonLinear\r\n                    activeStep={activeStep}\r\n                    orientation={matches ? 'vertical' : 'horizontal'}\r\n                >\r\n                    {map(fields, (field, index) => (\r\n                        <Step key={field.formId}>\r\n                            <StepLabel>\r\n                                <Box className=\"flex items-center\">\r\n                                    <TextField\r\n                                        className=\"max-w-[9rem]\"\r\n                                        variant=\"outlined\"\r\n                                        size=\"small\"\r\n                                        defaultValue={field.name}\r\n                                    />\r\n                                    {size(fields) > 1 && (\r\n                                        <DeleteOutlineIcon\r\n                                            onClick={handleRemoveStep(index)}\r\n                                            fontSize=\"small\"\r\n                                            color=\"error\"\r\n                                            className=\"cursor-pointer\"\r\n                                        />\r\n                                    )}\r\n                                </Box>\r\n                            </StepLabel>\r\n                        </Step>\r\n                    ))}\r\n                </Stepper>\r\n\r\n                {map(fields, (field, index) => (\r\n                    <SchemaPhase\r\n                        control={control}\r\n                        index={index}\r\n                        field={field}\r\n                        visible={index === activeStep}\r\n                    />\r\n                ))}\r\n\r\n                <Box sx={{ display: 'flex', flexDirection: 'row', pt: 2 }}>\r\n                    <FormButton\r\n                        mobileIcon={ArrowBackIcon}\r\n                        isMobile={matches}\r\n                        disabled={activeStep === 0}\r\n                        onClick={handleBack}\r\n                        sx={{ mr: 1 }}\r\n                        startIcon={<ArrowBackIcon />}\r\n                        children={t('Poprzedni')}\r\n                        color=\"primary\"\r\n                    />\r\n                    <FormButton\r\n                        mobileIcon={ArrowForwardIcon}\r\n                        isMobile={matches}\r\n                        disabled={activeStep === size(fields) - 1}\r\n                        onClick={handleNext}\r\n                        endIcon={<ArrowForwardIcon />}\r\n                        children={t('Następny')}\r\n                        color=\"primary\"\r\n                    />\r\n                    <Box sx={{ flex: '1 1 auto' }} />\r\n\r\n                    <FormButton\r\n                        mobileIcon={AddIcon}\r\n                        isMobile={matches}\r\n                        startIcon={<AddIcon />}\r\n                        onClick={handleAddNewStep}\r\n                        children={t('Dodaj faze')}\r\n                        color=\"primary\"\r\n                    />\r\n                    <FormButton\r\n                        onClick={handleOnSubmit}\r\n                        mobileIcon={SaveIcon}\r\n                        isMobile={matches}\r\n                        startIcon={<SaveIcon />}\r\n                        color=\"primary\"\r\n                        children={t('Zapisz')}\r\n                    />\r\n                </Box>\r\n            </Box>\r\n        </Paper>\r\n    );\r\n}\r\nexport default CupCreator;\r\n"],"names":["groupSymbol","control","index","field","visible","t","useTranslation","groupCount","useWatch","name","isGroupStage","Number","useFieldArray","keyName","fields","replace","append","prepend","remove","swap","move","insert","useEffect","map","range","playerCount","promotion","Grid","container","spacing","className","clsx","item","xs","FormControl","FormLabel","defaultValue","render","RadioGroup","row","FormControlLabel","value","Radio","label","md","typeOfWin","Select","size","MenuItem","pairCount","rules","required","error","fieldState","TextField","type","helperText","message","val","FormHelperText","isEmpty","sm","lg","TableContainer","component","Paper","Table","TableHead","TableRow","TableCell","align","width","TableBody","i","scope","formId","FormButton","MobileIcon","mobileIcon","isMobile","props","IconButton","onClick","disabled","color","Button","useState","activeStep","setActiveStep","theme","useTheme","matches","useMediaQuery","get","down","useForm","defaultValues","phases","handleSubmit","handleRemoveStep","onSubmit","data","console","log","onError","sx","p","Box","Title","Stepper","nonLinear","orientation","Step","StepLabel","variant","DeleteOutline","fontSize","display","flexDirection","pt","ArrowBackIcon","prevActiveStep","mr","startIcon","ArrowBack","children","ArrowForwardIcon","endIcon","ArrowForward","flex","AddIcon","Add","SaveIcon","Save"],"sourceRoot":""}